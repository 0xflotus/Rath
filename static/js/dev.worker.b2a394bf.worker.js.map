{"version":3,"sources":["../webpack/bootstrap","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../../src/sum.js","../../src/mean.js","../../src/sum_nth_power_deviations.js","../../src/variance.js","../../src/standard_deviation.js","../../src/mode_sorted.js","../../src/numeric_sort.js","../../src/min.js","../../src/max.js","../../src/sum_simple.js","../../src/quantile_sorted.js","../../src/quickselect.js","../../src/quantile.js","../../src/quantile_rank_sorted.js","../../src/interquartile_range.js","../../src/median.js","../../src/median_absolute_deviation.js","../../src/shuffle_in_place.js","../../src/shuffle.js","../../src/sample.js","../../src/make_matrix.js","../../src/unique_count_sorted.js","../../src/ckmeans.js","../../src/sample_covariance.js","../../src/sample_variance.js","../../src/sample_standard_deviation.js","../../src/sample_correlation.js","../../src/combine_means.js","../../src/mean_simple.js","../../src/root_mean_square.js","../../src/bayesian_classifier.js","../../src/perceptron.js","../../src/epsilon.js","../../src/factorial.js","../../src/gammaln.js","../../src/chi_squared_distribution_table.js","../../src/kernel_density_estimation.js","../../src/standard_normal_table.js","../../src/error_function.js","../../src/inverse_error_function.js","../../src/sign.js","../../src/euclidean_distance.js","../../src/k_means_cluster.js","../../src/silhouette.js","../../src/relative_error.js","../../src/add_to_mean.js","../../src/approx_equal.js","../../src/bernoulli_distribution.js","../../src/binomial_distribution.js","../../src/bisect.js","../../src/chi_squared_goodness_of_fit.js","../../src/chunk.js","../../src/coefficient_of_variation.js","../../src/combinations.js","../../src/combinations_replacement.js","../../src/combine_variances.js","../../src/cumulative_std_logistic_probability.js","../../src/cumulative_std_normal_probability.js","../../src/equal_interval_breaks.js","../../src/extent.js","../../src/extent_sorted.js","../../src/gamma.js","../../src/geometric_mean.js","../../src/harmonic_mean.js","../../src/linear_regression.js","../../src/linear_regression_line.js","../../src/log_average.js","../../src/logit.js","../../src/max_sorted.js","../../src/median_sorted.js","../../src/min_sorted.js","../../src/mode.js","../../src/mode_fast.js","../../src/permutation_test.js","../../src/permutations_heap.js","../../src/poisson_distribution.js","../../src/probit.js","../../src/product.js","../../src/quantile_rank.js","../../src/r_squared.js","../../src/sample_kurtosis.js","../../src/sample_rank_correlation.js","../../src/sample_skewness.js","../../src/sample_with_replacement.js","../../src/silhouette_metric.js","../../src/subtract_from_mean.js","../../src/t_test.js","../../src/t_test_two_sample.js","../../src/wilcoxon_rank_sum.js","../../src/z_score.js","../../../node_modules/cube-core/built/utils/aggregation.js","../../../node_modules/cube-core/built/index.js","../../../node_modules/regenerator-runtime/runtime.js","../../../node_modules/cube-core/built/core/index.js","../../../node_modules/cube-core/built/core/periodCube.js","../../../node_modules/cube-core/built/core/momentCube.js","../../../node_modules/cube-core/built/utils/transform.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../../node_modules/visual-insights/build/esm/statistics/correlation.js","../../../node_modules/visual-insights/build/esm/statistics/utils.js","../../../node_modules/visual-insights/build/esm/statistics/linearRegression.js","../../../node_modules/visual-insights/build/esm/constant.js","../../../node_modules/visual-insights/build/esm/statistics/aggregation.js","../../../node_modules/visual-insights/build/esm/insights/config.js","../../../node_modules/visual-insights/build/esm/ml/cluster/kruskal.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../../../node_modules/visual-insights/build/esm/ml/classification/knn.js","../../../node_modules/visual-insights/build/esm/sampling/index.js","../../../node_modules/visual-insights/build/esm/ml/outlier/isolationForest.js","../../../node_modules/visual-insights/build/esm/ml/index.js","../../../node_modules/visual-insights/build/esm/insights/subspaces.js","../../../node_modules/visual-insights/build/esm/insights/intention/groups.js","../../../node_modules/visual-insights/build/esm/insights/dev.js","workers/timer.js","workers/dev.worker.js?worker"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","sum","x","length","let","transition","correction","Math","abs","mean","Error","sumNthPowerDeviations","const","tempValue","meanValue","pow","variance","standardDeviation","v","sqrt","modeSorted","sorted","last","NaN","maxSeen","seenThis","numericSort","slice","sort","a","b","min","max","sumSimple","quantileSorted","idx","ceil","quickselect","arr","k","left","right","z","log","exp","sd","floor","j","swap","tmp","quantile","copy","Array","isArray","indices","push","quantileIndex","compare","stack","pop","quantileSelect","results","len","quantileRankSorted","mid","lo","hi","u","interquartileRange","q1","q2","median","medianAbsoluteDeviation","medianValue","medianAbsoluteDeviations","shuffleInPlace","randomSource","random","temporary","index","shuffle","sample","makeMatrix","columns","rows","matrix","column","uniqueCountSorted","lastSeenValue","uniqueValueCount","ssq","sums","sumsOfSquares","sji","muji","fillMatrixColumn","iMin","iMax","cluster","backtrackMatrix","jlow","ssqjlow","ssqj","jhigh","sampleCovariance","y","xmean","ymean","sampleVariance","sampleStandardDeviation","sampleVarianceX","sampleCorrelation","combineMeans","mean1","n1","mean2","n2","meanSimple","rootMeanSquare","sumOfSquares","BayesianClassifier","this","totalCount","data","train","item","category","score","odds","oddsSums","combination","PerceptronModel","weights","bias","predict","features","label","prediction","gradient","epsilon","factorial","accumulator","COEFFICIENTS","LOGSQRT2PI","PI","chiSquaredDistributionTable","1","0.995","0.99","0.975","0.95","0.9","0.5","0.1","0.05","0.025","0.01","0.005","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","40","50","60","70","80","90","100","SQRT_2PI","kernels","gaussian","bandwidthMethods","nrd","stddev","iqr","kernelDensityEstimation","X","kernel","bandwidthMethod","kernelFn","bandwidth","cumulativeDistribution","round","standardNormalTable","errorFunction","tau","inverseErrorFunction","inv","sign","TypeError","euclideanDistance","diff","labelPoints","points","centroids","map","minDist","Number","MAX_VALUE","dist","calculateCentroids","labels","numCluster","dimension","counts","fill","numPoints","point","current","centroid","calculateChange","total","silhouette","groupings","numGroups","result","distances","meanDistanceFromPointToGroup","meanDistanceToNearestGroup","which","group","relativeError","actual","expected","newValue","tolerance","trials","probability","cumulativeProbability","cells","binomialCoefficient","func","start","end","maxIterations","errorTolerance","output","distributionType","significance","chiSquared","hypothesizedDistribution","observedFrequencies","expectedFrequencies","degreesOfFreedom","chunkSize","nClusters","nValues","shift","shiftedValue","clusters","clusterRight","clusterLeft","combinations","subI","subsetCombinations","next","combinationList","unshift","combinationsReplacement","concat","variance1","variance2","newMean","absZ","toFixed","nClasses","theMin","theMax","breaks","breakSize","gamma","isInteger","sin","seriesDenom","E","Infinity","g","reciprocalSum","oldCentroids","newCentroids","change","dataLength","sumX","sumY","sumXX","sumXY","mb","Map","modeCount","newCount","set","sampleX","sampleY","alternative","testStatistic","testStatDsn","allData","midIndex","permLeft","permRight","permTestStatistic","numExtremeTStats","elements","indexes","permutations","swapFrom","temp","lambda","factorialX","average","err","secondCentralMoment","fourthCentralMoment","xIndexes","pair","yIndexes","xRanks","yRanks","sumSquaredDeviations","sumCubedDeviations","besselsCorrection","theSampleStandardDeviation","expectedValue","difference","meanX","meanY","sampleVarianceY","weightedVariance","pooledSamples","rank","tiedRanks","replaceRanksInPlace","rankSum","sum_unsafe","subset","measures","forEach","mea","_loop_1","_loop_2","count","MEASURES","cnts","_loop_3","__assign","index_1","require","transform_1","aggregation_1","operatorMap","createCube","_a","type","_b","aggFunc","_c","factTable","_d","dimensions","_e","periodCube","momentCube","default","props","asFields","operator","dataSource","cube","table","tree2Table","row","as","__export","runtime","undefined","Op","hasOwn","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","define","obj","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","done","GenStateSuspendedYield","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","resolve","reject","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","reverse","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","periodCube_1","momentCube_1","__read","e","ar","__spread","arguments","__values","Node","children","_rawData","cache","params","_i","apply","aggData","_aggData","rawData","clearCache","e_1","size","children_1","children_1_1","child","e_1_1","return","getNode","search","node","level","e_2","entries","children_2","children_2_1","childName","e_2_1","tree","e_3","children_3","children_3_1","e_3_1","buildTree","insertNode","member","has","aggTree","e_4","children_4","children_4_1","e_4_1","aggNode","e_5","children_5","children_5_1","e_5_1","setData","assign","dfs","_arrayLikeToArray","arr2","_unsupportedIterableToArray","minLen","from","test","_slicedToArray","_arr","_n","_s","_classCallCheck","instance","Constructor","_defineProperties","target","descriptor","_createClass","protoProps","staticProps","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","_toConsumableArray","_createForOfIteratorHelper","allowArrayLike","it","F","f","normalCompletion","didErr","step","_e2","nestTree","xSet","ySet","rowSums","colSums","totalSum","counter","chis","observed","crammersV","fieldX","fieldY","Set","add","pearsonCC","xBar","yBar","getCombination","ans","combine","normalize","frequencyList","entropy","probabilityList","log2","oneDLinearRegression","Y","normalizedDataSource","valueSets","dim","normalizedRecord","normalizeRecord","beta","numerator","denominator","getRegressionEquation","alpha","SSR","SST","yHat","cumulativeLogisticDistribution","r_squared","pValue","CHANNEL","CrammersVThreshold","PearsonCorrelation","turnAdjMatrix2List","edges","find","parents","union","p1","p2","findWithEffect","sizes","unionWithEffect","size1","size2","kruskalMST","groupNumber","threshold","edgesInMST","groups","inCutEdge","edge","groupMaxSize","limitSize","kruskalWithLimitSize","kruskal","meas","meaIndex","_setPrototypeOf","_inherits","subClass","superClass","_getPrototypeOf","_typeof","_possibleConstructorReturn","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","Super","NewTarget","KNN","K","targetRecord","dimFeatures","meaFeatures","dimWeights","meaWeights","dimSets","rIndex","dis","feature","targets","neighbors","tar","votes","nei","mostCount","mostFeature","vote","dimIndex","indexOf","valueParser","ranges","uniformSampling","sampleIndexes","seed","linearCongruentialGenerator","Outier","IsolationForest","treeNumber","Psi","sampleSize","limitHeight","iForest","normalizeDimensions","normalizedSampleData","depth","rand","randField","dimLength","meaLength","randValue","leftSubData","rightSubData","field","buildIsolationTree","iTree","pathLength","nodeSize","AFS","getPathLength","samples","recordScoreList","recordScore","avgPathLength","getDimCorrelationMatrix","getMeaCorrelationMatrix","getDimClusterGroups","max_number_of_group","maxDimNumberInView","dimCorrelationMatrix","Cluster","getMeaSetsBasedOnClusterGroups","correlation_threshold","soft_max_measures_in_view","correlationMatrix","GroupIntention","sameCount","getNeighbors","percents","getTargetValuePercent","sig","per","SPLITER","crossGroups","dimensionGroups","measureGroups","viewSpaces","getCombinationFromClusterGroups","fieldSets","combineFieldSet","DefaultIWorker","getGeneralIntentionSpace","fL","pL","filter","impurity","order","getOutlierIntentionSpace","buildIsolationForest","scoreList","estimateOutierScore","maxIndex","des","description","getTrendIntentionSpace","orderedData","linearModel","getGroupIntentionSpace","groupIntention","getSignificance","IntentionWorkerCollection","workers","iWorker","status","iWorkerWithStatus","withDefaultIWorkers","colletion","register","outlier","trend","enable","getIntentionSpaces","cubePool","Collection","ansSpace","space","join","generalSpace","each","iSpace","console","collection","dimension_correlation_threshold","measure_correlation_threshold","max_dimension_num_in_view","max_measure_num_in_view","dimensionSets","measureSets","t0","getTime","aggregate","t1","usedCollection","init","task","addEventListener","getVisSpaces","postMessage","success","message","startTime","cost"],"mappings":"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","file":"static/js/dev.worker.b2a394bf.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","module.exports = require(\"regenerator-runtime\");\n","/**\n * Our default sum is the [Kahan-Babuska algorithm](https://pdfs.semanticscholar.org/1760/7d467cda1d0277ad272deb2113533131dc09.pdf).\n * This method is an improvement over the classical\n * [Kahan summation algorithm](https://en.wikipedia.org/wiki/Kahan_summation_algorithm).\n * It aims at computing the sum of a list of numbers while correcting for\n * floating-point errors. Traditionally, sums are calculated as many\n * successive additions, each one with its own floating-point roundoff. These\n * losses in precision add up as the number of numbers increases. This alternative\n * algorithm is more accurate than the simple way of calculating sums by simple\n * addition.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sum([1, 2, 3]); // => 6\n */\nfunction sum(x) {\n    // If the array is empty, we needn't bother computing its sum\n    if (x.length === 0) {\n        return 0;\n    }\n\n    // Initializing the sum as the first number in the array\n    let sum = x[0];\n\n    // Keeping track of the floating-point error correction\n    let correction = 0;\n\n    let transition;\n\n    for (let i = 1; i < x.length; i++) {\n        transition = sum + x[i];\n\n        // Here we need to update the correction in a different fashion\n        // if the new absolute value is greater than the absolute sum\n        if (Math.abs(sum) >= Math.abs(x[i])) {\n            correction += sum - transition + x[i];\n        } else {\n            correction += x[i] - transition + sum;\n        }\n\n        sum = transition;\n    }\n\n    // Returning the corrected sum\n    return sum + correction;\n}\n\nexport default sum;\n","import sum from \"./sum\";\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\nfunction mean(x) {\n    if (x.length === 0) {\n        throw new Error(\"mean requires at least one data point\");\n    }\n\n    return sum(x) / x.length;\n}\n\nexport default mean;\n","import mean from \"./mean\";\n\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it's the sum of squared deviations.\n * When n=3 it's the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n *\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * sumNthPowerDeviations(input, 2) / input.length;\n */\nfunction sumNthPowerDeviations(x, n) {\n    const meanValue = mean(x);\n    let sum = 0;\n    let tempValue;\n    let i;\n\n    // This is an optimization: when n is 2 (we're computing a number squared),\n    // multiplying the number by itself is significantly faster than using\n    // the Math.pow method.\n    if (n === 2) {\n        for (i = 0; i < x.length; i++) {\n            tempValue = x[i] - meanValue;\n            sum += tempValue * tempValue;\n        }\n    } else {\n        for (i = 0; i < x.length; i++) {\n            sum += Math.pow(x[i] - meanValue, n);\n        }\n    }\n\n    return sum;\n}\n\nexport default sumNthPowerDeviations;\n","import sumNthPowerDeviations from \"./sum_nth_power_deviations\";\n\n/**\n * The [variance](http://en.wikipedia.org/wiki/Variance)\n * is the sum of squared deviations from the mean.\n *\n * This is an implementation of variance, not sample variance:\n * see the `sampleVariance` method if you want a sample measure.\n *\n * @param {Array<number>} x a population of one or more data points\n * @returns {number} variance: a value greater than or equal to zero.\n * zero indicates that all values are identical.\n * @throws {Error} if x's length is 0\n * @example\n * variance([1, 2, 3, 4, 5, 6]); // => 2.9166666666666665\n */\nfunction variance(x) {\n    if (x.length === 0) {\n        throw new Error(\"variance requires at least one data point\");\n    }\n\n    // Find the mean of squared deviations between the\n    // mean value and each value.\n    return sumNthPowerDeviations(x, 2) / x.length;\n}\n\nexport default variance;\n","import variance from \"./variance\";\n\n/**\n * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n * is the square root of the variance. This is also known as the population\n * standard deviation. It's useful for measuring the amount\n * of variation or dispersion in a set of values.\n *\n * Standard deviation is only appropriate for full-population knowledge: for\n * samples of a population, {@link sampleStandardDeviation} is\n * more appropriate.\n *\n * @param {Array<number>} x input\n * @returns {number} standard deviation\n * @example\n * variance([2, 4, 4, 4, 5, 5, 7, 9]); // => 4\n * standardDeviation([2, 4, 4, 4, 5, 5, 7, 9]); // => 2\n */\nfunction standardDeviation(x) {\n    if (x.length === 1) {\n        return 0;\n    }\n    const v = variance(x);\n    return Math.sqrt(v);\n}\n\nexport default standardDeviation;\n","/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)` because the input is sorted.\n *\n * @param {Array<number>} sorted a sample of one or more data points\n * @returns {number} mode\n * @throws {Error} if sorted is empty\n * @example\n * modeSorted([0, 0, 1]); // => 0\n */\nfunction modeSorted(sorted) {\n    // Handle edge cases:\n    // The mode of an empty list is undefined\n    if (sorted.length === 0) {\n        throw new Error(\"mode requires at least one data point\");\n    } else if (sorted.length === 1) {\n        return sorted[0];\n    }\n\n    // This assumes it is dealing with an array of size > 1, since size\n    // 0 and 1 are handled immediately. Hence it starts at index 1 in the\n    // array.\n    let last = sorted[0],\n        // store the mode as we find new modes\n        value = NaN,\n        // store how many times we've seen the mode\n        maxSeen = 0,\n        // how many times the current candidate for the mode\n        // has been seen\n        seenThis = 1;\n\n    // end at sorted.length + 1 to fix the case in which the mode is\n    // the highest number that occurs in the sequence. the last iteration\n    // compares sorted[i], which is undefined, to the highest number\n    // in the series\n    for (let i = 1; i < sorted.length + 1; i++) {\n        // we're seeing a new number pass by\n        if (sorted[i] !== last) {\n            // the last number is the new mode since we saw it more\n            // often than the old one\n            if (seenThis > maxSeen) {\n                maxSeen = seenThis;\n                value = last;\n            }\n            seenThis = 1;\n            last = sorted[i];\n            // if this isn't a new number, it's one more occurrence of\n            // the potential mode\n        } else {\n            seenThis++;\n        }\n    }\n    return value;\n}\n\nexport default modeSorted;\n","/**\n * Sort an array of numbers by their numeric value, ensuring that the\n * array is not changed in place.\n *\n * This is necessary because the default behavior of .sort\n * in JavaScript is to sort arrays as string values\n *\n *     [1, 10, 12, 102, 20].sort()\n *     // output\n *     [1, 10, 102, 12, 20]\n *\n * @param {Array<number>} x input array\n * @return {Array<number>} sorted array\n * @private\n * @example\n * numericSort([3, 2, 1]) // => [1, 2, 3]\n */\nfunction numericSort(x) {\n    return (\n        x\n            // ensure the array is not changed in-place\n            .slice()\n            // comparator function that treats input as numeric\n            .sort(function (a, b) {\n                return a - b;\n            })\n    );\n}\n\nexport default numericSort;\n","/**\n * The min is the lowest number in the array.\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} minimum value\n * @example\n * min([1, 5, -10, 100, 2]); // => -10\n */\nfunction min(x) {\n    if (x.length === 0) {\n        throw new Error(\"min requires at least one data point\");\n    }\n\n    let value = x[0];\n    for (let i = 1; i < x.length; i++) {\n        if (x[i] < value) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\nexport default min;\n","/**\n * This computes the maximum number in an array.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} maximum value\n * @throws {Error} if the length of x is less than one\n * @example\n * max([1, 2, 3, 4]);\n * // => 4\n */\nfunction max(x) {\n    if (x.length === 0) {\n        throw new Error(\"max requires at least one data point\");\n    }\n\n    let value = x[0];\n    for (let i = 1; i < x.length; i++) {\n        if (x[i] > value) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\nexport default max;\n","/**\n * The simple [sum](https://en.wikipedia.org/wiki/Summation) of an array\n * is the result of adding all numbers together, starting from zero.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sumSimple([1, 2, 3]); // => 6\n */\nfunction sumSimple(x) {\n    let value = 0;\n    for (let i = 0; i < x.length; i++) {\n        value += x[i];\n    }\n    return value;\n}\n\nexport default sumSimple;\n","/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} x sample of one or more data points\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @throws {Error} if p ix outside of the range from 0 to 1\n * @throws {Error} if x is empty\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantileSorted(x, p) {\n    const idx = x.length * p;\n    if (x.length === 0) {\n        throw new Error(\"quantile requires at least one data point.\");\n    } else if (p < 0 || p > 1) {\n        throw new Error(\"quantiles must be between 0 and 1\");\n    } else if (p === 1) {\n        // If p is 1, directly return the last element\n        return x[x.length - 1];\n    } else if (p === 0) {\n        // If p is 0, directly return the first element\n        return x[0];\n    } else if (idx % 1 !== 0) {\n        // If p is not integer, return the next element in array\n        return x[Math.ceil(idx) - 1];\n    } else if (x.length % 2 === 0) {\n        // If the list has even-length, we'll take the average of this number\n        // and the next value, if there is one\n        return (x[idx - 1] + x[idx]) / 2;\n    } else {\n        // Finally, in the simple case of an integer value\n        // with an odd-length list, return the x value at the index.\n        return x[idx];\n    }\n}\n\nexport default quantileSorted;\n","/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} [left] left index\n * @param {number} [right] right index\n * @returns {void} mutates input array\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nfunction quickselect(arr, k, left, right) {\n    left = left || 0;\n    right = right || arr.length - 1;\n\n    while (right > left) {\n        // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp((2 * z) / 3);\n            let sd = 0.5 * Math.sqrt((z * s * (n - s)) / n);\n            if (m - n / 2 < 0) sd *= -1;\n            const newLeft = Math.max(left, Math.floor(k - (m * s) / n + sd));\n            const newRight = Math.min(\n                right,\n                Math.floor(k + ((n - m) * s) / n + sd)\n            );\n            quickselect(arr, k, newLeft, newRight);\n        }\n\n        const t = arr[k];\n        let i = left;\n        let j = right;\n\n        swap(arr, left, k);\n        if (arr[right] > t) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (arr[i] < t) i++;\n            while (arr[j] > t) j--;\n        }\n\n        if (arr[left] === t) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nexport default quickselect;\n","import quantileSorted from \"./quantile_sorted\";\nimport quickselect from \"./quickselect\";\n\n/**\n * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n * this is a population quantile, since we assume to know the entire\n * dataset in this library. This is an implementation of the\n * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n * algorithm from wikipedia.\n *\n * Sample is a one-dimensional array of numbers,\n * and p is either a decimal number from 0 to 1 or an array of decimal\n * numbers from 0 to 1.\n * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n * with decimal values.\n * When p is an array, the result of the function is also an array containing the appropriate\n * quantiles in input order\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {Array<number> | number} p the desired quantile, as a number between 0 and 1\n * @returns {number} quantile\n * @example\n * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantile(x, p) {\n    const copy = x.slice();\n\n    if (Array.isArray(p)) {\n        // rearrange elements so that each element corresponding to a requested\n        // quantile is on a place it would be if the array was fully sorted\n        multiQuantileSelect(copy, p);\n        // Initialize the result array\n        const results = [];\n        // For each requested quantile\n        for (let i = 0; i < p.length; i++) {\n            results[i] = quantileSorted(copy, p[i]);\n        }\n        return results;\n    } else {\n        const idx = quantileIndex(copy.length, p);\n        quantileSelect(copy, idx, 0, copy.length - 1);\n        return quantileSorted(copy, p);\n    }\n}\n\nfunction quantileSelect(arr, k, left, right) {\n    if (k % 1 === 0) {\n        quickselect(arr, k, left, right);\n    } else {\n        k = Math.floor(k);\n        quickselect(arr, k, left, right);\n        quickselect(arr, k + 1, k + 1, right);\n    }\n}\n\nfunction multiQuantileSelect(arr, p) {\n    const indices = [0];\n    for (let i = 0; i < p.length; i++) {\n        indices.push(quantileIndex(arr.length, p[i]));\n    }\n    indices.push(arr.length - 1);\n    indices.sort(compare);\n\n    const stack = [0, indices.length - 1];\n\n    while (stack.length) {\n        const r = Math.ceil(stack.pop());\n        const l = Math.floor(stack.pop());\n        if (r - l <= 1) continue;\n\n        const m = Math.floor((l + r) / 2);\n        quantileSelect(\n            arr,\n            indices[m],\n            Math.floor(indices[l]),\n            Math.ceil(indices[r])\n        );\n\n        stack.push(l, m, m, r);\n    }\n}\n\nfunction compare(a, b) {\n    return a - b;\n}\n\nfunction quantileIndex(len, p) {\n    const idx = len * p;\n    if (p === 1) {\n        // If p is 1, directly return the last index\n        return len - 1;\n    } else if (p === 0) {\n        // If p is 0, directly return the first index\n        return 0;\n    } else if (idx % 1 !== 0) {\n        // If index is not integer, return the next index in array\n        return Math.ceil(idx) - 1;\n    } else if (len % 2 === 0) {\n        // If the list has even-length, we'll return the middle of two indices\n        // around quantile to indicate that we need an average value of the two\n        return idx - 0.5;\n    } else {\n        // Finally, in the simple case of an integer index\n        // with an odd-length list, return the index\n        return idx;\n    }\n}\n\nexport default quantile;\n","/* eslint no-bitwise: 0 */\n\n/**\n * This function returns the quantile in which one would find the given value in\n * the given array. With a sorted array, leveraging binary search, we can find\n * this information in logarithmic time.\n *\n * @param {Array<number>} x input\n * @returns {number} value value\n * @example\n * quantileRankSorted([1, 2, 3, 4], 3); // => 0.75\n * quantileRankSorted([1, 2, 3, 3, 4], 3); // => 0.7\n * quantileRankSorted([1, 2, 3, 4], 6); // => 1\n * quantileRankSorted([1, 2, 3, 3, 5], 4); // => 0.8\n */\nfunction quantileRankSorted(x, value) {\n    // Value is lesser than any value in the array\n    if (value < x[0]) {\n        return 0;\n    }\n\n    // Value is greater than any value in the array\n    if (value > x[x.length - 1]) {\n        return 1;\n    }\n\n    let l = lowerBound(x, value);\n\n    // Value is not in the array\n    if (x[l] !== value) {\n        return l / x.length;\n    }\n\n    l++;\n\n    const u = upperBound(x, value);\n\n    // The value exists only once in the array\n    if (u === l) {\n        return l / x.length;\n    }\n\n    // Here, we are basically computing the mean of the range of indices\n    // containing our searched value. But, instead, of initializing an\n    // array and looping over it, there is a dedicated math formula that\n    // we apply below to get the result.\n    const r = u - l + 1;\n    const sum = (r * (u + l)) / 2;\n    const mean = sum / r;\n\n    return mean / x.length;\n}\n\nfunction lowerBound(x, value) {\n    let mid = 0;\n    let lo = 0;\n    let hi = x.length;\n\n    while (lo < hi) {\n        mid = (lo + hi) >>> 1;\n\n        if (value <= x[mid]) {\n            hi = mid;\n        } else {\n            lo = -~mid;\n        }\n    }\n\n    return lo;\n}\n\nfunction upperBound(x, value) {\n    let mid = 0;\n    let lo = 0;\n    let hi = x.length;\n\n    while (lo < hi) {\n        mid = (lo + hi) >>> 1;\n\n        if (value >= x[mid]) {\n            lo = -~mid;\n        } else {\n            hi = mid;\n        }\n    }\n\n    return lo;\n}\n\nexport default quantileRankSorted;\n","import quantile from \"./quantile\";\n\n/**\n * The [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range) is\n * a measure of statistical dispersion, or how scattered, spread, or\n * concentrated a distribution is. It's computed as the difference between\n * the third quartile and first quartile.\n *\n * @param {Array<number>} x sample of one or more numbers\n * @returns {number} interquartile range: the span between lower and upper quartile,\n * 0.25 and 0.75\n * @example\n * interquartileRange([0, 1, 2, 3]); // => 2\n */\nfunction interquartileRange(x) {\n    // Interquartile range is the span between the upper quartile,\n    // at `0.75`, and lower quartile, `0.25`\n    const q1 = quantile(x, 0.75);\n    const q2 = quantile(x, 0.25);\n\n    if (typeof q1 === \"number\" && typeof q2 === \"number\") {\n        return q1 - q2;\n    }\n}\n\nexport default interquartileRange;\n","import quantile from \"./quantile\";\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of 'the middle'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn't necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} x input\n * @returns {number} median value\n * @example\n * median([10, 2, 5, 100, 2, 1]); // => 3.5\n */\nfunction median(x) {\n    return +quantile(x, 0.5);\n}\n\nexport default median;\n","import median from \"./median\";\n\n/**\n * The [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation) is\n * a robust measure of statistical\n * dispersion. It is more resilient to outliers than the standard deviation.\n *\n * @param {Array<number>} x input array\n * @returns {number} median absolute deviation\n * @example\n * medianAbsoluteDeviation([1, 1, 2, 2, 4, 6, 9]); // => 1\n */\nfunction medianAbsoluteDeviation(x) {\n    const medianValue = median(x);\n    const medianAbsoluteDeviations = [];\n\n    // Make a list of absolute deviations from the median\n    for (let i = 0; i < x.length; i++) {\n        medianAbsoluteDeviations.push(Math.abs(x[i] - medianValue));\n    }\n\n    // Find the median value of that list\n    return median(medianAbsoluteDeviations);\n}\n\nexport default medianAbsoluteDeviation;\n","/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * in-place - which means that it **will change the order of the original\n * array by reference**.\n *\n * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)\n * of a set.\n *\n * @param {Array} x sample of one or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @returns {Array} x\n * @example\n * var x = [1, 2, 3, 4];\n * shuffleInPlace(x);\n * // x is shuffled to a value like [2, 1, 4, 3]\n */\nfunction shuffleInPlace(x, randomSource) {\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    // store the current length of the x to determine\n    // when no elements remain to shuffle.\n    let length = x.length;\n\n    // temporary is used to hold an item when it is being\n    // swapped between indices.\n    let temporary;\n\n    // The index to swap at each stage.\n    let index;\n\n    // While there are still items to shuffle\n    while (length > 0) {\n        // choose a random index within the subset of the array\n        // that is not yet shuffled\n        index = Math.floor(randomSource() * length--);\n\n        // store the value that we'll move temporarily\n        temporary = x[length];\n\n        // swap the value at `x[length]` with `x[index]`\n        x[length] = x[index];\n        x[index] = temporary;\n    }\n\n    return x;\n}\n\nexport default shuffleInPlace;\n","import shuffleInPlace from \"./shuffle_in_place\";\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * is a fast way to create a random permutation of a finite set. This is\n * a function around `shuffle_in_place` that adds the guarantee that\n * it will not modify its input.\n *\n * @param {Array} x sample of 0 or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} shuffled version of input\n * @example\n * var shuffled = shuffle([1, 2, 3, 4]);\n * shuffled; // = [2, 3, 1, 4] or any other random permutation\n */\nfunction shuffle(x, randomSource) {\n    // slice the original array so that it is not modified\n    const sample = x.slice();\n\n    // and then shuffle that shallow-copied array, in place\n    return shuffleInPlace(sample, randomSource);\n}\n\nexport default shuffle;\n","import shuffle from \"./shuffle\";\n\n/**\n * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)\n * from a given array of `n` elements.\n *\n * The sampled values will be in any order, not necessarily the order\n * they appear in the input.\n *\n * @param {Array<any>} x input array. can contain any type\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} subset of n elements in original array\n *\n * @example\n * var values = [1, 2, 4, 5, 6, 7, 8, 9];\n * sample(values, 3); // returns 3 random values, like [2, 5, 8];\n */\nfunction sample(x, n, randomSource) {\n    // shuffle the original array using a fisher-yates shuffle\n    const shuffled = shuffle(x, randomSource);\n\n    // and then return a subset of it - the first `n` elements.\n    return shuffled.slice(0, n);\n}\n\nexport default sample;\n","/**\n * Create a new column x row matrix.\n *\n * @private\n * @param {number} columns\n * @param {number} rows\n * @return {Array<Array<number>>} matrix\n * @example\n * makeMatrix(10, 10);\n */\nfunction makeMatrix(columns, rows) {\n    const matrix = [];\n    for (let i = 0; i < columns; i++) {\n        const column = [];\n        for (let j = 0; j < rows; j++) {\n            column.push(0);\n        }\n        matrix.push(column);\n    }\n    return matrix;\n}\n\nexport default makeMatrix;\n","/**\n * For a sorted input, counting the number of unique values\n * is possible in constant time and constant memory. This is\n * a simple implementation of the algorithm.\n *\n * Values are compared with `===`, so objects and non-primitive objects\n * are not handled in any special way.\n *\n * @param {Array<*>} x an array of any kind of value\n * @returns {number} count of unique values\n * @example\n * uniqueCountSorted([1, 2, 3]); // => 3\n * uniqueCountSorted([1, 1, 1]); // => 1\n */\nfunction uniqueCountSorted(x) {\n    let uniqueValueCount = 0,\n        lastSeenValue;\n    for (let i = 0; i < x.length; i++) {\n        if (i === 0 || x[i] !== lastSeenValue) {\n            lastSeenValue = x[i];\n            uniqueValueCount++;\n        }\n    }\n    return uniqueValueCount;\n}\n\nexport default uniqueCountSorted;\n","import makeMatrix from \"./make_matrix\";\nimport numericSort from \"./numeric_sort\";\nimport uniqueCountSorted from \"./unique_count_sorted\";\n\n/**\n * Generates incrementally computed values based on the sums and sums of\n * squares for the data array\n *\n * @private\n * @param {number} j\n * @param {number} i\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n * @return {number}\n * @example\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\n */\nfunction ssq(j, i, sums, sumsOfSquares) {\n    let sji; // s(j, i)\n    if (j > 0) {\n        const muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\n        sji =\n            sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\n    } else {\n        sji = sumsOfSquares[i] - (sums[i] * sums[i]) / (i + 1);\n    }\n    if (sji < 0) {\n        return 0;\n    }\n    return sji;\n}\n\n/**\n * Function that recursively divides and conquers computations\n * for cluster j\n *\n * @private\n * @param {number} iMin Minimum index in cluster to be computed\n * @param {number} iMax Maximum index in cluster to be computed\n * @param {number} cluster Index of the cluster currently being computed\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n */\nfunction fillMatrixColumn(\n    iMin,\n    iMax,\n    cluster,\n    matrix,\n    backtrackMatrix,\n    sums,\n    sumsOfSquares\n) {\n    if (iMin > iMax) {\n        return;\n    }\n\n    // Start at midpoint between iMin and iMax\n    const i = Math.floor((iMin + iMax) / 2);\n\n    matrix[cluster][i] = matrix[cluster - 1][i - 1];\n    backtrackMatrix[cluster][i] = i;\n\n    let jlow = cluster; // the lower end for j\n\n    if (iMin > cluster) {\n        jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\n    }\n    jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\n\n    let jhigh = i - 1; // the upper end for j\n    if (iMax < matrix[0].length - 1) {\n        jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\n    }\n\n    let sji;\n    let sjlowi;\n    let ssqjlow;\n    let ssqj;\n    for (let j = jhigh; j >= jlow; --j) {\n        sji = ssq(j, i, sums, sumsOfSquares);\n\n        if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\n            break;\n        }\n\n        // Examine the lower bound of the cluster border\n        sjlowi = ssq(jlow, i, sums, sumsOfSquares);\n\n        ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\n\n        if (ssqjlow < matrix[cluster][i]) {\n            // Shrink the lower bound\n            matrix[cluster][i] = ssqjlow;\n            backtrackMatrix[cluster][i] = jlow;\n        }\n        jlow++;\n\n        ssqj = sji + matrix[cluster - 1][j - 1];\n        if (ssqj < matrix[cluster][i]) {\n            matrix[cluster][i] = ssqj;\n            backtrackMatrix[cluster][i] = j;\n        }\n    }\n\n    fillMatrixColumn(\n        iMin,\n        i - 1,\n        cluster,\n        matrix,\n        backtrackMatrix,\n        sums,\n        sumsOfSquares\n    );\n    fillMatrixColumn(\n        i + 1,\n        iMax,\n        cluster,\n        matrix,\n        backtrackMatrix,\n        sums,\n        sumsOfSquares\n    );\n}\n\n/**\n * Initializes the main matrices used in Ckmeans and kicks\n * off the divide and conquer cluster computation strategy\n *\n * @private\n * @param {Array<number>} data sorted array of values\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n */\nfunction fillMatrices(data, matrix, backtrackMatrix) {\n    const nValues = matrix[0].length;\n\n    // Shift values by the median to improve numeric stability\n    const shift = data[Math.floor(nValues / 2)];\n\n    // Cumulative sum and cumulative sum of squares for all values in data array\n    const sums = [];\n    const sumsOfSquares = [];\n\n    // Initialize first column in matrix & backtrackMatrix\n    for (let i = 0, shiftedValue; i < nValues; ++i) {\n        shiftedValue = data[i] - shift;\n        if (i === 0) {\n            sums.push(shiftedValue);\n            sumsOfSquares.push(shiftedValue * shiftedValue);\n        } else {\n            sums.push(sums[i - 1] + shiftedValue);\n            sumsOfSquares.push(\n                sumsOfSquares[i - 1] + shiftedValue * shiftedValue\n            );\n        }\n\n        // Initialize for cluster = 0\n        matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\n        backtrackMatrix[0][i] = 0;\n    }\n\n    // Initialize the rest of the columns\n    let iMin;\n    for (let cluster = 1; cluster < matrix.length; ++cluster) {\n        if (cluster < matrix.length - 1) {\n            iMin = cluster;\n        } else {\n            // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\n            iMin = nValues - 1;\n        }\n\n        fillMatrixColumn(\n            iMin,\n            nValues - 1,\n            cluster,\n            matrix,\n            backtrackMatrix,\n            sums,\n            sumsOfSquares\n        );\n    }\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like Jenks. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} x input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @throws {Error} if the number of requested clusters is higher than the size of the data\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nfunction ckmeans(x, nClusters) {\n    if (nClusters > x.length) {\n        throw new Error(\n            \"cannot generate more classes than there are data values\"\n        );\n    }\n\n    const sorted = numericSort(x);\n    // we'll use this as the maximum number of clusters\n    const uniqueCount = uniqueCountSorted(sorted);\n\n    // if all of the input values are identical, there's one cluster\n    // with all of the input in it.\n    if (uniqueCount === 1) {\n        return [sorted];\n    }\n\n    // named 'S' originally\n    const matrix = makeMatrix(nClusters, sorted.length);\n    // named 'J' originally\n    const backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n    // This is a dynamic programming way to solve the problem of minimizing\n    // within-cluster sum of squares. It's similar to linear regression\n    // in this way, and this calculation incrementally computes the\n    // sum of squares that are later read.\n    fillMatrices(sorted, matrix, backtrackMatrix);\n\n    // The real work of Ckmeans clustering happens in the matrix generation:\n    // the generated matrices encode all possible clustering combinations, and\n    // once they're generated we can solve for the best clustering groups\n    // very quickly.\n    const clusters = [];\n    let clusterRight = backtrackMatrix[0].length - 1;\n\n    // Backtrack the clusters from the dynamic programming matrix. This\n    // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n    // and moves the cluster target with the loop.\n    for (let cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n        const clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n        // fill the cluster from the sorted input by taking a slice of the\n        // array. the backtrack matrix makes this easy - it stores the\n        // indexes where the cluster should start and end.\n        clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n        if (cluster > 0) {\n            clusterRight = clusterLeft - 1;\n        }\n    }\n\n    return clusters;\n}\n\nexport default ckmeans;\n","import mean from \"./mean\";\n\n/**\n * [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_covariance) of two datasets:\n * how much do the two datasets move together?\n * x and y are two datasets, represented as arrays of numbers.\n *\n * @param {Array<number>} x a sample of two or more data points\n * @param {Array<number>} y a sample of two or more data points\n * @throws {Error} if x and y do not have equal lengths\n * @throws {Error} if x or y have length of one or less\n * @returns {number} sample covariance\n * @example\n * sampleCovariance([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]); // => -3.5\n */\nfunction sampleCovariance(x, y) {\n    // The two datasets must have the same length which must be more than 1\n    if (x.length !== y.length) {\n        throw new Error(\"sampleCovariance requires samples with equal lengths\");\n    }\n\n    if (x.length < 2) {\n        throw new Error(\n            \"sampleCovariance requires at least two data points in each sample\"\n        );\n    }\n\n    // determine the mean of each dataset so that we can judge each\n    // value of the dataset fairly as the difference from the mean. this\n    // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance\n    // does not suffer because of the difference in absolute values\n    const xmean = mean(x);\n    const ymean = mean(y);\n    let sum = 0;\n\n    // for each pair of values, the covariance increases when their\n    // difference from the mean is associated - if both are well above\n    // or if both are well below\n    // the mean, the covariance increases significantly.\n    for (let i = 0; i < x.length; i++) {\n        sum += (x[i] - xmean) * (y[i] - ymean);\n    }\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    const besselsCorrection = x.length - 1;\n\n    // the covariance is weighted by the length of the datasets.\n    return sum / besselsCorrection;\n}\n\nexport default sampleCovariance;\n","import sumNthPowerDeviations from \"./sum_nth_power_deviations\";\n\n/**\n * The [sample variance](https://en.wikipedia.org/wiki/Variance#Sample_variance)\n * is the sum of squared deviations from the mean. The sample variance\n * is distinguished from the variance by the usage of [Bessel's Correction](https://en.wikipedia.org/wiki/Bessel's_correction):\n * instead of dividing the sum of squared deviations by the length of the input,\n * it is divided by the length minus one. This corrects the bias in estimating\n * a value from a set that you don't know if full.\n *\n * References:\n * * [Wolfram MathWorld on Sample Variance](http://mathworld.wolfram.com/SampleVariance.html)\n *\n * @param {Array<number>} x a sample of two or more data points\n * @throws {Error} if the length of x is less than 2\n * @return {number} sample variance\n * @example\n * sampleVariance([1, 2, 3, 4, 5]); // => 2.5\n */\nfunction sampleVariance(x) {\n    if (x.length < 2) {\n        throw new Error(\"sampleVariance requires at least two data points\");\n    }\n\n    const sumSquaredDeviationsValue = sumNthPowerDeviations(x, 2);\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    const besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    return sumSquaredDeviationsValue / besselsCorrection;\n}\n\nexport default sampleVariance;\n","import sampleVariance from \"./sample_variance\";\n\n/**\n * The [sample standard deviation](http://en.wikipedia.org/wiki/Standard_deviation#Sample_standard_deviation)\n * is the square root of the sample variance.\n *\n * @param {Array<number>} x input array\n * @returns {number} sample standard deviation\n * @example\n * sampleStandardDeviation([2, 4, 4, 4, 5, 5, 7, 9]).toFixed(2);\n * // => '2.14'\n */\nfunction sampleStandardDeviation(x) {\n    const sampleVarianceX = sampleVariance(x);\n    return Math.sqrt(sampleVarianceX);\n}\n\nexport default sampleStandardDeviation;\n","import sampleCovariance from \"./sample_covariance\";\nimport sampleStandardDeviation from \"./sample_standard_deviation\";\n\n/**\n * The [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence) is\n * a measure of how correlated two datasets are, between -1 and 1\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample correlation\n * @example\n * sampleCorrelation([1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5, 60]).toFixed(2);\n * // => '0.69'\n */\nfunction sampleCorrelation(x, y) {\n    const cov = sampleCovariance(x, y);\n    const xstd = sampleStandardDeviation(x);\n    const ystd = sampleStandardDeviation(y);\n\n    return cov / xstd / ystd;\n}\n\nexport default sampleCorrelation;\n","/**\n * When combining two lists of values for which one already knows the means,\n * one does not have to necessary recompute the mean of the combined lists in\n * linear time. They can instead use this function to compute the combined\n * mean by providing the mean & number of values of the first list and the mean\n * & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineMeans(5, 3, 4, 3); // => 4.5\n */\nfunction combineMeans(mean1, n1, mean2, n2) {\n    return (mean1 * n1 + mean2 * n2) / (n1 + n2);\n}\n\nexport default combineMeans;\n","import sumSimple from \"./sum_simple\";\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The simple mean uses the successive addition method internally\n * to calculate it's result. Errors in floating-point addition are\n * not accounted for, so if precision is required, the standard {@link mean}\n * method should be used instead.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\nfunction meanSimple(x) {\n    if (x.length === 0) {\n        throw new Error(\"meanSimple requires at least one data point\");\n    }\n\n    return sumSimple(x) / x.length;\n}\n\nexport default meanSimple;\n","/**\n * The Root Mean Square (RMS) is\n * a mean function used as a measure of the magnitude of a set\n * of numbers, regardless of their sign.\n * This is the square root of the mean of the squares of the\n * input numbers.\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x a sample of one or more data points\n * @returns {number} root mean square\n * @throws {Error} if x is empty\n * @example\n * rootMeanSquare([-1, 1, -1, 1]); // => 1\n */\nfunction rootMeanSquare(x) {\n    if (x.length === 0) {\n        throw new Error(\"rootMeanSquare requires at least one data point\");\n    }\n\n    let sumOfSquares = 0;\n    for (let i = 0; i < x.length; i++) {\n        sumOfSquares += Math.pow(x[i], 2);\n    }\n\n    return Math.sqrt(sumOfSquares / x.length);\n}\n\nexport default rootMeanSquare;\n","/**\n * [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)\n *\n * This is a naïve bayesian classifier that takes\n * singly-nested objects.\n *\n * @class\n * @example\n * var bayes = new BayesianClassifier();\n * bayes.train({\n *   species: 'Cat'\n * }, 'animal');\n * var result = bayes.score({\n *   species: 'Cat'\n * })\n * // result\n * // {\n * //   animal: 1\n * // }\n */\nclass BayesianClassifier {\n    /*:: totalCount: number */\n    /*:: data: Object */\n    constructor() {\n        // The number of items that are currently\n        // classified in the model\n        this.totalCount = 0;\n        // Every item classified in the model\n        this.data = {};\n    }\n\n    /**\n     * Train the classifier with a new item, which has a single\n     * dimension of Javascript literal keys and values.\n     *\n     * @param {Object} item an object with singly-deep properties\n     * @param {string} category the category this item belongs to\n     * @return {undefined} adds the item to the classifier\n     */\n    train(item, category) {\n        // If the data object doesn't have any values\n        // for this category, create a new object for it.\n        if (!this.data[category]) {\n            this.data[category] = {};\n        }\n\n        // Iterate through each key in the item.\n        for (const k in item) {\n            const v = item[k];\n            // Initialize the nested object `data[category][k][item[k]]`\n            // with an object of keys that equal 0.\n            if (this.data[category][k] === undefined) {\n                this.data[category][k] = {};\n            }\n            if (this.data[category][k][v] === undefined) {\n                this.data[category][k][v] = 0;\n            }\n\n            // And increment the key for this key/value combination.\n            this.data[category][k][v]++;\n        }\n\n        // Increment the number of items classified\n        this.totalCount++;\n    }\n\n    /**\n     * Generate a score of how well this item matches all\n     * possible categories based on its attributes\n     *\n     * @param {Object} item an item in the same format as with train\n     * @returns {Object} of probabilities that this item belongs to a\n     * given category.\n     */\n    score(item) {\n        // Initialize an empty array of odds per category.\n        const odds = {};\n        let category;\n        // Iterate through each key in the item,\n        // then iterate through each category that has been used\n        // in previous calls to `.train()`\n        for (const k in item) {\n            const v = item[k];\n            for (category in this.data) {\n                // Create an empty object for storing key - value combinations\n                // for this category.\n                odds[category] = {};\n\n                // If this item doesn't even have a property, it counts for nothing,\n                // but if it does have the property that we're looking for from\n                // the item to categorize, it counts based on how popular it is\n                // versus the whole population.\n                if (this.data[category][k]) {\n                    odds[category][k + \"_\" + v] =\n                        (this.data[category][k][v] || 0) / this.totalCount;\n                } else {\n                    odds[category][k + \"_\" + v] = 0;\n                }\n            }\n        }\n\n        // Set up a new object that will contain sums of these odds by category\n        const oddsSums = {};\n\n        for (category in odds) {\n            // Tally all of the odds for each category-combination pair -\n            // the non-existence of a category does not add anything to the\n            // score.\n            oddsSums[category] = 0;\n            for (const combination in odds[category]) {\n                oddsSums[category] += odds[category][combination];\n            }\n        }\n\n        return oddsSums;\n    }\n}\n\nexport default BayesianClassifier;\n","/**\n * This is a single-layer [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron) that takes\n * arrays of numbers and predicts whether they should be classified\n * as either 0 or 1 (negative or positive examples).\n * @class\n * @example\n * // Create the model\n * var p = new PerceptronModel();\n * // Train the model with input with a diagonal boundary.\n * for (var i = 0; i < 5; i++) {\n *     p.train([1, 1], 1);\n *     p.train([0, 1], 0);\n *     p.train([1, 0], 0);\n *     p.train([0, 0], 0);\n * }\n * p.predict([0, 0]); // 0\n * p.predict([0, 1]); // 0\n * p.predict([1, 0]); // 0\n * p.predict([1, 1]); // 1\n */\nclass PerceptronModel {\n    /*:: bias: number */\n    /*:: weights: Array<number> */\n    constructor() {\n        // The weights, or coefficients of the model;\n        // weights are only populated when training with data.\n        this.weights = [];\n        // The bias term, or intercept; it is also a weight but\n        // it's stored separately for convenience as it is always\n        // multiplied by one.\n        this.bias = 0;\n    }\n    /**\n     * **Predict**: Use an array of features with the weight array and bias\n     * to predict whether an example is labeled 0 or 1.\n     *\n     * @param {Array<number>} features an array of features as numbers\n     * @returns {number} 1 if the score is over 0, otherwise 0\n     */\n    predict(features) {\n        // Only predict if previously trained\n        // on the same size feature array(s).\n        if (features.length !== this.weights.length) {\n            return null;\n        }\n\n        // Calculate the sum of features times weights,\n        // with the bias added (implicitly times one).\n        let score = 0;\n        for (let i = 0; i < this.weights.length; i++) {\n            score += this.weights[i] * features[i];\n        }\n        score += this.bias;\n\n        // Classify as 1 if the score is over 0, otherwise 0.\n        if (score > 0) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * **Train** the classifier with a new example, which is\n     * a numeric array of features and a 0 or 1 label.\n     *\n     * @param {Array<number>} features an array of features as numbers\n     * @param {number} label either 0 or 1\n     * @returns {PerceptronModel} this\n     */\n    train(features, label) {\n        // Require that only labels of 0 or 1 are considered.\n        if (label !== 0 && label !== 1) {\n            return null;\n        }\n        // The length of the feature array determines\n        // the length of the weight array.\n        // The perceptron will continue learning as long as\n        // it keeps seeing feature arrays of the same length.\n        // When it sees a new data shape, it initializes.\n        if (features.length !== this.weights.length) {\n            this.weights = features;\n            this.bias = 1;\n        }\n        // Make a prediction based on current weights.\n        const prediction = this.predict(features);\n        // Update the weights if the prediction is wrong.\n        if (typeof prediction === \"number\" && prediction !== label) {\n            const gradient = label - prediction;\n            for (let i = 0; i < this.weights.length; i++) {\n                this.weights[i] += gradient * features[i];\n            }\n            this.bias += gradient;\n        }\n        return this;\n    }\n}\n\nexport default PerceptronModel;\n","/**\n * We use `ε`, epsilon, as a stopping criterion when we want to iterate\n * until we're \"close enough\". Epsilon is a very small number: for\n * simple statistics, that number is **0.0001**\n *\n * This is used in calculations like the binomialDistribution, in which\n * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):\n * it progresses until it is close enough.\n *\n * Below is an example of using epsilon in [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent),\n * where we're trying to find a local minimum of a function's derivative,\n * given by the `fDerivative` method.\n *\n * @example\n * // From calculation, we expect that the local minimum occurs at x=9/4\n * var x_old = 0;\n * // The algorithm starts at x=6\n * var x_new = 6;\n * var stepSize = 0.01;\n *\n * function fDerivative(x) {\n *   return 4 * Math.pow(x, 3) - 9 * Math.pow(x, 2);\n * }\n *\n * // The loop runs until the difference between the previous\n * // value and the current value is smaller than epsilon - a rough\n * // meaure of 'close enough'\n * while (Math.abs(x_new - x_old) > ss.epsilon) {\n *   x_old = x_new;\n *   x_new = x_old - stepSize * fDerivative(x_old);\n * }\n *\n * console.log('Local minimum occurs at', x_new);\n */\nconst epsilon = 0.0001;\n\nexport default epsilon;\n","/**\n * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n * integers less than or equal to n. Often factorial is implemented\n * recursively, but this iterative approach is significantly faster\n * and simpler.\n *\n * @param {number} n input, must be an integer number 1 or greater\n * @returns {number} factorial: n!\n * @throws {Error} if n is less than 0 or not an integer\n * @example\n * factorial(5); // => 120\n */\nfunction factorial(n) {\n    // factorial is mathematically undefined for negative numbers\n    if (n < 0) {\n        throw new Error(\"factorial requires a non-negative value\");\n    }\n\n    if (Math.floor(n) !== n) {\n        throw new Error(\"factorial requires an integer input\");\n    }\n\n    // typically you'll expand the factorial function going down, like\n    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n    // counting from 2 up to the number in question, and since anything\n    // multiplied by 1 is itself, the loop only needs to start at 2.\n    let accumulator = 1;\n    for (let i = 2; i <= n; i++) {\n        // for each number up to and including the number `n`, multiply\n        // the accumulator my that number.\n        accumulator *= i;\n    }\n    return accumulator;\n}\n\nexport default factorial;\n","// Define series coefficients\nconst COEFFICIENTS = [\n    0.99999999999999709182,\n    57.156235665862923517,\n    -59.597960355475491248,\n    14.136097974741747174,\n    -0.49191381609762019978,\n    0.33994649984811888699e-4,\n    0.46523628927048575665e-4,\n    -0.98374475304879564677e-4,\n    0.15808870322491248884e-3,\n    -0.21026444172410488319e-3,\n    0.2174396181152126432e-3,\n    -0.16431810653676389022e-3,\n    0.84418223983852743293e-4,\n    -0.2619083840158140867e-4,\n    0.36899182659531622704e-5\n];\n\nconst g = 607 / 128;\nconst LOGSQRT2PI = Math.log(Math.sqrt(2 * Math.PI));\n\n/**\n * Compute the logarithm of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Lanczos' approximation.\n * This function takes as input any real-value n greater than 0.\n * This function is useful for values of n too large for the normal gamma function (n > 165).\n * The code is based on Lanczo's Gamma approximation, defined [here](http://my.fit.edu/~gabdo/gamma.txt).\n *\n * @param {number} n Any real number greater than zero.\n * @returns {number} The logarithm of gamma of the input value.\n *\n * @example\n * gammaln(500); // 2605.1158503617335\n * gammaln(2.4); // 0.21685932244884043\n */\nfunction gammaln(n) {\n    // Return infinity if value not in domain\n    if (n <= 0) {\n        return Infinity;\n    }\n\n    // Decrement n, because approximation is defined for n - 1\n    n--;\n\n    // Create series approximation\n    let a = COEFFICIENTS[0];\n\n    for (let i = 1; i < 15; i++) {\n        a += COEFFICIENTS[i] / (n + i);\n    }\n\n    const tmp = g + 0.5 + n;\n\n    // Return natural logarithm of gamma(n)\n    return LOGSQRT2PI + Math.log(a) - tmp + (n + 0.5) * Math.log(tmp);\n}\n\nexport default gammaln;\n","/**\n * **Percentage Points of the χ2 (Chi-Squared) Distribution**\n *\n * The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common\n * chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two\n * criteria of classification of qualitative data, and in confidence interval estimation for a population standard\n * deviation of a normal distribution from a sample standard deviation.\n *\n * Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, \"Probability and Statistics in\n * Engineering and Management Science\", Wiley (1980).\n */\nconst chiSquaredDistributionTable = {\n    1: {\n        0.995: 0,\n        0.99: 0,\n        0.975: 0,\n        0.95: 0,\n        0.9: 0.02,\n        0.5: 0.45,\n        0.1: 2.71,\n        0.05: 3.84,\n        0.025: 5.02,\n        0.01: 6.63,\n        0.005: 7.88\n    },\n    2: {\n        0.995: 0.01,\n        0.99: 0.02,\n        0.975: 0.05,\n        0.95: 0.1,\n        0.9: 0.21,\n        0.5: 1.39,\n        0.1: 4.61,\n        0.05: 5.99,\n        0.025: 7.38,\n        0.01: 9.21,\n        0.005: 10.6\n    },\n    3: {\n        0.995: 0.07,\n        0.99: 0.11,\n        0.975: 0.22,\n        0.95: 0.35,\n        0.9: 0.58,\n        0.5: 2.37,\n        0.1: 6.25,\n        0.05: 7.81,\n        0.025: 9.35,\n        0.01: 11.34,\n        0.005: 12.84\n    },\n    4: {\n        0.995: 0.21,\n        0.99: 0.3,\n        0.975: 0.48,\n        0.95: 0.71,\n        0.9: 1.06,\n        0.5: 3.36,\n        0.1: 7.78,\n        0.05: 9.49,\n        0.025: 11.14,\n        0.01: 13.28,\n        0.005: 14.86\n    },\n    5: {\n        0.995: 0.41,\n        0.99: 0.55,\n        0.975: 0.83,\n        0.95: 1.15,\n        0.9: 1.61,\n        0.5: 4.35,\n        0.1: 9.24,\n        0.05: 11.07,\n        0.025: 12.83,\n        0.01: 15.09,\n        0.005: 16.75\n    },\n    6: {\n        0.995: 0.68,\n        0.99: 0.87,\n        0.975: 1.24,\n        0.95: 1.64,\n        0.9: 2.2,\n        0.5: 5.35,\n        0.1: 10.65,\n        0.05: 12.59,\n        0.025: 14.45,\n        0.01: 16.81,\n        0.005: 18.55\n    },\n    7: {\n        0.995: 0.99,\n        0.99: 1.25,\n        0.975: 1.69,\n        0.95: 2.17,\n        0.9: 2.83,\n        0.5: 6.35,\n        0.1: 12.02,\n        0.05: 14.07,\n        0.025: 16.01,\n        0.01: 18.48,\n        0.005: 20.28\n    },\n    8: {\n        0.995: 1.34,\n        0.99: 1.65,\n        0.975: 2.18,\n        0.95: 2.73,\n        0.9: 3.49,\n        0.5: 7.34,\n        0.1: 13.36,\n        0.05: 15.51,\n        0.025: 17.53,\n        0.01: 20.09,\n        0.005: 21.96\n    },\n    9: {\n        0.995: 1.73,\n        0.99: 2.09,\n        0.975: 2.7,\n        0.95: 3.33,\n        0.9: 4.17,\n        0.5: 8.34,\n        0.1: 14.68,\n        0.05: 16.92,\n        0.025: 19.02,\n        0.01: 21.67,\n        0.005: 23.59\n    },\n    10: {\n        0.995: 2.16,\n        0.99: 2.56,\n        0.975: 3.25,\n        0.95: 3.94,\n        0.9: 4.87,\n        0.5: 9.34,\n        0.1: 15.99,\n        0.05: 18.31,\n        0.025: 20.48,\n        0.01: 23.21,\n        0.005: 25.19\n    },\n    11: {\n        0.995: 2.6,\n        0.99: 3.05,\n        0.975: 3.82,\n        0.95: 4.57,\n        0.9: 5.58,\n        0.5: 10.34,\n        0.1: 17.28,\n        0.05: 19.68,\n        0.025: 21.92,\n        0.01: 24.72,\n        0.005: 26.76\n    },\n    12: {\n        0.995: 3.07,\n        0.99: 3.57,\n        0.975: 4.4,\n        0.95: 5.23,\n        0.9: 6.3,\n        0.5: 11.34,\n        0.1: 18.55,\n        0.05: 21.03,\n        0.025: 23.34,\n        0.01: 26.22,\n        0.005: 28.3\n    },\n    13: {\n        0.995: 3.57,\n        0.99: 4.11,\n        0.975: 5.01,\n        0.95: 5.89,\n        0.9: 7.04,\n        0.5: 12.34,\n        0.1: 19.81,\n        0.05: 22.36,\n        0.025: 24.74,\n        0.01: 27.69,\n        0.005: 29.82\n    },\n    14: {\n        0.995: 4.07,\n        0.99: 4.66,\n        0.975: 5.63,\n        0.95: 6.57,\n        0.9: 7.79,\n        0.5: 13.34,\n        0.1: 21.06,\n        0.05: 23.68,\n        0.025: 26.12,\n        0.01: 29.14,\n        0.005: 31.32\n    },\n    15: {\n        0.995: 4.6,\n        0.99: 5.23,\n        0.975: 6.27,\n        0.95: 7.26,\n        0.9: 8.55,\n        0.5: 14.34,\n        0.1: 22.31,\n        0.05: 25,\n        0.025: 27.49,\n        0.01: 30.58,\n        0.005: 32.8\n    },\n    16: {\n        0.995: 5.14,\n        0.99: 5.81,\n        0.975: 6.91,\n        0.95: 7.96,\n        0.9: 9.31,\n        0.5: 15.34,\n        0.1: 23.54,\n        0.05: 26.3,\n        0.025: 28.85,\n        0.01: 32,\n        0.005: 34.27\n    },\n    17: {\n        0.995: 5.7,\n        0.99: 6.41,\n        0.975: 7.56,\n        0.95: 8.67,\n        0.9: 10.09,\n        0.5: 16.34,\n        0.1: 24.77,\n        0.05: 27.59,\n        0.025: 30.19,\n        0.01: 33.41,\n        0.005: 35.72\n    },\n    18: {\n        0.995: 6.26,\n        0.99: 7.01,\n        0.975: 8.23,\n        0.95: 9.39,\n        0.9: 10.87,\n        0.5: 17.34,\n        0.1: 25.99,\n        0.05: 28.87,\n        0.025: 31.53,\n        0.01: 34.81,\n        0.005: 37.16\n    },\n    19: {\n        0.995: 6.84,\n        0.99: 7.63,\n        0.975: 8.91,\n        0.95: 10.12,\n        0.9: 11.65,\n        0.5: 18.34,\n        0.1: 27.2,\n        0.05: 30.14,\n        0.025: 32.85,\n        0.01: 36.19,\n        0.005: 38.58\n    },\n    20: {\n        0.995: 7.43,\n        0.99: 8.26,\n        0.975: 9.59,\n        0.95: 10.85,\n        0.9: 12.44,\n        0.5: 19.34,\n        0.1: 28.41,\n        0.05: 31.41,\n        0.025: 34.17,\n        0.01: 37.57,\n        0.005: 40\n    },\n    21: {\n        0.995: 8.03,\n        0.99: 8.9,\n        0.975: 10.28,\n        0.95: 11.59,\n        0.9: 13.24,\n        0.5: 20.34,\n        0.1: 29.62,\n        0.05: 32.67,\n        0.025: 35.48,\n        0.01: 38.93,\n        0.005: 41.4\n    },\n    22: {\n        0.995: 8.64,\n        0.99: 9.54,\n        0.975: 10.98,\n        0.95: 12.34,\n        0.9: 14.04,\n        0.5: 21.34,\n        0.1: 30.81,\n        0.05: 33.92,\n        0.025: 36.78,\n        0.01: 40.29,\n        0.005: 42.8\n    },\n    23: {\n        0.995: 9.26,\n        0.99: 10.2,\n        0.975: 11.69,\n        0.95: 13.09,\n        0.9: 14.85,\n        0.5: 22.34,\n        0.1: 32.01,\n        0.05: 35.17,\n        0.025: 38.08,\n        0.01: 41.64,\n        0.005: 44.18\n    },\n    24: {\n        0.995: 9.89,\n        0.99: 10.86,\n        0.975: 12.4,\n        0.95: 13.85,\n        0.9: 15.66,\n        0.5: 23.34,\n        0.1: 33.2,\n        0.05: 36.42,\n        0.025: 39.36,\n        0.01: 42.98,\n        0.005: 45.56\n    },\n    25: {\n        0.995: 10.52,\n        0.99: 11.52,\n        0.975: 13.12,\n        0.95: 14.61,\n        0.9: 16.47,\n        0.5: 24.34,\n        0.1: 34.28,\n        0.05: 37.65,\n        0.025: 40.65,\n        0.01: 44.31,\n        0.005: 46.93\n    },\n    26: {\n        0.995: 11.16,\n        0.99: 12.2,\n        0.975: 13.84,\n        0.95: 15.38,\n        0.9: 17.29,\n        0.5: 25.34,\n        0.1: 35.56,\n        0.05: 38.89,\n        0.025: 41.92,\n        0.01: 45.64,\n        0.005: 48.29\n    },\n    27: {\n        0.995: 11.81,\n        0.99: 12.88,\n        0.975: 14.57,\n        0.95: 16.15,\n        0.9: 18.11,\n        0.5: 26.34,\n        0.1: 36.74,\n        0.05: 40.11,\n        0.025: 43.19,\n        0.01: 46.96,\n        0.005: 49.65\n    },\n    28: {\n        0.995: 12.46,\n        0.99: 13.57,\n        0.975: 15.31,\n        0.95: 16.93,\n        0.9: 18.94,\n        0.5: 27.34,\n        0.1: 37.92,\n        0.05: 41.34,\n        0.025: 44.46,\n        0.01: 48.28,\n        0.005: 50.99\n    },\n    29: {\n        0.995: 13.12,\n        0.99: 14.26,\n        0.975: 16.05,\n        0.95: 17.71,\n        0.9: 19.77,\n        0.5: 28.34,\n        0.1: 39.09,\n        0.05: 42.56,\n        0.025: 45.72,\n        0.01: 49.59,\n        0.005: 52.34\n    },\n    30: {\n        0.995: 13.79,\n        0.99: 14.95,\n        0.975: 16.79,\n        0.95: 18.49,\n        0.9: 20.6,\n        0.5: 29.34,\n        0.1: 40.26,\n        0.05: 43.77,\n        0.025: 46.98,\n        0.01: 50.89,\n        0.005: 53.67\n    },\n    40: {\n        0.995: 20.71,\n        0.99: 22.16,\n        0.975: 24.43,\n        0.95: 26.51,\n        0.9: 29.05,\n        0.5: 39.34,\n        0.1: 51.81,\n        0.05: 55.76,\n        0.025: 59.34,\n        0.01: 63.69,\n        0.005: 66.77\n    },\n    50: {\n        0.995: 27.99,\n        0.99: 29.71,\n        0.975: 32.36,\n        0.95: 34.76,\n        0.9: 37.69,\n        0.5: 49.33,\n        0.1: 63.17,\n        0.05: 67.5,\n        0.025: 71.42,\n        0.01: 76.15,\n        0.005: 79.49\n    },\n    60: {\n        0.995: 35.53,\n        0.99: 37.48,\n        0.975: 40.48,\n        0.95: 43.19,\n        0.9: 46.46,\n        0.5: 59.33,\n        0.1: 74.4,\n        0.05: 79.08,\n        0.025: 83.3,\n        0.01: 88.38,\n        0.005: 91.95\n    },\n    70: {\n        0.995: 43.28,\n        0.99: 45.44,\n        0.975: 48.76,\n        0.95: 51.74,\n        0.9: 55.33,\n        0.5: 69.33,\n        0.1: 85.53,\n        0.05: 90.53,\n        0.025: 95.02,\n        0.01: 100.42,\n        0.005: 104.22\n    },\n    80: {\n        0.995: 51.17,\n        0.99: 53.54,\n        0.975: 57.15,\n        0.95: 60.39,\n        0.9: 64.28,\n        0.5: 79.33,\n        0.1: 96.58,\n        0.05: 101.88,\n        0.025: 106.63,\n        0.01: 112.33,\n        0.005: 116.32\n    },\n    90: {\n        0.995: 59.2,\n        0.99: 61.75,\n        0.975: 65.65,\n        0.95: 69.13,\n        0.9: 73.29,\n        0.5: 89.33,\n        0.1: 107.57,\n        0.05: 113.14,\n        0.025: 118.14,\n        0.01: 124.12,\n        0.005: 128.3\n    },\n    100: {\n        0.995: 67.33,\n        0.99: 70.06,\n        0.975: 74.22,\n        0.95: 77.93,\n        0.9: 82.36,\n        0.5: 99.33,\n        0.1: 118.5,\n        0.05: 124.34,\n        0.025: 129.56,\n        0.01: 135.81,\n        0.005: 140.17\n    }\n};\n\nexport default chiSquaredDistributionTable;\n","import interquartileRange from \"./interquartile_range\";\nimport stddev from \"./sample_standard_deviation\";\n\nconst SQRT_2PI = Math.sqrt(2 * Math.PI);\n\n/**\n * [Well-known kernels](https://en.wikipedia.org/wiki/Kernel_(statistics)#Kernel_functions_in_common_use)\n * @private\n */\nconst kernels = {\n    /**\n     * The gaussian kernel.\n     * @private\n     */\n    gaussian: function (u) {\n        return Math.exp(-0.5 * u * u) / SQRT_2PI;\n    }\n};\n\n/**\n * Well known bandwidth selection methods\n * @private\n */\nconst bandwidthMethods = {\n    /**\n     * The [\"normal reference distribution\"\n     * rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html),\n     * a commonly used version of [Silverman's\n     * rule-of-thumb](https://en.wikipedia.org/wiki/Kernel_density_estimation#A_rule-of-thumb_bandwidth_estimator).\n     * @private\n     */\n    nrd: function (x) {\n        let s = stddev(x);\n        const iqr = interquartileRange(x);\n        if (typeof iqr === \"number\") {\n            s = Math.min(s, iqr / 1.34);\n        }\n        return 1.06 * s * Math.pow(x.length, -0.2);\n    }\n};\n\n/**\n * [Kernel density estimation](https://en.wikipedia.org/wiki/Kernel_density_estimation)\n * is a useful tool for, among other things, estimating the shape of the\n * underlying probability distribution from a sample.\n *\n * @name kernelDensityEstimation\n * @param X sample values\n * @param kernel The kernel function to use. If a function is provided, it should return non-negative values and integrate to 1. Defaults to 'gaussian'.\n * @param bandwidthMethod The \"bandwidth selection\" method to use, or a fixed bandwidth value. Defaults to \"nrd\", the commonly-used [\"normal reference distribution\" rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html).\n * @returns {Function} An estimated [probability density function](https://en.wikipedia.org/wiki/Probability_density_function) for the given sample. The returned function runs in `O(X.length)`.\n */\nfunction kernelDensityEstimation(X, kernel, bandwidthMethod) {\n    let kernelFn;\n    if (kernel === undefined) {\n        kernelFn = kernels.gaussian;\n    } else if (typeof kernel === \"string\") {\n        if (!kernels[kernel]) {\n            throw new Error('Unknown kernel \"' + kernel + '\"');\n        }\n        kernelFn = kernels[kernel];\n    } else {\n        kernelFn = kernel;\n    }\n\n    let bandwidth;\n    if (typeof bandwidthMethod === \"undefined\") {\n        bandwidth = bandwidthMethods.nrd(X);\n    } else if (typeof bandwidthMethod === \"string\") {\n        if (!bandwidthMethods[bandwidthMethod]) {\n            throw new Error(\n                'Unknown bandwidth method \"' + bandwidthMethod + '\"'\n            );\n        }\n        bandwidth = bandwidthMethods[bandwidthMethod](X);\n    } else {\n        bandwidth = bandwidthMethod;\n    }\n\n    return function (x) {\n        let i = 0;\n        let sum = 0;\n        for (i = 0; i < X.length; i++) {\n            sum += kernelFn((x - X[i]) / bandwidth);\n        }\n        return sum / bandwidth / X.length;\n    };\n}\n\nexport default kernelDensityEstimation;\n","const SQRT_2PI = Math.sqrt(2 * Math.PI);\n\nfunction cumulativeDistribution(z) {\n    let sum = z,\n        tmp = z;\n\n    // 15 iterations are enough for 4-digit precision\n    for (let i = 1; i < 15; i++) {\n        tmp *= (z * z) / (2 * i + 1);\n        sum += tmp;\n    }\n    return (\n        Math.round((0.5 + (sum / SQRT_2PI) * Math.exp((-z * z) / 2)) * 1e4) /\n        1e4\n    );\n}\n\n/**\n * A standard normal table, also called the unit normal table or Z table,\n * is a mathematical table for the values of Φ (phi), which are the values of\n * the [cumulative distribution function](https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function)\n * of the normal distribution. It is used to find the probability that a\n * statistic is observed below, above, or between values on the standard\n * normal distribution, and by extension, any normal distribution.\n */\nconst standardNormalTable = [];\n\nfor (let z = 0; z <= 3.09; z += 0.01) {\n    standardNormalTable.push(cumulativeDistribution(z));\n}\n\nexport default standardNormalTable;\n","/**\n * **[Gaussian error function](http://en.wikipedia.org/wiki/Error_function)**\n *\n * The `errorFunction(x/(sd * Math.sqrt(2)))` is the probability that a value in a\n * normal distribution with standard deviation sd is within x of the mean.\n *\n * This function returns a numerical approximation to the exact value.\n * It uses Horner's method to evaluate the polynomial of τ (tau).\n *\n * @param {number} x input\n * @return {number} error estimation\n * @example\n * errorFunction(1).toFixed(2); // => '0.84'\n */\nfunction errorFunction(x) {\n    const t = 1 / (1 + 0.5 * Math.abs(x));\n    const tau =\n        t *\n        Math.exp(\n            -x * x +\n                ((((((((0.17087277 * t - 0.82215223) * t + 1.48851587) * t -\n                    1.13520398) *\n                    t +\n                    0.27886807) *\n                    t -\n                    0.18628806) *\n                    t +\n                    0.09678418) *\n                    t +\n                    0.37409196) *\n                    t +\n                    1.00002368) *\n                    t -\n                1.26551223\n        );\n    if (x >= 0) {\n        return 1 - tau;\n    } else {\n        return tau - 1;\n    }\n}\n\nexport default errorFunction;\n","/**\n * The Inverse [Gaussian error function](http://en.wikipedia.org/wiki/Error_function)\n * returns a numerical approximation to the value that would have caused\n * `errorFunction()` to return x.\n *\n * @param {number} x value of error function\n * @returns {number} estimated inverted value\n */\nfunction inverseErrorFunction(x) {\n    const a = (8 * (Math.PI - 3)) / (3 * Math.PI * (4 - Math.PI));\n\n    const inv = Math.sqrt(\n        Math.sqrt(\n            Math.pow(2 / (Math.PI * a) + Math.log(1 - x * x) / 2, 2) -\n                Math.log(1 - x * x) / a\n        ) -\n            (2 / (Math.PI * a) + Math.log(1 - x * x) / 2)\n    );\n\n    if (x >= 0) {\n        return inv;\n    } else {\n        return -inv;\n    }\n}\n\nexport default inverseErrorFunction;\n","/**\n * [Sign](https://en.wikipedia.org/wiki/Sign_function) is a function\n * that extracts the sign of a real number\n *\n * @param {number} x input value\n * @returns {number} sign value either 1, 0 or -1\n * @throws {TypeError} if the input argument x is not a number\n * @private\n *\n * @example\n * sign(2); // => 1\n */\nfunction sign(x) {\n    if (typeof x === \"number\") {\n        if (x < 0) {\n            return -1;\n        } else if (x === 0) {\n            return 0;\n        } else {\n            return 1;\n        }\n    } else {\n        throw new TypeError(\"not a number\");\n    }\n}\n\nexport default sign;\n","/**\n * Calculate Euclidean distance between two points.\n * @param {Array<number>} left First N-dimensional point.\n * @param {Array<number>} right Second N-dimensional point.\n * @returns {number} Distance.\n */\nfunction euclideanDistance(left, right) {\n    let sum = 0;\n    for (let i = 0; i < left.length; i++) {\n        const diff = left[i] - right[i];\n        sum += diff * diff;\n    }\n    return Math.sqrt(sum);\n}\n\nexport default euclideanDistance;\n","import euclideanDistance from \"./euclidean_distance\";\nimport makeMatrix from \"./make_matrix\";\nimport sample from \"./sample\";\n\n/**\n * @typedef {Object} kMeansReturn\n * @property {Array<number>} labels The labels.\n * @property {Array<Array<number>>} centroids The cluster centroids.\n */\n\n/**\n * Perform k-means clustering.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points to be clustered.\n * @param {number} numCluster How many clusters to create.\n * @param {Function} randomSource An optional entropy source that generates uniform values in [0, 1).\n * @return {kMeansReturn} Labels (same length as data) and centroids (same length as numCluster).\n * @throws {Error} If any centroids wind up friendless (i.e., without associated points).\n *\n * @example\n * kMeansCluster([[0.0, 0.5], [1.0, 0.5]], 2); // => {labels: [0, 1], centroids: [[0.0, 0.5], [1.0 0.5]]}\n */\nfunction kMeansCluster(points, numCluster, randomSource = Math.random) {\n    let oldCentroids = null;\n    let newCentroids = sample(points, numCluster, randomSource);\n    let labels = null;\n    let change = Number.MAX_VALUE;\n    while (change !== 0) {\n        labels = labelPoints(points, newCentroids);\n        oldCentroids = newCentroids;\n        newCentroids = calculateCentroids(points, labels, numCluster);\n        change = calculateChange(newCentroids, oldCentroids);\n    }\n    return {\n        labels: labels,\n        centroids: newCentroids\n    };\n}\n\n/**\n * Label each point according to which centroid it is closest to.\n *\n * @private\n * @param {Array<Array<number>>} points Array of XY coordinates.\n * @param {Array<Array<number>>} centroids Current centroids.\n * @return {Array<number>} Group labels.\n */\nfunction labelPoints(points, centroids) {\n    return points.map((p) => {\n        let minDist = Number.MAX_VALUE;\n        let label = -1;\n        for (let i = 0; i < centroids.length; i++) {\n            const dist = euclideanDistance(p, centroids[i]);\n            if (dist < minDist) {\n                minDist = dist;\n                label = i;\n            }\n        }\n        return label;\n    });\n}\n\n/**\n * Calculate centroids for points given labels.\n *\n * @private\n * @param {Array<Array<number>>} points Array of XY coordinates.\n * @param {Array<number>} labels Which groups points belong to.\n * @param {number} numCluster Number of clusters being created.\n * @return {Array<Array<number>>} Centroid for each group.\n * @throws {Error} If any centroids wind up friendless (i.e., without associated points).\n */\nfunction calculateCentroids(points, labels, numCluster) {\n    // Initialize accumulators.\n    const dimension = points[0].length;\n    const centroids = makeMatrix(numCluster, dimension);\n    const counts = Array(numCluster).fill(0);\n\n    // Add points to centroids' accumulators and count points per centroid.\n    const numPoints = points.length;\n    for (let i = 0; i < numPoints; i++) {\n        const point = points[i];\n        const label = labels[i];\n        const current = centroids[label];\n        for (let j = 0; j < dimension; j++) {\n            current[j] += point[j];\n        }\n        counts[label] += 1;\n    }\n\n    // Rescale centroids, checking for any that have no points.\n    for (let i = 0; i < numCluster; i++) {\n        if (counts[i] === 0) {\n            throw new Error(`Centroid ${i} has no friends`);\n        }\n        const centroid = centroids[i];\n        for (let j = 0; j < dimension; j++) {\n            centroid[j] /= counts[i];\n        }\n    }\n\n    return centroids;\n}\n\n/**\n * Calculate the difference between old centroids and new centroids.\n *\n * @private\n * @param {Array<Array<number>>} left One list of centroids.\n * @param {Array<Array<number>>} right Another list of centroids.\n * @return {number} Distance between centroids.\n */\nfunction calculateChange(left, right) {\n    let total = 0;\n    for (let i = 0; i < left.length; i++) {\n        total += euclideanDistance(left[i], right[i]);\n    }\n    return total;\n}\n\nexport default kMeansCluster;\n","import euclideanDistance from \"./euclidean_distance\";\nimport makeMatrix from \"./make_matrix\";\nimport max from \"./max\";\n\n/**\n * Calculate the [silhouette values](https://en.wikipedia.org/wiki/Silhouette_(clustering))\n * for clustered data.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {Array<number>} The silhouette value for each point.\n *\n * @example\n * silhouette([[0.25], [0.75]], [0, 0]); // => [1.0, 1.0]\n */\nfunction silhouette(points, labels) {\n    if (points.length !== labels.length) {\n        throw new Error(\"must have exactly as many labels as points\");\n    }\n    const groupings = createGroups(labels);\n    const distances = calculateAllDistances(points);\n    const result = [];\n    for (let i = 0; i < points.length; i++) {\n        let s = 0;\n        if (groupings[labels[i]].length > 1) {\n            const a = meanDistanceFromPointToGroup(\n                i,\n                groupings[labels[i]],\n                distances\n            );\n            const b = meanDistanceToNearestGroup(\n                i,\n                labels,\n                groupings,\n                distances\n            );\n            s = (b - a) / Math.max(a, b);\n        }\n        result.push(s);\n    }\n    return result;\n}\n\n/**\n * Create a lookup table mapping group IDs to point IDs.\n *\n * @private\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {Array<Array<number>>} An array of length G, each of whose entries is an array\n * containing the indices of the points in that group.\n */\nfunction createGroups(labels) {\n    const numGroups = 1 + max(labels);\n    const result = Array(numGroups);\n    for (let i = 0; i < labels.length; i++) {\n        const label = labels[i];\n        if (result[label] === undefined) {\n            result[label] = [];\n        }\n        result[label].push(i);\n    }\n    return result;\n}\n\n/**\n * Create a lookup table of all inter-point distances.\n *\n * @private\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @return {Array<Array<number>>} A symmetric square array of inter-point distances\n * (zero on the diagonal).\n */\nfunction calculateAllDistances(points) {\n    const numPoints = points.length;\n    const result = makeMatrix(numPoints, numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        for (let j = 0; j < i; j++) {\n            result[i][j] = euclideanDistance(points[i], points[j]);\n            result[j][i] = result[i][j];\n        }\n    }\n    return result;\n}\n\n/**\n * Calculate the mean distance between this point and all the points in the\n * nearest group (as determined by which point in another group is closest).\n *\n * @private\n * @param {number} which The index of this point.\n * @param {Array<number>} labels Labels of points.\n * @param {Array<Array<number>>} groupings An array whose entries are arrays\n * containing the indices of the points in that group.\n * @param {Array<Array<number>>} distances A symmetric square array of inter-point\n * distances.\n * @return {number} The mean distance from this point to others in the nearest\n * group.\n */\nfunction meanDistanceToNearestGroup(which, labels, groupings, distances) {\n    const label = labels[which];\n    let result = Number.MAX_VALUE;\n    for (let i = 0; i < groupings.length; i++) {\n        if (i !== label) {\n            const d = meanDistanceFromPointToGroup(\n                which,\n                groupings[i],\n                distances\n            );\n            if (d < result) {\n                result = d;\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Calculate the mean distance between a point and all the points in a group\n * (possibly its own).\n *\n * @private\n * @param {number} which The index of this point.\n * @param {Array<number>} group The indices of all the points in the group in\n * question.\n * @param {Array<Array<number>>} distances A symmetric square array of inter-point\n * distances.\n * @return {number} The mean distance from this point to others in the\n * specified group.\n */\nfunction meanDistanceFromPointToGroup(which, group, distances) {\n    let total = 0;\n    for (let i = 0; i < group.length; i++) {\n        total += distances[which][group[i]];\n    }\n    return total / group.length;\n}\n\nexport default silhouette;\n","/**\n * Relative error.\n *\n * This is more difficult to calculate than it first appears [1,2].  The usual\n * formula for the relative error between an actual value A and an expected\n * value E is `|(A-E)/E|`, but:\n *\n * 1. If the expected value is 0, any other value has infinite relative error,\n *    which is counter-intuitive: if the expected voltage is 0, getting 1/10th\n *    of a volt doesn't feel like an infinitely large error.\n *\n * 2. This formula does not satisfy the mathematical definition of a metric [3].\n *    [4] solved this problem by defining the relative error as `|ln(|A/E|)|`,\n *    but that formula only works if all values are positive: for example, it\n *    reports the relative error of -10 and 10 as 0.\n *\n * Our implementation sticks with convention and returns:\n *\n * - 0 if the actual and expected values are both zero\n * - Infinity if the actual value is non-zero and the expected value is zero\n * - `|(A-E)/E|` in all other cases\n *\n * [1] https://math.stackexchange.com/questions/677852/how-to-calculate-relative-error-when-true-value-is-zero\n * [2] https://en.wikipedia.org/wiki/Relative_change_and_difference\n * [3] https://en.wikipedia.org/wiki/Metric_(mathematics)#Definition\n * [4] F.W.J. Olver: \"A New Approach to Error Arithmetic.\" SIAM Journal on\n *     Numerical Analysis, 15(2), 1978, 10.1137/0715024.\n *\n * @param {number} actual The actual value.\n * @param {number} expected The expected value.\n * @return {number} The relative error.\n */\nfunction relativeError(actual, expected) {\n    if (actual === 0 && expected === 0) {\n        return 0;\n    }\n    return Math.abs((actual - expected) / expected);\n}\n\nexport default relativeError;\n","/**\n * When adding a new value to a list, one does not have to necessary\n * recompute the mean of the list in linear time. They can instead use\n * this function to compute the new mean by providing the current mean,\n * the number of elements in the list that produced it and the new\n * value to add.\n *\n * @since 2.5.0\n * @param {number} mean current mean\n * @param {number} n number of items in the list\n * @param {number} newValue the added value\n * @returns {number} the new mean\n *\n * @example\n * addToMean(14, 5, 53); // => 20.5\n */\nfunction addToMean(mean, n, newValue) {\n    return mean + (newValue - mean) / (n + 1);\n}\n\nexport default addToMean;\n","import epsilon from \"./epsilon\";\nimport relativeError from \"./relative_error\";\n\n/**\n * Approximate equality.\n *\n * @param {number} actual The value to be tested.\n * @param {number} expected The reference value.\n * @param {number} tolerance The acceptable relative difference.\n * @return {boolean} Whether numbers are within tolerance.\n */\nfunction approxEqual(actual, expected, tolerance = epsilon) {\n    return relativeError(actual, expected) <= tolerance;\n}\n\nexport default approxEqual;\n","/**\n * The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)\n * is the probability discrete\n * distribution of a random variable which takes value 1 with success\n * probability `p` and value 0 with failure\n * probability `q` = 1 - `p`. It can be used, for example, to represent the\n * toss of a coin, where \"1\" is defined to mean \"heads\" and \"0\" is defined\n * to mean \"tails\" (or vice versa). It is\n * a special case of a Binomial Distribution\n * where `n` = 1.\n *\n * @param {number} p input value, between 0 and 1 inclusive\n * @returns {number[]} values of bernoulli distribution at this point\n * @throws {Error} if p is outside 0 and 1\n * @example\n * bernoulliDistribution(0.3); // => [0.7, 0.3]\n */\nfunction bernoulliDistribution(p) /*: number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1)\n    if (p < 0 || p > 1) {\n        throw new Error(\n            \"bernoulliDistribution requires probability to be between 0 and 1 inclusive\"\n        );\n    }\n\n    return [1 - p, p];\n}\n\nexport default bernoulliDistribution;\n","import epsilon from \"./epsilon\";\n\n/**\n * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n *\n * @param {number} trials number of trials to simulate\n * @param {number} probability\n * @returns {number[]} output\n */\nfunction binomialDistribution(trials, probability) /*: ?number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n    // that `n` is an integer, strictly positive.\n    if (probability < 0 || probability > 1 || trials <= 0 || trials % 1 !== 0) {\n        return undefined;\n    }\n\n    // We initialize `x`, the random variable, and `accumulator`, an accumulator\n    // for the cumulative distribution function to 0. `distribution_functions`\n    // is the object we'll return with the `probability_of_x` and the\n    // `cumulativeProbability_of_x`, as well as the calculated mean &\n    // variance. We iterate until the `cumulativeProbability_of_x` is\n    // within `epsilon` of 1.0.\n    let x = 0;\n    let cumulativeProbability = 0;\n    const cells = [];\n    let binomialCoefficient = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] =\n            binomialCoefficient *\n            Math.pow(probability, x) *\n            Math.pow(1 - probability, trials - x);\n        cumulativeProbability += cells[x];\n        x++;\n        binomialCoefficient = (binomialCoefficient * (trials - x + 1)) / x;\n        // when the cumulativeProbability is nearly 1, we've calculated\n        // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nexport default binomialDistribution;\n","import sign from \"./sign\";\n\n/**\n * [Bisection method](https://en.wikipedia.org/wiki/Bisection_method) is a root-finding\n * method that repeatedly bisects an interval to find the root.\n *\n * This function returns a numerical approximation to the exact value.\n *\n * @param {Function} func input function\n * @param {number} start - start of interval\n * @param {number} end - end of interval\n * @param {number} maxIterations - the maximum number of iterations\n * @param {number} errorTolerance - the error tolerance\n * @returns {number} estimated root value\n * @throws {TypeError} Argument func must be a function\n *\n * @example\n * bisect(Math.cos,0,4,100,0.003); // => 1.572265625\n */\nfunction bisect(func, start, end, maxIterations, errorTolerance) {\n    if (typeof func !== \"function\")\n        throw new TypeError(\"func must be a function\");\n\n    for (let i = 0; i < maxIterations; i++) {\n        const output = (start + end) / 2;\n\n        if (\n            func(output) === 0 ||\n            Math.abs((end - start) / 2) < errorTolerance\n        ) {\n            return output;\n        }\n\n        if (sign(func(output)) === sign(func(start))) {\n            start = output;\n        } else {\n            end = output;\n        }\n    }\n\n    throw new Error(\"maximum number of iterations exceeded\");\n}\n\nexport default bisect;\n","import chiSquaredDistributionTable from \"./chi_squared_distribution_table\";\nimport mean from \"./mean\";\n\n/**\n * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n * (that is, counts of observations), each squared and divided by the number of observations expected given the\n * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n * cells and `c` is the number of estimated parameters for the distribution.\n *\n * @param {Array<number>} data\n * @param {Function} distributionType a function that returns a point in a distribution:\n * for instance, binomial, bernoulli, or poisson\n * @param {number} significance\n * @returns {number} chi squared goodness of fit\n * @example\n * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n * // \"Probability and Statistics in Engineering and Management Science\", Wiley (1980).\n * var data1019 = [\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n *     3, 3, 3, 3\n * ];\n * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05); //= false\n */\nfunction chiSquaredGoodnessOfFit(data, distributionType, significance) {\n    // Estimate from the sample data, a weighted mean.\n    const inputMean = mean(data);\n    // Calculated value of the χ2 statistic.\n    let chiSquared = 0;\n    // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n    // Lose one degree of freedom for estimating `lambda` from the sample data.\n    const c = 1;\n    // The hypothesized distribution.\n    // Generate the hypothesized distribution.\n    const hypothesizedDistribution = distributionType(inputMean);\n    const observedFrequencies = [];\n    const expectedFrequencies = [];\n\n    // Create an array holding a histogram from the sample data, of\n    // the form `{ value: numberOfOcurrences }`\n    for (let i = 0; i < data.length; i++) {\n        if (observedFrequencies[data[i]] === undefined) {\n            observedFrequencies[data[i]] = 0;\n        }\n        observedFrequencies[data[i]]++;\n    }\n\n    // The histogram we created might be sparse - there might be gaps\n    // between values. So we iterate through the histogram, making\n    // sure that instead of undefined, gaps have 0 values.\n    for (let i = 0; i < observedFrequencies.length; i++) {\n        if (observedFrequencies[i] === undefined) {\n            observedFrequencies[i] = 0;\n        }\n    }\n\n    // Create an array holding a histogram of expected data given the\n    // sample size and hypothesized distribution.\n    for (const k in hypothesizedDistribution) {\n        if (k in observedFrequencies) {\n            expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;\n        }\n    }\n\n    // Working backward through the expected frequencies, collapse classes\n    // if less than three observations are expected for a class.\n    // This transformation is applied to the observed frequencies as well.\n    for (let k = expectedFrequencies.length - 1; k >= 0; k--) {\n        if (expectedFrequencies[k] < 3) {\n            expectedFrequencies[k - 1] += expectedFrequencies[k];\n            expectedFrequencies.pop();\n\n            observedFrequencies[k - 1] += observedFrequencies[k];\n            observedFrequencies.pop();\n        }\n    }\n\n    // Iterate through the squared differences between observed & expected\n    // frequencies, accumulating the `chiSquared` statistic.\n    for (let k = 0; k < observedFrequencies.length; k++) {\n        chiSquared +=\n            Math.pow(observedFrequencies[k] - expectedFrequencies[k], 2) /\n            expectedFrequencies[k];\n    }\n\n    // Calculate degrees of freedom for this test and look it up in the\n    // `chiSquaredDistributionTable` in order to\n    // accept or reject the goodness-of-fit of the hypothesized distribution.\n    // Degrees of freedom, calculated as (number of class intervals -\n    // number of hypothesized distribution parameters estimated - 1)\n    const degreesOfFreedom = observedFrequencies.length - c - 1;\n    return (\n        chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared\n    );\n}\n\nexport default chiSquaredGoodnessOfFit;\n","/**\n * Split an array into chunks of a specified size. This function\n * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n * function, and thus will insert smaller-sized chunks at the end if\n * the input size is not divisible by the chunk size.\n *\n * `x` is expected to be an array, and `chunkSize` a number.\n * The `x` array can contain any kind of data.\n *\n * @param {Array} x a sample\n * @param {number} chunkSize size of each output array. must be a positive integer\n * @returns {Array<Array>} a chunked array\n * @throws {Error} if chunk size is less than 1 or not an integer\n * @example\n * chunk([1, 2, 3, 4, 5, 6], 2);\n * // => [[1, 2], [3, 4], [5, 6]]\n */\nfunction chunk(x, chunkSize) {\n    // a list of result chunks, as arrays in an array\n    const output = [];\n\n    // `chunkSize` must be zero or higher - otherwise the loop below,\n    // in which we call `start += chunkSize`, will loop infinitely.\n    // So, we'll detect and throw in that case to indicate\n    // invalid input.\n    if (chunkSize < 1) {\n        throw new Error(\"chunk size must be a positive number\");\n    }\n\n    if (Math.floor(chunkSize) !== chunkSize) {\n        throw new Error(\"chunk size must be an integer\");\n    }\n\n    // `start` is the index at which `.slice` will start selecting\n    // new array elements\n    for (let start = 0; start < x.length; start += chunkSize) {\n        // for each chunk, slice that part of the array and add it\n        // to the output. The `.slice` function does not change\n        // the original array.\n        output.push(x.slice(start, start + chunkSize));\n    }\n    return output;\n}\n\nexport default chunk;\n","import mean from \"./mean\";\nimport sampleStandardDeviation from \"./sample_standard_deviation\";\n\n/**\n * The`coefficient of variation`_ is the ratio of the standard deviation to the mean.\n * .._`coefficient of variation`: https://en.wikipedia.org/wiki/Coefficient_of_variation\n *\n *\n * @param {Array} x input\n * @returns {number} coefficient of variation\n * @example\n * coefficientOfVariation([1, 2, 3, 4]).toFixed(3); // => 0.516\n * coefficientOfVariation([1, 2, 3, 4, 5]).toFixed(3); // => 0.527\n * coefficientOfVariation([-1, 0, 1, 2, 3, 4]).toFixed(3); // => 1.247\n */\nfunction coefficientOfVariation(x) {\n    return sampleStandardDeviation(x) / mean(x);\n}\n\nexport default coefficientOfVariation;\n","/**\n * Implementation of Combinations\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * https://en.wikipedia.org/wiki/Combination\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]\n */\n\nfunction combinations(x, k) {\n    let i;\n    let subI;\n    const combinationList = [];\n    let subsetCombinations;\n    let next;\n\n    for (i = 0; i < x.length; i++) {\n        if (k === 1) {\n            combinationList.push([x[i]]);\n        } else {\n            subsetCombinations = combinations(x.slice(i + 1, x.length), k - 1);\n            for (subI = 0; subI < subsetCombinations.length; subI++) {\n                next = subsetCombinations[subI];\n                next.unshift(x[i]);\n                combinationList.push(next);\n            }\n        }\n    }\n    return combinationList;\n}\n\nexport default combinations;\n","/**\n * Implementation of [Combinations](https://en.wikipedia.org/wiki/Combination) with replacement\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * 'With replacement' means that a given element can be chosen multiple times.\n * Unlike permutation, order doesn't matter for combinations.\n *\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinationsReplacement([1, 2], 2); // => [[1, 1], [1, 2], [2, 2]]\n */\nfunction combinationsReplacement(x, k) {\n    const combinationList = [];\n\n    for (let i = 0; i < x.length; i++) {\n        if (k === 1) {\n            // If we're requested to find only one element, we don't need\n            // to recurse: just push `x[i]` onto the list of combinations.\n            combinationList.push([x[i]]);\n        } else {\n            // Otherwise, recursively find combinations, given `k - 1`. Note that\n            // we request `k - 1`, so if you were looking for k=3 combinations, we're\n            // requesting k=2. This -1 gets reversed in the for loop right after this\n            // code, since we concatenate `x[i]` onto the selected combinations,\n            // bringing `k` back up to your requested level.\n            // This recursion may go many levels deep, since it only stops once\n            // k=1.\n            const subsetCombinations = combinationsReplacement(\n                x.slice(i, x.length),\n                k - 1\n            );\n\n            for (let j = 0; j < subsetCombinations.length; j++) {\n                combinationList.push([x[i]].concat(subsetCombinations[j]));\n            }\n        }\n    }\n\n    return combinationList;\n}\n\nexport default combinationsReplacement;\n","import combineMeans from \"./combine_means\";\n\n/**\n * When combining two lists of values for which one already knows the variances,\n * one does not have to necessary recompute the variance of the combined lists\n * in linear time. They can instead use this function to compute the combined\n * variance by providing the variance, mean & number of values of the first list\n * and the variance, mean & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} variance1 variance of the first list\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} variance2 variance of the second list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineVariances(14 / 3, 5, 3, 8 / 3, 4, 3); // => 47 / 12\n */\nfunction combineVariances(variance1, mean1, n1, variance2, mean2, n2) {\n    const newMean = combineMeans(mean1, n1, mean2, n2);\n\n    return (\n        (n1 * (variance1 + Math.pow(mean1 - newMean, 2)) +\n            n2 * (variance2 + Math.pow(mean2 - newMean, 2))) /\n        (n1 + n2)\n    );\n}\n\nexport default combineVariances;\n","/**\n * **[Logistic Cumulative Distribution Function](https://en.wikipedia.org/wiki/Logistic_distribution)**\n *\n * @param {number} x\n * @returns {number} cumulative standard logistic probability\n */\nfunction cumulativeStdLogisticProbability(x) {\n    return 1 / (Math.exp(-x) + 1);\n}\n\nexport default cumulativeStdLogisticProbability;\n","import standardNormalTable from \"./standard_normal_table\";\n\n/**\n * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**\n *\n * Since probability tables cannot be\n * printed for every normal distribution, as there are an infinite variety\n * of normal distributions, it is common practice to convert a normal to a\n * standard normal and then use the standard normal table to find probabilities.\n *\n * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability\n * instead of looking it up in a table.\n *\n * @param {number} z\n * @returns {number} cumulative standard normal probability\n */\nfunction cumulativeStdNormalProbability(z) {\n    // Calculate the position of this value.\n    const absZ = Math.abs(z);\n    // Each row begins with a different\n    // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table\n    // corresponds to a range of 0.01 in the input values, so the value is\n    // multiplied by 100.\n    const index = Math.min(\n        Math.round(absZ * 100),\n        standardNormalTable.length - 1\n    );\n\n    // The index we calculate must be in the table as a positive value,\n    // but we still pay attention to whether the input is positive\n    // or negative, and flip the output value as a last step.\n    if (z >= 0) {\n        return standardNormalTable[index];\n    } else {\n        // due to floating-point arithmetic, values in the table with\n        // 4 significant figures can nevertheless end up as repeating\n        // fractions when they're computed here.\n        return +(1 - standardNormalTable[index]).toFixed(4);\n    }\n}\n\nexport default cumulativeStdNormalProbability;\n","import max from \"./max\";\nimport min from \"./min\";\n\n/**\n * Given an array of x, this will find the extent of the\n * x and return an array of breaks that can be used\n * to categorize the x into a number of classes. The\n * returned array will always be 1 longer than the number of\n * classes because it includes the minimum value.\n *\n * @param {Array<number>} x an array of number values\n * @param {number} nClasses number of desired classes\n * @returns {Array<number>} array of class break positions\n * @example\n * equalIntervalBreaks([1, 2, 3, 4, 5, 6], 4); // => [1, 2.25, 3.5, 4.75, 6]\n */\nfunction equalIntervalBreaks(x, nClasses) {\n    if (x.length < 2) {\n        return x;\n    }\n\n    const theMin = min(x);\n    const theMax = max(x);\n\n    // the first break will always be the minimum value\n    // in the xset\n    const breaks = [theMin];\n\n    // The size of each break is the full range of the x\n    // divided by the number of classes requested\n    const breakSize = (theMax - theMin) / nClasses;\n\n    // In the case of nClasses = 1, this loop won't run\n    // and the returned breaks will be [min, max]\n    for (let i = 1; i < nClasses; i++) {\n        breaks.push(breaks[0] + breakSize * i);\n    }\n\n    // the last break will always be the\n    // maximum.\n    breaks.push(theMax);\n\n    return breaks;\n}\n\nexport default equalIntervalBreaks;\n","/**\n * This computes the minimum & maximum number in an array.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {Array<number>} minimum & maximum value\n * @throws {Error} if the length of x is less than one\n * @example\n * extent([1, 2, 3, 4]);\n * // => [1, 4]\n */\nfunction extent(x) {\n    if (x.length === 0) {\n        throw new Error(\"extent requires at least one data point\");\n    }\n\n    let min = x[0];\n    let max = x[0];\n    for (let i = 1; i < x.length; i++) {\n        if (x[i] > max) {\n            max = x[i];\n        }\n        if (x[i] < min) {\n            min = x[i];\n        }\n    }\n    return [min, max];\n}\n\nexport default extent;\n","/**\n * The extent is the lowest & highest number in the array. With a sorted array,\n * the first element in the array is always the lowest while the last element is always the largest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {Array<number>} minimum & maximum value\n * @example\n * extentSorted([-100, -10, 1, 2, 5]); // => [-100, 5]\n */\nfunction extentSorted(x) {\n    return [x[0], x[x.length - 1]];\n}\n\nexport default extentSorted;\n","import factorial from \"./factorial\";\n\n/**\n * Compute the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Nemes' approximation.\n * The gamma of n is equivalent to (n-1)!, but unlike the factorial function, gamma is defined for all real n except zero\n * and negative integers (where NaN is returned). Note, the gamma function is also well-defined for complex numbers,\n * though this implementation currently does not handle complex numbers as input values.\n * Nemes' approximation is defined [here](https://arxiv.org/abs/1003.6020) as Theorem 2.2.\n * Negative values use [Euler's reflection formula](https://en.wikipedia.org/wiki/Gamma_function#Properties) for computation.\n *\n * @param {number} n Any real number except for zero and negative integers.\n * @returns {number} The gamma of the input value.\n *\n * @example\n * gamma(11.5); // 11899423.084037038\n * gamma(-11.5); // 2.29575810481609e-8\n * gamma(5); // 24\n */\nfunction gamma(n) {\n    if (Number.isInteger(n)) {\n        if (n <= 0) {\n            // gamma not defined for zero or negative integers\n            return NaN;\n        } else {\n            // use factorial for integer inputs\n            return factorial(n - 1);\n        }\n    }\n\n    // Decrement n, because approximation is defined for n - 1\n    n--;\n\n    if (n < 0) {\n        // Use Euler's reflection formula for negative inputs\n        // see:  https://en.wikipedia.org/wiki/Gamma_function#Properties\n        return Math.PI / (Math.sin(Math.PI * -n) * gamma(-n));\n    } else {\n        // Nemes' expansion approximation\n        const seriesCoefficient =\n            Math.pow(n / Math.E, n) * Math.sqrt(2 * Math.PI * (n + 1 / 6));\n\n        const seriesDenom = n + 1 / 4;\n\n        const seriesExpansion =\n            1 +\n            1 / 144 / Math.pow(seriesDenom, 2) -\n            1 / 12960 / Math.pow(seriesDenom, 3) -\n            257 / 207360 / Math.pow(seriesDenom, 4) -\n            52 / 2612736 / Math.pow(seriesDenom, 5) +\n            5741173 / 9405849600 / Math.pow(seriesDenom, 6) +\n            37529 / 18811699200 / Math.pow(seriesDenom, 7);\n\n        return seriesCoefficient * seriesExpansion;\n    }\n}\n\nexport default gamma;\n","/**\n * The [Geometric Mean](https://en.wikipedia.org/wiki/Geometric_mean) is\n * a mean function that is more useful for numbers in different\n * ranges.\n *\n * This is the nth root of the input numbers multiplied by each other.\n *\n * The geometric mean is often useful for\n * **[proportional growth](https://en.wikipedia.org/wiki/Geometric_mean#Proportional_growth)**: given\n * growth rates for multiple years, like _80%, 16.66% and 42.85%_, a simple\n * mean will incorrectly estimate an average growth rate, whereas a geometric\n * mean will correctly estimate a growth rate that, over those years,\n * will yield the same end value.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} geometric mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n * @example\n * var growthRates = [1.80, 1.166666, 1.428571];\n * var averageGrowth = ss.geometricMean(growthRates);\n * var averageGrowthRates = [averageGrowth, averageGrowth, averageGrowth];\n * var startingValue = 10;\n * var startingValueMean = 10;\n * growthRates.forEach(function(rate) {\n *   startingValue *= rate;\n * });\n * averageGrowthRates.forEach(function(rate) {\n *   startingValueMean *= rate;\n * });\n * startingValueMean === startingValue;\n */\nfunction geometricMean(x) {\n    if (x.length === 0) {\n        throw new Error(\"geometricMean requires at least one data point\");\n    }\n\n    // the starting value.\n    let value = 1;\n\n    for (let i = 0; i < x.length; i++) {\n        // the geometric mean is only valid for positive numbers\n        if (x[i] < 0) {\n            throw new Error(\n                \"geometricMean requires only non-negative numbers as input\"\n            );\n        }\n\n        // repeatedly multiply the value by each number\n        value *= x[i];\n    }\n\n    return Math.pow(value, 1 / x.length);\n}\n\nexport default geometricMean;\n","/**\n * The [Harmonic Mean](https://en.wikipedia.org/wiki/Harmonic_mean) is\n * a mean function typically used to find the average of rates.\n * This mean is calculated by taking the reciprocal of the arithmetic mean\n * of the reciprocals of the input numbers.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} harmonic mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n * @example\n * harmonicMean([2, 3]).toFixed(2) // => '2.40'\n */\nfunction harmonicMean(x) {\n    if (x.length === 0) {\n        throw new Error(\"harmonicMean requires at least one data point\");\n    }\n\n    let reciprocalSum = 0;\n\n    for (let i = 0; i < x.length; i++) {\n        // the harmonic mean is only valid for positive numbers\n        if (x[i] <= 0) {\n            throw new Error(\n                \"harmonicMean requires only positive numbers as input\"\n            );\n        }\n\n        reciprocalSum += 1 / x[i];\n    }\n\n    // divide n by the reciprocal sum\n    return x.length / reciprocalSum;\n}\n\nexport default harmonicMean;\n","/**\n * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n * is a simple way to find a fitted line\n * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line\n * using the least sum of squares.\n *\n * @param {Array<Array<number>>} data an array of two-element of arrays,\n * like `[[0, 1], [2, 3]]`\n * @returns {Object} object containing slope and intersect of regression line\n * @example\n * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }\n */\nfunction linearRegression(data) {\n    let m, b;\n\n    // Store data length in a local variable to reduce\n    // repeated object property lookups\n    const dataLength = data.length;\n\n    //if there's only one point, arbitrarily choose a slope of 0\n    //and a y-intercept of whatever the y of the initial point is\n    if (dataLength === 1) {\n        m = 0;\n        b = data[0][1];\n    } else {\n        // Initialize our sums and scope the `m` and `b`\n        // variables that define the line.\n        let sumX = 0,\n            sumY = 0,\n            sumXX = 0,\n            sumXY = 0;\n\n        // Use local variables to grab point values\n        // with minimal object property lookups\n        let point, x, y;\n\n        // Gather the sum of all x values, the sum of all\n        // y values, and the sum of x^2 and (x*y) for each\n        // value.\n        //\n        // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n        for (let i = 0; i < dataLength; i++) {\n            point = data[i];\n            x = point[0];\n            y = point[1];\n\n            sumX += x;\n            sumY += y;\n\n            sumXX += x * x;\n            sumXY += x * y;\n        }\n\n        // `m` is the slope of the regression line\n        m =\n            (dataLength * sumXY - sumX * sumY) /\n            (dataLength * sumXX - sumX * sumX);\n\n        // `b` is the y-intercept of the line.\n        b = sumY / dataLength - (m * sumX) / dataLength;\n    }\n\n    // Return both values as an object.\n    return {\n        m: m,\n        b: b\n    };\n}\n\nexport default linearRegression;\n","/**\n * Given the output of `linearRegression`: an object\n * with `m` and `b` values indicating slope and intercept,\n * respectively, generate a line function that translates\n * x values into y values.\n *\n * @param {Object} mb object with `m` and `b` members, representing\n * slope and intersect of desired line\n * @returns {Function} method that computes y-value at any given\n * x-value on the line.\n * @example\n * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));\n * l(0) // = 0\n * l(2) // = 2\n * linearRegressionLine({ b: 0, m: 1 })(1); // => 1\n * linearRegressionLine({ b: 1, m: 1 })(1); // => 2\n */\nfunction linearRegressionLine(mb /*: { b: number, m: number }*/) {\n    // Return a function that computes a `y` value for each\n    // x value it is given, based on the values of `b` and `a`\n    // that we just computed.\n    return function (x) {\n        return mb.b + mb.m * x;\n    };\n}\n\nexport default linearRegressionLine;\n","/**\n * The [log average](https://en.wikipedia.org/wiki/https://en.wikipedia.org/wiki/Geometric_mean#Relationship_with_logarithms)\n * is an equivalent way of computing the geometric mean of an array suitable for large or small products.\n *\n * It's found by calculating the average logarithm of the elements and exponentiating.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} geometric mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n */\nfunction logAverage(x) {\n    if (x.length === 0) {\n        throw new Error(\"logAverage requires at least one data point\");\n    }\n\n    let value = 0;\n    for (let i = 0; i < x.length; i++) {\n        if (x[i] < 0) {\n            throw new Error(\n                \"logAverage requires only non-negative numbers as input\"\n            );\n        }\n        value += Math.log(x[i]);\n    }\n\n    return Math.exp(value / x.length);\n}\n\nexport default logAverage;\n","/**\n * The [Logit](https://en.wikipedia.org/wiki/Logit)\n * is the inverse of cumulativeStdLogisticProbability,\n * and is also known as the logistic quantile function.\n *\n * @param {number} p\n * @returns {number} logit\n */\nfunction logit(p) {\n    if (p <= 0 || p >= 1) {\n        throw new Error(\"p must be strictly between zero and one\");\n    }\n    return Math.log(p / (1 - p));\n}\n\nexport default logit;\n","/**\n * The maximum is the highest number in the array. With a sorted array,\n * the last element in the array is always the largest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} maximum value\n * @example\n * maxSorted([-100, -10, 1, 2, 5]); // => 5\n */\nfunction maxSorted(x) {\n    return x[x.length - 1];\n}\n\nexport default maxSorted;\n","import quantileSorted from \"./quantile_sorted\";\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of 'the middle'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn't necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} sorted input\n * @returns {number} median value\n * @example\n * medianSorted([10, 2, 5, 100, 2, 1]); // => 52.5\n */\nfunction medianSorted(sorted) {\n    return quantileSorted(sorted, 0.5);\n}\n\nexport default medianSorted;\n","/**\n * The minimum is the lowest number in the array. With a sorted array,\n * the first element in the array is always the smallest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} minimum value\n * @example\n * minSorted([-100, -10, 1, 2, 5]); // => -100\n */\nfunction minSorted(x) {\n    return x[0];\n}\n\nexport default minSorted;\n","import modeSorted from \"./mode_sorted\";\nimport numericSort from \"./numeric_sort\";\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n log(n))` because it needs to sort the array internally\n * before running an `O(n)` search to find the mode.\n *\n * @param {Array<number>} x input\n * @returns {number} mode\n * @example\n * mode([0, 0, 1]); // => 0\n */\nfunction mode(x) {\n    // Sorting the array lets us iterate through it below and be sure\n    // that every time we see a new number it's new and we'll never\n    // see the same number twice\n    return modeSorted(numericSort(x));\n}\n\nexport default mode;\n","/* globals Map: false */\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * modeFast uses a Map object to keep track of the mode, instead of the approach\n * used with `mode`, a sorted array. As a result, it is faster\n * than `mode` and supports any data type that can be compared with `==`.\n * It also requires a\n * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),\n * and will throw an error if Map is not available.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * @param {Array<*>} x a sample of one or more data points\n * @returns {?*} mode\n * @throws {ReferenceError} if the JavaScript environment doesn't support Map\n * @throws {Error} if x is empty\n * @example\n * modeFast(['rabbits', 'rabbits', 'squirrels']); // => 'rabbits'\n */\nfunction modeFast(x) {\n    // This index will reflect the incidence of different values, indexing\n    // them like\n    // { value: count }\n    const index = new Map();\n\n    // A running `mode` and the number of times it has been encountered.\n    let mode;\n    let modeCount = 0;\n\n    for (let i = 0; i < x.length; i++) {\n        let newCount = index.get(x[i]);\n        if (newCount === undefined) {\n            newCount = 1;\n        } else {\n            newCount++;\n        }\n        if (newCount > modeCount) {\n            mode = x[i];\n            modeCount = newCount;\n        }\n        index.set(x[i], newCount);\n    }\n\n    if (modeCount === 0) {\n        throw new Error(\"mode requires at last one data point\");\n    }\n\n    return mode;\n}\n\nexport default modeFast;\n","import mean from \"./mean\";\nimport shuffleInPlace from \"./shuffle_in_place\";\n\n/**\n * Conducts a [permutation test](https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests)\n * to determine if two data sets are *significantly* different from each other, using\n * the difference of means between the groups as the test statistic.\n * The function allows for the following hypotheses:\n * - two_tail = Null hypothesis: the two distributions are equal.\n * - greater = Null hypothesis: observations from sampleX tend to be smaller than those from sampleY.\n * - less = Null hypothesis: observations from sampleX tend to be greater than those from sampleY.\n * [Learn more about one-tail vs two-tail tests.](https://en.wikipedia.org/wiki/One-_and_two-tailed_tests)\n *\n * @param {Array<number>} sampleX first dataset (e.g. treatment data)\n * @param {Array<number>} sampleY second dataset (e.g. control data)\n * @param {string} alternative alternative hypothesis, either 'two_sided' (default), 'greater', or 'less'\n * @param {number} k number of values in permutation distribution.\n * @param {Function} [randomSource=Math.random] an optional entropy source\n * @returns {number} p-value The probability of observing the difference between groups (as or more extreme than what we did), assuming the null hypothesis.\n *\n * @example\n * var control = [2, 5, 3, 6, 7, 2, 5];\n * var treatment = [20, 5, 13, 12, 7, 2, 2];\n * permutationTest(control, treatment); // ~0.1324\n */\nfunction permutationTest(sampleX, sampleY, alternative, k, randomSource) {\n    // Set default arguments\n    if (k === undefined) {\n        k = 10000;\n    }\n    if (alternative === undefined) {\n        alternative = \"two_side\";\n    }\n    if (\n        alternative !== \"two_side\" &&\n        alternative !== \"greater\" &&\n        alternative !== \"less\"\n    ) {\n        throw new Error(\n            \"`alternative` must be either 'two_side', 'greater', or 'less'\"\n        );\n    }\n\n    // get means for each sample\n    const meanX = mean(sampleX);\n    const meanY = mean(sampleY);\n\n    // calculate initial test statistic. This will be our point of comparison with\n    // the generated test statistics.\n    const testStatistic = meanX - meanY;\n\n    // create test-statistic distribution\n    const testStatDsn = new Array(k);\n\n    // combine datsets so we can easily shuffle later\n    const allData = sampleX.concat(sampleY);\n    const midIndex = Math.floor(allData.length / 2);\n\n    for (let i = 0; i < k; i++) {\n        // 1. shuffle data assignments\n        shuffleInPlace(allData, randomSource);\n        const permLeft = allData.slice(0, midIndex);\n        const permRight = allData.slice(midIndex, allData.length);\n\n        // 2.re-calculate test statistic\n        const permTestStatistic = mean(permLeft) - mean(permRight);\n\n        // 3. store test statistic to build test statistic distribution\n        testStatDsn[i] = permTestStatistic;\n    }\n\n    // Calculate p-value depending on alternative\n    // For this test, we calculate the percentage of 'extreme' test statistics (subject to our hypothesis)\n    // more info on permutation test p-value calculations: https://onlinecourses.science.psu.edu/stat464/node/35\n    let numExtremeTStats = 0;\n    if (alternative === \"two_side\") {\n        for (let i = 0; i <= k; i++) {\n            if (Math.abs(testStatDsn[i]) >= Math.abs(testStatistic)) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else if (alternative === \"greater\") {\n        for (let i = 0; i <= k; i++) {\n            if (testStatDsn[i] >= testStatistic) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else {\n        // alternative === 'less'\n        for (let i = 0; i <= k; i++) {\n            if (testStatDsn[i] <= testStatistic) {\n                numExtremeTStats += 1;\n            }\n        }\n    }\n\n    return numExtremeTStats / k;\n}\n\nexport default permutationTest;\n","/**\n * Implementation of [Heap's Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)\n * for generating permutations.\n *\n * @param {Array} elements any type of data\n * @returns {Array<Array>} array of permutations\n */\nfunction permutationsHeap(elements) {\n    const indexes = new Array(elements.length);\n    const permutations = [elements.slice()];\n\n    for (let i = 0; i < elements.length; i++) {\n        indexes[i] = 0;\n    }\n\n    for (let i = 0; i < elements.length; ) {\n        if (indexes[i] < i) {\n            // At odd indexes, swap from indexes[i] instead\n            // of from the beginning of the array\n            let swapFrom = 0;\n            if (i % 2 !== 0) {\n                swapFrom = indexes[i];\n            }\n\n            // swap between swapFrom and i, using\n            // a temporary variable as storage.\n            const temp = elements[swapFrom];\n            elements[swapFrom] = elements[i];\n            elements[i] = temp;\n\n            permutations.push(elements.slice());\n            indexes[i]++;\n            i = 0;\n        } else {\n            indexes[i] = 0;\n            i++;\n        }\n    }\n\n    return permutations;\n}\n\nexport default permutationsHeap;\n","import epsilon from \"./epsilon\";\n\n/**\n * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)\n * is a discrete probability distribution that expresses the probability\n * of a given number of events occurring in a fixed interval of time\n * and/or space if these events occur with a known average rate and\n * independently of the time since the last event.\n *\n * The Poisson Distribution is characterized by the strictly positive\n * mean arrival or occurrence rate, `λ`.\n *\n * @param {number} lambda location poisson distribution\n * @returns {number[]} values of poisson distribution at that point\n */\nfunction poissonDistribution(lambda) /*: ?number[] */ {\n    // Check that lambda is strictly positive\n    if (lambda <= 0) {\n        return undefined;\n    }\n\n    // our current place in the distribution\n    let x = 0;\n    // and we keep track of the current cumulative probability, in\n    // order to know when to stop calculating chances.\n    let cumulativeProbability = 0;\n    // the calculated cells to be returned\n    const cells = [];\n    let factorialX = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] = (Math.exp(-lambda) * Math.pow(lambda, x)) / factorialX;\n        cumulativeProbability += cells[x];\n        x++;\n        factorialX *= x;\n        // when the cumulativeProbability is nearly 1, we've calculated\n        // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nexport default poissonDistribution;\n","import epsilon from \"./epsilon\";\nimport inverseErrorFunction from \"./inverse_error_function\";\n\n/**\n * The [Probit](http://en.wikipedia.org/wiki/Probit)\n * is the inverse of cumulativeStdNormalProbability(),\n * and is also known as the normal quantile function.\n *\n * It returns the number of standard deviations from the mean\n * where the p'th quantile of values can be found in a normal distribution.\n * So, for example, probit(0.5 + 0.6827/2) ≈ 1 because 68.27% of values are\n * normally found within 1 standard deviation above or below the mean.\n *\n * @param {number} p\n * @returns {number} probit\n */\nfunction probit(p) {\n    if (p === 0) {\n        p = epsilon;\n    } else if (p >= 1) {\n        p = 1 - epsilon;\n    }\n    return Math.sqrt(2) * inverseErrorFunction(2 * p - 1);\n}\n\nexport default probit;\n","/**\n * The [product](https://en.wikipedia.org/wiki/Product_(mathematics)) of an array\n * is the result of multiplying all numbers together, starting using one as the multiplicative identity.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} product of all input numbers\n * @example\n * product([1, 2, 3, 4]); // => 24\n */\nfunction product(x) {\n    let value = 1;\n    for (let i = 0; i < x.length; i++) {\n        value *= x[i];\n    }\n    return value;\n}\n\nexport default product;\n","import numericSort from \"./numeric_sort\";\nimport quantileRankSorted from \"./quantile_rank_sorted\";\n\n/**\n * This function returns the quantile in which one would find the given value in\n * the given array. It will copy and sort your array before each run, so\n * if you know your array is already sorted, you should use `quantileRankSorted`\n * instead.\n *\n * @param {Array<number>} x input\n * @returns {number} value value\n * @example\n * quantileRank([4, 3, 1, 2], 3); // => 0.75\n * quantileRank([4, 3, 2, 3, 1], 3); // => 0.7\n * quantileRank([2, 4, 1, 3], 6); // => 1\n * quantileRank([5, 3, 1, 2, 3], 4); // => 0.8\n */\nfunction quantileRank(x, value) {\n    // Cloning and sorting the array\n    const sortedCopy = numericSort(x);\n\n    return quantileRankSorted(sortedCopy, value);\n}\n\nexport default quantileRank;\n","/**\n * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)\n * value of data compared with a function `f`\n * is the sum of the squared differences between the prediction\n * and the actual value.\n *\n * @param {Array<Array<number>>} x input data: this should be doubly-nested\n * @param {Function} func function called on `[i][0]` values within the dataset\n * @returns {number} r-squared value\n * @example\n * var samples = [[0, 0], [1, 1]];\n * var regressionLine = linearRegressionLine(linearRegression(samples));\n * rSquared(samples, regressionLine); // = 1 this line is a perfect fit\n */\nfunction rSquared(x, func) {\n    if (x.length < 2) {\n        return 1;\n    }\n\n    // Compute the average y value for the actual\n    // data set in order to compute the\n    // _total sum of squares_\n    let sum = 0;\n    for (let i = 0; i < x.length; i++) {\n        sum += x[i][1];\n    }\n    const average = sum / x.length;\n\n    // Compute the total sum of squares - the\n    // squared difference between each point\n    // and the average of all points.\n    let sumOfSquares = 0;\n    for (let j = 0; j < x.length; j++) {\n        sumOfSquares += Math.pow(average - x[j][1], 2);\n    }\n\n    // Finally estimate the error: the squared\n    // difference between the estimate and the actual data\n    // value at each point.\n    let err = 0;\n    for (let k = 0; k < x.length; k++) {\n        err += Math.pow(x[k][1] - func(x[k][0]), 2);\n    }\n\n    // As the error grows larger, its ratio to the\n    // sum of squares increases and the r squared\n    // value grows lower.\n    return 1 - err / sumOfSquares;\n}\n\nexport default rSquared;\n","import mean from \"./mean\";\n\n/**\n * [Kurtosis](http://en.wikipedia.org/wiki/Kurtosis) is\n * a measure of the heaviness of a distribution's tails relative to its\n * variance. The kurtosis value can be positive or negative, or even undefined.\n *\n * Implementation is based on Fisher's excess kurtosis definition and uses\n * unbiased moment estimators. This is the version found in Excel and available\n * in several statistical packages, including SAS and SciPy.\n *\n * @param {Array<number>} x a sample of 4 or more data points\n * @returns {number} sample kurtosis\n * @throws {Error} if x has length less than 4\n * @example\n * sampleKurtosis([1, 2, 2, 3, 5]); // => 1.4555765595463122\n */\nfunction sampleKurtosis(x) {\n    const n = x.length;\n\n    if (n < 4) {\n        throw new Error(\"sampleKurtosis requires at least four data points\");\n    }\n\n    const meanValue = mean(x);\n    let tempValue;\n    let secondCentralMoment = 0;\n    let fourthCentralMoment = 0;\n\n    for (let i = 0; i < n; i++) {\n        tempValue = x[i] - meanValue;\n        secondCentralMoment += tempValue * tempValue;\n        fourthCentralMoment += tempValue * tempValue * tempValue * tempValue;\n    }\n\n    return (\n        ((n - 1) / ((n - 2) * (n - 3))) *\n        ((n * (n + 1) * fourthCentralMoment) /\n            (secondCentralMoment * secondCentralMoment) -\n            3 * (n - 1))\n    );\n}\n\nexport default sampleKurtosis;\n","import sampleCorrelation from \"./sample_correlation\";\n\n/**\n * The [rank correlation](https://en.wikipedia.org/wiki/Rank_correlation) is\n * a measure of the strength of monotonic relationship between two arrays\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample rank correlation\n */\nfunction sampleRankCorrelation(x, y) {\n    const xIndexes = x\n        .map((value, index) => [value, index])\n        .sort((a, b) => a[0] - b[0])\n        .map((pair) => pair[1]);\n    const yIndexes = y\n        .map((value, index) => [value, index])\n        .sort((a, b) => a[0] - b[0])\n        .map((pair) => pair[1]);\n\n    // At this step, we have an array of indexes\n    // that map from sorted numbers to their original indexes. We reverse\n    // that so that it is an array of the sorted destination index.\n    const xRanks = Array(xIndexes.length);\n    const yRanks = Array(xIndexes.length);\n    for (let i = 0; i < xIndexes.length; i++) {\n        xRanks[xIndexes[i]] = i;\n        yRanks[yIndexes[i]] = i;\n    }\n\n    return sampleCorrelation(xRanks, yRanks);\n}\n\nexport default sampleRankCorrelation;\n","import mean from \"./mean\";\n\n/**\n * [Skewness](http://en.wikipedia.org/wiki/Skewness) is\n * a measure of the extent to which a probability distribution of a\n * real-valued random variable \"leans\" to one side of the mean.\n * The skewness value can be positive or negative, or even undefined.\n *\n * Implementation is based on the adjusted Fisher-Pearson standardized\n * moment coefficient, which is the version found in Excel and several\n * statistical packages including Minitab, SAS and SPSS.\n *\n * @since 4.1.0\n * @param {Array<number>} x a sample of 3 or more data points\n * @returns {number} sample skewness\n * @throws {Error} if x has length less than 3\n * @example\n * sampleSkewness([2, 4, 6, 3, 1]); // => 0.590128656384365\n */\nfunction sampleSkewness(x) {\n    if (x.length < 3) {\n        throw new Error(\"sampleSkewness requires at least three data points\");\n    }\n\n    const meanValue = mean(x);\n    let tempValue;\n    let sumSquaredDeviations = 0;\n    let sumCubedDeviations = 0;\n\n    for (let i = 0; i < x.length; i++) {\n        tempValue = x[i] - meanValue;\n        sumSquaredDeviations += tempValue * tempValue;\n        sumCubedDeviations += tempValue * tempValue * tempValue;\n    }\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    const besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    const theSampleStandardDeviation = Math.sqrt(\n        sumSquaredDeviations / besselsCorrection\n    );\n\n    const n = x.length;\n    const cubedS = Math.pow(theSampleStandardDeviation, 3);\n\n    return (n * sumCubedDeviations) / ((n - 1) * (n - 2) * cubedS);\n}\n\nexport default sampleSkewness;\n","/**\n * Sampling with replacement is a type of sampling that allows the same\n * item to be picked out of a population more than once.\n *\n * @param {Array<*>} x an array of any kind of value\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} n sampled items from the population\n * @example\n * var values = [1, 2, 3, 4];\n * sampleWithReplacement(values, 2); // returns 2 random values, like [2, 4];\n */\nfunction sampleWithReplacement(x, n, randomSource) {\n    if (x.length === 0) {\n        return [];\n    }\n\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    const length = x.length;\n    const sample = [];\n\n    for (let i = 0; i < n; i++) {\n        const index = Math.floor(randomSource() * length);\n\n        sample.push(x[index]);\n    }\n\n    return sample;\n}\n\nexport default sampleWithReplacement;\n","import max from \"./max\";\nimport silhouette from \"./silhouette\";\n\n/**\n * Calculate the [silhouette metric](https://en.wikipedia.org/wiki/Silhouette_(clustering))\n * for a set of N-dimensional points arranged in groups. The metric is the largest\n * individual silhouette value for the data.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {number} The silhouette metric for the groupings.\n *\n * @example\n * silhouetteMetric([[0.25], [0.75]], [0, 0]); // => 1.0\n */\nfunction silhouetteMetric(points, labels) {\n    const values = silhouette(points, labels);\n    return max(values);\n}\n\nexport default silhouetteMetric;\n","/**\n * When removing a value from a list, one does not have to necessary\n * recompute the mean of the list in linear time. They can instead use\n * this function to compute the new mean by providing the current mean,\n * the number of elements in the list that produced it and the value to remove.\n *\n * @since 3.0.0\n * @param {number} mean current mean\n * @param {number} n number of items in the list\n * @param {number} value the value to remove\n * @returns {number} the new mean\n *\n * @example\n * subtractFromMean(20.5, 6, 53); // => 14\n */\nfunction subtractFromMean(mean, n, value) {\n    return (mean * n - value) / (n - 1);\n}\n\nexport default subtractFromMean;\n","import mean from \"./mean\";\nimport standardDeviation from \"./standard_deviation\";\n\n/**\n * This is to compute [a one-sample t-test](https://en.wikipedia.org/wiki/Student%27s_t-test#One-sample_t-test), comparing the mean\n * of a sample to a known value, x.\n *\n * in this case, we're trying to determine whether the\n * population mean is equal to the value that we know, which is `x`\n * here. Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {number} expectedValue expected value of the population mean\n * @returns {number} value\n * @example\n * tTest([1, 2, 3, 4, 5, 6], 3.385).toFixed(2); // => '0.16'\n */\nfunction tTest(x, expectedValue) {\n    // The mean of the sample\n    const sampleMean = mean(x);\n\n    // The standard deviation of the sample\n    const sd = standardDeviation(x);\n\n    // Square root the length of the sample\n    const rootN = Math.sqrt(x.length);\n\n    // returning the t value\n    return (sampleMean - expectedValue) / (sd / rootN);\n}\n\nexport default tTest;\n","import mean from \"./mean\";\nimport sampleVariance from \"./sample_variance\";\n\n/**\n * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test).\n * Tests whether \"mean(X)-mean(Y) = difference\", (\n * in the most common case, we often have `difference == 0` to test if two samples\n * are likely to be taken from populations with the same mean value) with\n * no prior knowledge on standard deviations of both samples\n * other than the fact that they have the same standard deviation.\n *\n * Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * `diff` can be omitted if it equals 0.\n *\n * [This is used to reject](https://en.wikipedia.org/wiki/Exclusion_of_the_null_hypothesis)\n * a null hypothesis that the two populations that have been sampled into\n * `sampleX` and `sampleY` are equal to each other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @param {number} [difference=0]\n * @returns {number|null} test result\n *\n * @example\n * tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); // => -2.1908902300206643\n */\nfunction tTestTwoSample(sampleX, sampleY, difference) {\n    const n = sampleX.length;\n    const m = sampleY.length;\n\n    // If either sample doesn't actually have any values, we can't\n    // compute this at all, so we return `null`.\n    if (!n || !m) {\n        return null;\n    }\n\n    // default difference (mu) is zero\n    if (!difference) {\n        difference = 0;\n    }\n\n    const meanX = mean(sampleX);\n    const meanY = mean(sampleY);\n    const sampleVarianceX = sampleVariance(sampleX);\n    const sampleVarianceY = sampleVariance(sampleY);\n\n    if (\n        typeof meanX === \"number\" &&\n        typeof meanY === \"number\" &&\n        typeof sampleVarianceX === \"number\" &&\n        typeof sampleVarianceY === \"number\"\n    ) {\n        const weightedVariance =\n            ((n - 1) * sampleVarianceX + (m - 1) * sampleVarianceY) /\n            (n + m - 2);\n\n        return (\n            (meanX - meanY - difference) /\n            Math.sqrt(weightedVariance * (1 / n + 1 / m))\n        );\n    }\n}\n\nexport default tTestTwoSample;\n","/**\n * This function calculates the Wilcoxon rank sum statistic for the first sample\n * with respect to the second. The Wilcoxon rank sum test is a non-parametric\n * alternative to the t-test which is equivalent to the\n * [Mann-Whitney U test](https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test).\n * The statistic is calculated by pooling all the observations together, ranking them,\n * and then summing the ranks associated with one of the samples. If this rank sum is\n * sufficiently large or small we reject the hypothesis that the two samples come\n * from the same distribution in favor of the alternative that one is shifted with\n * respect to the other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @returns {number} rank sum for sampleX\n *\n * @example\n * wilcoxonRankSum([1, 4, 8], [9, 12, 15]); // => 6\n */\nfunction wilcoxonRankSum(sampleX, sampleY) {\n    if (!sampleX.length || !sampleY.length) {\n        throw new Error(\"Neither sample can be empty\");\n    }\n\n    const pooledSamples = sampleX\n        .map((x) => ({ label: \"x\", value: x }))\n        .concat(sampleY.map((y) => ({ label: \"y\", value: y })))\n        .sort((a, b) => a.value - b.value);\n\n    for (let rank = 0; rank < pooledSamples.length; rank++) {\n        pooledSamples[rank].rank = rank;\n    }\n\n    let tiedRanks = [pooledSamples[0].rank];\n    for (let i = 1; i < pooledSamples.length; i++) {\n        if (pooledSamples[i].value === pooledSamples[i - 1].value) {\n            tiedRanks.push(pooledSamples[i].rank);\n            if (i === pooledSamples.length - 1) {\n                replaceRanksInPlace(pooledSamples, tiedRanks);\n            }\n        } else if (tiedRanks.length > 1) {\n            replaceRanksInPlace(pooledSamples, tiedRanks);\n        } else {\n            tiedRanks = [pooledSamples[i].rank];\n        }\n    }\n\n    function replaceRanksInPlace(pooledSamples, tiedRanks) {\n        const average = (tiedRanks[0] + tiedRanks[tiedRanks.length - 1]) / 2;\n        for (let i = 0; i < tiedRanks.length; i++) {\n            pooledSamples[tiedRanks[i]].rank = average;\n        }\n    }\n\n    let rankSum = 0;\n\n    for (let i = 0; i < pooledSamples.length; i++) {\n        const sample = pooledSamples[i];\n        if (sample.label === \"x\") {\n            rankSum += sample.rank + 1;\n        }\n    }\n\n    return rankSum;\n}\n\nexport default wilcoxonRankSum;\n","/**\n * The [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score).\n *\n * The standard score is the number of standard deviations an observation\n * or datum is above or below the mean. Thus, a positive standard score\n * represents a datum above the mean, while a negative standard score\n * represents a datum below the mean. It is a dimensionless quantity\n * obtained by subtracting the population mean from an individual raw\n * score and then dividing the difference by the population standard\n * deviation.\n *\n * The z-score is only defined if one knows the population parameters;\n * if one only has a sample set, then the analogous computation with\n * sample mean and sample standard deviation yields the\n * Student's t-statistic.\n *\n * @param {number} x\n * @param {number} mean\n * @param {number} standardDeviation\n * @return {number} z score\n * @example\n * zScore(78, 80, 5); // => -0.4\n */\nfunction zScore(x, mean, standardDeviation) {\n    return (x - mean) / standardDeviation;\n}\n\nexport default zScore;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sum_unsafe = function (subset, measures) {\n    var sums = {};\n    measures.forEach(function (mea) {\n        sums[mea] = 0;\n    });\n    var _loop_1 = function (i, len) {\n        measures.forEach(function (mea) {\n            sums[mea] += subset[i][mea];\n        });\n    };\n    for (var i = 0, len = subset.length; i < len; i++) {\n        _loop_1(i, len);\n    }\n    return sums;\n};\nexports.sum = function (subset, measures) {\n    var sums = {};\n    measures.forEach(function (mea) {\n        sums[mea] = 0;\n    });\n    var _loop_2 = function (i, len) {\n        measures.forEach(function (mea) {\n            sums[mea] += Number(subset[i][mea]) || 0;\n        });\n    };\n    for (var i = 0, len = subset.length; i < len; i++) {\n        _loop_2(i, len);\n    }\n    return sums;\n};\nexports.count = function (subset, MEASURES) {\n    var cnts = {};\n    MEASURES.forEach(function (mea) {\n        cnts[mea] = 0;\n    });\n    for (var i = 0, len = subset.length; i < len; i++) {\n        MEASURES.forEach(function (mea) {\n            cnts[mea]++;\n        });\n    }\n    return cnts;\n};\nexports.mean = function (subset, measures) {\n    var sums = {};\n    measures.forEach(function (mea) {\n        sums[mea] = 0;\n    });\n    var _loop_3 = function (i, len) {\n        measures.forEach(function (mea) {\n            sums[mea] += Number(subset[i][mea]) || 0;\n        });\n    };\n    for (var i = 0, len = subset.length; i < len; i++) {\n        _loop_3(i, len);\n    }\n    measures.forEach(function (mea) {\n        sums[mea] /= subset.length;\n    });\n    return sums;\n};\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./core/index\");\n// import { JsonRecord } from './types';\nvar transform_1 = require(\"./utils/transform\");\nvar aggregation_1 = require(\"./utils/aggregation\");\nvar operatorMap = {\n    'sum': aggregation_1.sum_unsafe,\n    'mean': aggregation_1.mean,\n    'count': aggregation_1.count,\n};\nfunction copyDataSource(data) {\n    return data.map(function (row) {\n        return __assign({}, row);\n    });\n}\nfunction aggregate(props) {\n    var dimensions = props.dimensions, measures = props.measures, asFields = props.asFields, operator = props.operator, dataSource = props.dataSource;\n    var data = [];\n    var cube = createCube({\n        type: 'moment',\n        aggFunc: operatorMap[operator] || aggregation_1.count,\n        dimensions: dimensions,\n        measures: measures,\n        factTable: dataSource\n    });\n    var table = transform_1.tree2Table({ dimensions: dimensions, measures: measures, cube: cube });\n    table.forEach(function (row) {\n        asFields.forEach(function (as, i) {\n            row[as] = row[measures[i]];\n        });\n    });\n    return table;\n}\nfunction createCube(_a) {\n    var type = _a.type, _b = _a.aggFunc, aggFunc = _b === void 0 ? aggregation_1.count : _b, _c = _a.factTable, factTable = _c === void 0 ? [] : _c, _d = _a.dimensions, dimensions = _d === void 0 ? [] : _d, _e = _a.measures, measures = _e === void 0 ? [] : _e;\n    switch (type) {\n        case \"period\":\n            return new index_1.periodCube({\n                aggFunc: aggFunc,\n                factTable: factTable,\n                dimensions: dimensions,\n                measures: measures\n            });\n        case \"moment\":\n            return new index_1.momentCube({\n                aggFunc: aggFunc,\n                factTable: factTable,\n                dimensions: dimensions,\n                measures: measures\n            });\n        default:\n            return new index_1.momentCube({\n                aggFunc: aggFunc,\n                factTable: factTable,\n                dimensions: dimensions,\n                measures: measures\n            });\n    }\n}\nexports.createCube = createCube;\nexports.default = aggregate;\n__export(require(\"./utils/aggregation\"));\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar periodCube_1 = require(\"./periodCube\");\nexports.periodCube = periodCube_1.default;\nvar momentCube_1 = require(\"./momentCube\");\nexports.momentCube = momentCube_1.default;\n","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node = /** @class */ (function () {\n    function Node(aggFunc) {\n        this.children = new Map();\n        this._rawData = [];\n        this.aggFunc = aggFunc;\n        this.cache = false;\n    }\n    Node.prototype.push = function () {\n        var _a;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        (_a = this._rawData).push.apply(_a, __spread(params));\n    };\n    Node.prototype.aggData = function (measures) {\n        if (measures === void 0) { measures = []; }\n        if (!this.cache) {\n            this._aggData = this.aggFunc(this.rawData, measures);\n            this.cache = true;\n        }\n        return this._aggData;\n    };\n    Node.prototype.clearCache = function () {\n        this.cache = false;\n    };\n    Object.defineProperty(Node.prototype, \"rawData\", {\n        get: function () {\n            var e_1, _a;\n            if (!this.cache) {\n                if (this.children.size !== 0) {\n                    var children = this.children.values();\n                    var rawData = [];\n                    try {\n                        for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n                            var child = children_1_1.value;\n                            var i = void 0;\n                            var data = child.rawData;\n                            var len = data.length;\n                            for (i = 0; i < len; i++) {\n                                rawData.push(data[i]);\n                            }\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                    this._rawData = rawData;\n                }\n                this.cache = true;\n            }\n            return this._rawData;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Node.prototype.getNode = function (dimensions) {\n        var search = function (node, level) {\n            var e_2, _a;\n            if (level === dimensions.length) {\n                return node;\n            }\n            var children = node.children.entries();\n            try {\n                for (var children_2 = __values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {\n                    var _b = __read(children_2_1.value, 2), childName = _b[0], child = _b[1];\n                    if (childName === dimensions[level]) {\n                        return search(child, level + 1);\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (children_2_1 && !children_2_1.done && (_a = children_2.return)) _a.call(children_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            return null;\n        };\n        return search(this, 0);\n    };\n    return Node;\n}());\nvar periodCube = /** @class */ (function () {\n    function periodCube(props) {\n        this.aggFunc = props.aggFunc;\n        this.factTable = props.factTable;\n        this.dimensions = props.dimensions;\n        this.measures = props.measures;\n    }\n    periodCube.prototype.get = function (dimensions) {\n        var _a = this, tree = _a.tree, aggFunc = _a.aggFunc, measures = _a.measures;\n        var search = function (node, level) {\n            var e_3, _a;\n            if (level === dimensions.length) {\n                return node.aggData(measures);\n            }\n            var children = node.children.entries();\n            try {\n                for (var children_3 = __values(children), children_3_1 = children_3.next(); !children_3_1.done; children_3_1 = children_3.next()) {\n                    var _b = __read(children_3_1.value, 2), childName = _b[0], child = _b[1];\n                    if (childName === dimensions[level]) {\n                        return search(child, level + 1);\n                    }\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (children_3_1 && !children_3_1.done && (_a = children_3.return)) _a.call(children_3);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n            return false;\n        };\n        return search(tree, 0);\n    };\n    periodCube.prototype.getNode = function (dimensions) {\n        var tree = this.tree;\n        return tree.getNode(dimensions);\n    };\n    periodCube.prototype.buildTree = function () {\n        var tree = new Node(this.aggFunc);\n        var len = this.factTable.length, i;\n        for (i = 0; i < len; i++) {\n            this.insertNode(this.factTable[i], tree, 0);\n        }\n        this.tree = tree;\n        return tree;\n    };\n    periodCube.prototype.insertNode = function (record, node, level) {\n        node.push(record);\n        node.cache = false;\n        if (level < this.dimensions.length) {\n            var member = record[this.dimensions[level]];\n            if (!node.children.has(member)) {\n                node.children.set(member, new Node(this.aggFunc));\n            }\n            this.insertNode(record, node.children.get(member), level + 1);\n        }\n    };\n    periodCube.prototype.aggTree = function (node) {\n        var e_4, _a;\n        if (node === void 0) { node = this.tree; }\n        var children = node.children.values();\n        try {\n            for (var children_4 = __values(children), children_4_1 = children_4.next(); !children_4_1.done; children_4_1 = children_4.next()) {\n                var child = children_4_1.value;\n                this.aggTree(child);\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (children_4_1 && !children_4_1.done && (_a = children_4.return)) _a.call(children_4);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        node.aggData(this.measures);\n        return node;\n    };\n    periodCube.prototype.aggNode = function (node) {\n        var e_5, _a;\n        if (node === void 0) { node = this.tree; }\n        var children = node.children.values();\n        try {\n            for (var children_5 = __values(children), children_5_1 = children_5.next(); !children_5_1.done; children_5_1 = children_5.next()) {\n                var child = children_5_1.value;\n                this.aggTree(child);\n            }\n        }\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n        finally {\n            try {\n                if (children_5_1 && !children_5_1.done && (_a = children_5.return)) _a.call(children_5);\n            }\n            finally { if (e_5) throw e_5.error; }\n        }\n        node.aggData(this.measures);\n        return node;\n    };\n    return periodCube;\n}());\nexports.default = periodCube;\n","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node = /** @class */ (function () {\n    function Node() {\n        this.children = new Map();\n        this.rawData = [];\n    }\n    Node.prototype.push = function () {\n        var _a;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        (_a = this.rawData).push.apply(_a, __spread(params));\n    };\n    Node.prototype.aggData = function (aggFunc, measures) {\n        if (measures === void 0) { measures = []; }\n        this._aggData = aggFunc(this.rawData, measures);\n        return this._aggData;\n    };\n    Node.prototype.getNode = function (dimensions) {\n        var search = function (node, level) {\n            var e_1, _a;\n            if (level === dimensions.length) {\n                return node;\n            }\n            var children = node.children.entries();\n            try {\n                for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n                    var _b = __read(children_1_1.value, 2), childName = _b[0], child = _b[1];\n                    if (childName === dimensions[level]) {\n                        return search(child, level + 1);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return null;\n        };\n        return search(this, 0);\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar momentCube = /** @class */ (function () {\n    function momentCube(props) {\n        this.aggFunc = props.aggFunc;\n        this.factTable = props.factTable;\n        this.dimensions = props.dimensions;\n        this.measures = props.measures;\n        this.buildTree();\n        this.aggTree();\n    }\n    momentCube.prototype.get = function (dimensions) {\n        var _a = this, tree = _a.tree, aggFunc = _a.aggFunc, measures = _a.measures;\n        var search = function (node, level) {\n            var e_2, _a;\n            if (level === dimensions.length) {\n                return node.aggData(aggFunc, measures);\n            }\n            var children = node.children.entries();\n            try {\n                for (var children_2 = __values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {\n                    var _b = __read(children_2_1.value, 2), childName = _b[0], child = _b[1];\n                    if (childName === dimensions[level]) {\n                        return search(child, level + 1);\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (children_2_1 && !children_2_1.done && (_a = children_2.return)) _a.call(children_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            return false;\n        };\n        return search(tree, 0);\n    };\n    momentCube.prototype.getNode = function (dimensions) {\n        var tree = this.tree;\n        return tree.getNode(dimensions);\n    };\n    momentCube.prototype.setData = function (props) {\n        var _a = props.aggFunc, aggFunc = _a === void 0 ? this.aggFunc : _a, _b = props.factTable, factTable = _b === void 0 ? this.factTable : _b, _c = props.dimensions, dimensions = _c === void 0 ? this.dimensions : _c, _d = props.measures, measures = _d === void 0 ? this.measures : _d;\n        if (dimensions !== this.dimensions || factTable !== this.factTable) {\n            this.dimensions = dimensions;\n            this.factTable = factTable;\n            this.measures = measures;\n            this.aggFunc = aggFunc;\n            this.buildTree();\n            this.aggTree();\n        }\n        else if (measures !== this.measures || aggFunc !== this.aggFunc) {\n            this.measures = measures;\n            this.aggFunc = aggFunc;\n            this.aggTree();\n        }\n    };\n    momentCube.prototype.buildTree = function () {\n        var tree = new Node();\n        var len = this.factTable.length, i;\n        for (i = 0; i < len; i++) {\n            this.insertNode(this.factTable[i], tree, 0);\n        }\n        this.tree = tree;\n        return tree;\n    };\n    momentCube.prototype.insertNode = function (record, node, level) {\n        if (level === this.dimensions.length) {\n            node.push(record);\n        }\n        else {\n            var member = record[this.dimensions[level]];\n            if (!node.children.has(member)) {\n                node.children.set(member, new Node());\n            }\n            this.insertNode(record, node.children.get(member), level + 1);\n        }\n    };\n    momentCube.prototype.aggTree = function (node) {\n        var e_3, _a;\n        if (node === void 0) { node = this.tree; }\n        if (node.children.size > 0) {\n            node.rawData = [];\n            var children = node.children.values();\n            try {\n                for (var children_3 = __values(children), children_3_1 = children_3.next(); !children_3_1.done; children_3_1 = children_3.next()) {\n                    var child = children_3_1.value;\n                    var i = void 0;\n                    var data = this.aggTree(child).rawData;\n                    var len = data.length;\n                    for (i = 0; i < len; i++) {\n                        node.rawData.push(data[i]);\n                    }\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (children_3_1 && !children_3_1.done && (_a = children_3.return)) _a.call(children_3);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        }\n        node.aggData(this.aggFunc, this.measures);\n        return node;\n    };\n    return momentCube;\n}());\nexports.default = momentCube;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction tree2Table(props) {\n    var dimensions = props.dimensions, measures = props.measures, cube = props.cube;\n    var aggFunc = cube.aggFunc;\n    var table = [];\n    function dfs(node, record, level) {\n        var e_1, _a, _b;\n        if (node.children.size === 0) {\n            var values = node._aggData;\n            table.push(__assign(__assign({}, record), values));\n            return;\n        }\n        try {\n            for (var _c = __values(node.children.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var _e = __read(_d.value, 2), childName = _e[0], child = _e[1];\n                var r = __assign(__assign({}, record), (_b = {}, _b[dimensions[level]] = childName, _b));\n                dfs(child, r, level + 1);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    }\n    dfs(cube.tree, {}, 0);\n    return table;\n}\nexports.tree2Table = tree2Table;\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","/**\n * chiSquared implementation using adjacency list(spare graph), which is ableto handle fields with large cardinality.\n * @param nestTree hash tree with depth = 2, represents the relationship between var x and var y.\n * @param xSet value set of var x.\n * @param ySet value set of var y.\n */\nexport function chiSquared(nestTree, xSet, ySet) {\n    if (typeof nestTree === 'undefined' || typeof xSet === 'undefined' || typeof ySet === 'undefined') {\n        return 0;\n    }\n    let rowSums = new Map();\n    let colSums = new Map();\n    let totalSum = 0;\n    for (let x of xSet) {\n        rowSums.set(x, 0);\n    }\n    for (let y of ySet) {\n        colSums.set(y, 0);\n    }\n    for (let [x, node] of nestTree) {\n        for (let [y, counter] of node) {\n            rowSums.set(x, rowSums.get(x) + counter);\n            colSums.set(y, colSums.get(y) + counter);\n            totalSum += counter;\n        }\n    }\n    let chis = 0;\n    for (let [x, node] of nestTree) {\n        for (let [y, observed] of node) {\n            let expected = rowSums.get(x) * colSums.get(y) / totalSum;\n            chis += (observed - expected) ** 2 / expected;\n        }\n    }\n    return chis;\n}\n/**\n * crammersV implementation using adjacency list(spare graph), which is ableto handle fields with large cardinality.\n * @param dataSource array of records.\n * @param fieldX field key of var X.\n * @param fieldY field key of varY.\n */\nexport const crammersV = (dataSource, fieldX, fieldY) => {\n    const xSet = new Set();\n    const ySet = new Set();\n    const nestTree = new Map();\n    let len = dataSource.length;\n    for (let i = 0; i < len; i++) {\n        let record = dataSource[i];\n        xSet.add(record[fieldX]);\n        ySet.add(record[fieldY]);\n        if (!nestTree.has(record[fieldX])) {\n            nestTree.set(record[fieldX], new Map());\n        }\n        let node = nestTree.get(record[fieldX]);\n        if (!node.has(record[fieldY])) {\n            node.set(record[fieldY], 0);\n        }\n        node.set(record[fieldY], node.get(record[fieldY]) + 1);\n    }\n    const chis = chiSquared(nestTree, xSet, ySet);\n    const V = Math.sqrt(chis / (dataSource.length * Math.min(xSet.size - 1, ySet.size - 1)));\n    return V;\n};\nexport function chiSquaredFromDataSource(dataSource, fieldX, fieldY) {\n    const xSet = new Set();\n    const ySet = new Set();\n    const nestTree = new Map();\n    let len = dataSource.length;\n    for (let i = 0; i < len; i++) {\n        let record = dataSource[i];\n        xSet.add(record[fieldX]);\n        ySet.add(record[fieldY]);\n        if (!nestTree.has(record[fieldX])) {\n            nestTree.set(record[fieldX], new Map());\n        }\n        let node = nestTree.get(record[fieldX]);\n        if (!node.has(record[fieldY])) {\n            node.set(record[fieldY], 0);\n        }\n        node.set(record[fieldY], node.get(record[fieldY]) + 1);\n    }\n    const chis = chiSquared(nestTree, xSet, ySet);\n    return chis;\n}\n/**\n * Pearson correlation coefficient\n * @param dataSource array of records\n * @param fieldX field key of var X.\n * @param fieldY field key of var Y.\n */\nexport const pearsonCC = (dataSource, fieldX, fieldY) => {\n    let r = 0;\n    let xBar = sum(dataSource.map(row => row[fieldX])) / dataSource.length;\n    let yBar = sum(dataSource.map(row => row[fieldY])) / dataSource.length;\n    r = sum(dataSource.map(row => (row[fieldX] - xBar) * (row[fieldY] - yBar))) /\n        Math.sqrt(sum(dataSource.map(row => Math.pow(row[fieldX] - xBar, 2))) * sum(dataSource.map(row => Math.pow(row[fieldY] - yBar, 2))));\n    return r;\n};\nfunction sum(arr) {\n    let s = 0;\n    for (let i = 0, len = arr.length; i < len; i++) {\n        // if (typeof dataSource[i][field])\n        s += arr[i];\n    }\n    return s;\n}\n// can be used for test. do not delete these code. it is implementation with adj matrix. can be faster in dense graph cases.\n// export function crammersV(dataSource: DataSource, fieldX: string, fieldY: string): number {\n//   const xSet = new Set(dataSource.map(d => d[fieldX]))\n//   const ySet = new Set(dataSource.map(d => d[fieldY]))\n//   const xMembers = [...xSet];\n//   const yMembers = [...ySet];\n//   let xDict = {};\n//   let yDict = {};\n//   for (let i = 0; i < xMembers.length; i++) {\n//     xDict[xMembers[i]] = i;\n//   }\n//   for (let i = 0; i < yMembers.length; i++) {\n//     yDict[yMembers[i]] = i;\n//   }\n//   // let matrix: number[][] = xMembers.map(x => yMembers.map(y => 0));\n//   let matrix: number[][] = [];\n//   for (let  i = 0; i < xMembers.length; i++) {\n//     matrix.push([]);\n//     for (let j = 0; j < yMembers.length; j++) {\n//       matrix[i].push(0);\n//     }\n//   }\n//   for (let record of dataSource) {\n//     matrix[xDict[record[fieldX]]][yDict[record[fieldY]]]++;\n//   }\n//   const chis = chiSquared(matrix);\n//   const V = Math.sqrt(chis / (dataSource.length * Math.min(xMembers.length - 1, yMembers.length - 1)))\n//   return V;\n// }\n// export function chiSquared(matrix: number[][] = [[]]): number {\n//   let rowSums = matrix.map(m => 0);\n//   let colSums = matrix[0].map(m => 0);\n//   let totalSum = 0;\n//   for (let i = 0; i < matrix.length; i++) {\n//     for (let j = 0; j < matrix[i].length; j++) {\n//       rowSums[i] += matrix[i][j];\n//       colSums[j] += matrix[i][j];\n//       totalSum += matrix[i][j];\n//     }\n//   }\n//   let chis = 0;\n//   for (let i = 0; i < matrix.length; i++) {\n//     for (let j = 0; j < matrix[i].length; j++) {\n//       let observed = matrix[i][j];\n//       let expected = rowSums[i] * colSums[j] / totalSum;\n//       chis += (observed - expected) ** 2 / expected;\n//     }\n//   }\n//   return chis;\n// }\n","export function linearMapPositive(arr) {\n    let min = Math.min(...arr);\n    return arr.map(a => a - min + 1);\n}\nexport function mapPositive(arr) {\n    return arr.map(a => Math.abs(a)).filter(a => a !== 0);\n}\nexport function getCombination(elements, start = 1, end = elements.length) {\n    let ans = [];\n    const combine = (step, set, size) => {\n        if (set.length === size) {\n            ans.push([...set]);\n            return;\n        }\n        if (step >= elements.length) {\n            return;\n        }\n        combine(step + 1, [...set, elements[step]], size);\n        combine(step + 1, set, size);\n    };\n    for (let i = start; i <= end; i++) {\n        combine(0, [], i);\n    }\n    return ans;\n}\nexport function normalize(frequencyList) {\n    let sum = 0;\n    for (let f of frequencyList) {\n        sum += f;\n    }\n    return frequencyList.map(f => f / sum);\n}\nexport const entropy = (probabilityList) => {\n    let sum = 0;\n    for (let p of probabilityList) {\n        sum += p * Math.log2(p);\n    }\n    return -sum;\n};\nexport const gini = (probabilityList) => {\n    let sum = 0;\n    for (let p of probabilityList) {\n        sum += p * (1 - p);\n    }\n    return sum;\n};\nexport function getRangeBy(dataSource, by) {\n    let maxValue = -Infinity;\n    let minValue = Infinity;\n    for (let row of dataSource) {\n        maxValue = Math.max(row[by], maxValue);\n        minValue = Math.min(row[by], minValue);\n    }\n    return [minValue, maxValue];\n}\n","export class oneDLinearRegression {\n    constructor(dataSource, X, Y) {\n        this.dataSource = dataSource;\n        this.X = X;\n        this.Y = Y;\n        this.normalizedDataSource = dataSource;\n    }\n    normalizeDimensions(dimensions) {\n        this.normalizedDataSource = [];\n        this.valueSets = [];\n        dimensions.forEach(() => {\n            this.valueSets.push(new Map());\n        });\n        this.dataSource.forEach(record => {\n            dimensions.forEach((dim, index) => {\n                let value = (record[dim] || 'others').toString();\n                if (!this.valueSets[index].has(value)) {\n                    this.valueSets[index].set(value, this.valueSets[index].size);\n                }\n            });\n        });\n        this.dataSource.forEach(record => {\n            let normalizedRecord = this.normalizeRecord(record, dimensions);\n            this.normalizedDataSource.push(normalizedRecord);\n        });\n        return this.normalizedDataSource;\n    }\n    normalizeRecord(record, dimensions) {\n        let normalizedRecord = {};\n        Object.keys(record).forEach(mea => {\n            normalizedRecord[mea] = record[mea];\n        });\n        dimensions.forEach((dim, index) => {\n            let value = (record[dim] || 'others').toString();\n            normalizedRecord[dim] = this.valueSets[index].get(value);\n        });\n        return normalizedRecord;\n    }\n    mean() {\n        let meanX = 0;\n        let meanY = 0;\n        if (this.normalizedDataSource.length === 0)\n            return [meanX, meanY];\n        this.normalizedDataSource.forEach((record, index) => {\n            meanX += record[this.X];\n            meanY += record[this.Y];\n        });\n        meanX /= this.normalizedDataSource.length;\n        meanY /= this.normalizedDataSource.length;\n        return [meanX, meanY];\n    }\n    getRegressionEquation() {\n        if (this.normalizedDataSource.length === 0)\n            return [0, 0];\n        const [meanX, meanY] = this.mean();\n        let beta = 0;\n        let alpha = 0;\n        let numerator = 0;\n        let denominator = 0;\n        this.normalizedDataSource.forEach(record => {\n            numerator += (record[this.X] - meanX) * (record[this.Y] - meanY);\n            denominator += (record[this.X] - meanX) ** 2;\n        });\n        beta = numerator / denominator;\n        alpha = meanY - meanX * beta;\n        return [alpha, beta];\n    }\n    r_squared() {\n        const [, meanY] = this.mean();\n        const [alpha, beta] = this.getRegressionEquation();\n        let SSR = 0;\n        let SST = 0;\n        this.normalizedDataSource.forEach(record => {\n            let x = record[this.X];\n            let y = record[this.Y];\n            let yHat = x * beta + alpha;\n            SSR += (yHat - meanY) ** 2;\n            SST += (y - meanY) ** 2;\n        });\n        return SSR / SST;\n    }\n    cumulativeLogisticDistribution(x) {\n        const lambda = 2;\n        const mu = 0.2;\n        return 1 / (1 + Math.pow(Math.E, -(x - mu) / lambda));\n    }\n    pValue() {\n        const [, beta] = this.getRegressionEquation();\n        const value = this.cumulativeLogisticDistribution(Math.abs(beta));\n        if (value > 0.5) {\n            return 2 * (1 - value);\n        }\n        else {\n            return 2 * value;\n        }\n    }\n    significance() {\n        let r_squared = this.r_squared();\n        let p_value = this.pValue();\n        return r_squared * (1 - p_value);\n    }\n}\n","export const CHANNEL = {\n    maxDimensionNumber: 8,\n    maxMeasureNumber: 6\n};\nexport const EULER = 0.5772156649;\nexport const PERCENT_THRESHOLD_AS_UNIQUE_INDEX = 0.95;\nexport const DOMMAIN_SIZE_THRESHOLD_MAYBE_DROP = 40;\nexport const DEFAULT_BIN_NUM = 8;\nexport const BIN_NUM_FOR_ANALYTIC = DEFAULT_BIN_NUM * 2;\nexport const VERSION = '0.7.5';\n","import { min, max, sum, mean } from 'simple-statistics';\nimport { distMergeBy, sumByCol } from './aggregators';\nconst SPLITOR = '_join_';\nconst count = function (x) {\n    return x.length;\n};\nexport const SFMapper = {\n    sum,\n    max,\n    mean,\n    min,\n    count\n};\nexport function getAggregator(op) {\n    const func = SFMapper[op] || sum;\n    return func;\n}\nexport function groupBy(rows, by) {\n    const groups = new Map();\n    for (let record of rows) {\n        const key = by.map((d) => record[d]).join(SPLITOR);\n        if (!groups.has(key)) {\n            groups.set(key, []);\n        }\n        groups.get(key).push(record);\n    }\n    return groups;\n}\nexport function simpleAggregate(props) {\n    const { dataSource, dimensions, measures, ops } = props;\n    const groups = groupBy(dataSource, dimensions);\n    const result = [];\n    for (let [key, group] of groups) {\n        const aggs = {};\n        measures.forEach((mea, meaIndex) => {\n            const opFunc = getAggregator(ops[meaIndex]);\n            aggs[mea] = opFunc(group.map(r => r[mea]));\n        });\n        const dimValues = key.split(SPLITOR);\n        dimensions.forEach((dim, dimIndex) => {\n            aggs[dim] = dimValues[dimIndex];\n        });\n        result.push(aggs);\n    }\n    return result;\n}\nexport function stdAggregate(props) {\n    const { dataSource, dimensions, measures, ops } = props;\n    const groups = groupBy(dataSource, dimensions);\n    const result = [];\n    for (let [key, group] of groups) {\n        const aggs = {\n            groupDict: {},\n            stat: {}\n        };\n        measures.forEach((mea, meaIndex) => {\n            aggs.stat[mea] = {};\n            ops.forEach(op => {\n                const opFunc = getAggregator(op);\n                aggs.stat[mea][op] = opFunc(group.map((r) => r[mea]));\n            });\n        });\n        const dimValues = key.split(SPLITOR);\n        dimensions.forEach((dim, dimIndex) => {\n            aggs.groupDict[dim] = dimValues[dimIndex];\n        });\n        result.push(aggs);\n    }\n    return result;\n}\nexport function getAggHashKey(values) {\n    return values.join(SPLITOR);\n}\nfunction cuboidStateGroupBy(state, by) {\n    const groups = new Map();\n    for (let record of state) {\n        const key = by.map((d) => record.groupDict[d]).join(SPLITOR);\n        if (!groups.has(key)) {\n            groups.set(key, []);\n        }\n        groups.get(key).push(record);\n    }\n    return groups;\n}\nexport function stdAggregateFromCuboid(props) {\n    const { cuboidState, dimensions, measures, ops } = props;\n    const groups = cuboidStateGroupBy(cuboidState, dimensions);\n    const result = [];\n    // TODO: need a formal solution for distributive\\algebraic\\holistic aggregators.\n    const generalOpNames = ops.filter(op => !(['sum', 'count', 'mean', 'dist'].includes(op)));\n    const generalOps = generalOpNames.map(opName => getAggregator(opName));\n    for (let [key, group] of groups) {\n        const aggs = {\n            groupDict: {},\n            stat: {}\n        };\n        for (let meaIndex = 0; meaIndex < measures.length; meaIndex++) {\n            const mea = measures[meaIndex];\n            aggs.stat[mea] = {};\n            generalOps.forEach((op, opIndex) => {\n                const opName = generalOpNames[opIndex];\n                aggs.stat[mea][opName] = op(group.map((r) => r.stat[mea][opName]));\n            });\n            // 讨论：描述的简洁性 vs 性能\n            aggs.stat[mea][\"sum\"] = sumByCol(group, mea, 'sum');\n            aggs.stat[mea][\"count\"] = sumByCol(group, mea, 'count');\n            // aggs[mea][\"sum\"] = getAggregator('sum')(group.map((r) => r[mea][\"sum\"]));\n            // aggs[mea][\"count\"] = getAggregator('sum')(group.map((r) => r[mea]['count']));\n            aggs.stat[mea][\"mean\"] = aggs.stat[mea]['sum'] / aggs.stat[mea]['count'];\n            aggs.stat[mea]['dist'] = distMergeBy(group, mea, 'dist');\n        }\n        const dimValues = key.split(SPLITOR);\n        for (let dimIndex = 0; dimIndex < dimensions.length; dimIndex++) {\n            aggs.groupDict[dimensions[dimIndex]] = dimValues[dimIndex];\n        }\n        result.push(aggs);\n    }\n    return result;\n}\n","export const TopKSingleField = 6;\nexport const TopKView = 15;\nexport const Depth = 4;\nexport const VisualLimit = 8;\nexport const TopKPercentField = 0.8;\nexport const CrammersVThreshold = 0.3;\nexport const PearsonCorrelation = {\n    strong: 0.5,\n    weak: 0.3\n};\n","/**\n *\n * @param matrix adjmatrix\n */\nfunction turnAdjMatrix2List(matrix) {\n    // only for the special matrix here(corelational matrix)\n    let edges = [];\n    for (let i = 0; i < matrix.length; i++) {\n        for (let j = i + 1; j < matrix[i].length; j++) {\n            edges.push([[i, j], Math.abs(matrix[i][j])]);\n        }\n    }\n    return edges;\n}\nfunction find(parents, n) {\n    return parents[n] === n ? n : parents[n] = find(parents, parents[n]);\n}\nfunction union(parents, n1, n2) {\n    let p1 = find(parents, n1);\n    let p2 = find(parents, n2);\n    parents[p1] = p2;\n    // I'm too tired. this is just a tmp lazy solution.... will be fixed later.\n    // may check and prove whether it's necessary.\n    find(parents, n1);\n    find(parents, n2);\n}\nfunction findWithEffect(parents, sizes, n) {\n    if (parents[n] === n) {\n        return n;\n    }\n    parents[n] = findWithEffect(parents, sizes, parents[n]);\n    sizes[n] = sizes[parents[n]];\n    return parents[n];\n}\nfunction unionWithEffect(parents, sizes, n1, n2) {\n    let p1 = findWithEffect(parents, sizes, n1);\n    let p2 = findWithEffect(parents, sizes, n2);\n    let size1 = sizes[p1];\n    let size2 = sizes[p2];\n    parents[p1] = p2;\n    sizes[p1] = sizes[p2] = size1 + size2;\n    findWithEffect(parents, sizes, n1);\n    findWithEffect(parents, sizes, n2);\n}\n/**\n * maxiumn spanning tree\n * @param matrix adjmatrix\n * @param groupNumber number of group generated by clustering\n */\nfunction kruskal(matrix, groupNumber, threshold = 0) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const parents = matrix.map((m, i) => i);\n    for (let edge of edges) {\n        if (find(parents, edge[0][0]) !== find(parents, edge[0][1])) {\n            union(parents, edge[0][0], edge[0][1]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = find(parents, i);\n        }\n        let set = new Set(parents);\n        if (set.size <= groupNumber || edge[1] < threshold) {\n            break;\n        }\n    }\n    let groups = new Map();\n    for (let i = 0; i < parents.length; i++) {\n        if (!groups.has(parents[i])) {\n            groups.set(parents[i], []);\n        }\n        groups.get(parents[i]).push(i);\n    }\n    return groups;\n}\n// todo: delete kruskal with limit size, use largest size to limit it(uncontrolled group number but better), need discuss.\n/**\n *\n * @param matrix\n * @param limitSize max size of each group\n */\nfunction kruskalWithLimitSize(matrix, limitSize) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const parents = matrix.map((m, i) => i);\n    const sizes = matrix.map(() => 1);\n    for (let edge of edges) {\n        if (findWithEffect(parents, sizes, edge[0][0]) !== findWithEffect(parents, sizes, edge[0][1])) {\n            if (sizes[edge[0][0]] + sizes[edge[0][1]] > limitSize) {\n                continue;\n            }\n            unionWithEffect(parents, sizes, edge[0][0], edge[0][1]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = findWithEffect(parents, sizes, i);\n        }\n        let set = new Set(parents);\n        if (set.size === 1) {\n            break;\n        }\n    }\n    let groups = new Map();\n    for (let i = 0; i < parents.length; i++) {\n        if (!groups.has(parents[i])) {\n            groups.set(parents[i], []);\n        }\n        groups.get(parents[i]).push(i);\n    }\n    return groups;\n}\nexport function kruskalMSTWithLimitSize(matrix, limitSize = 4) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const edgesInMST = [];\n    const parents = matrix.map((m, i) => i);\n    const cloneParents = matrix.map((m, i) => i);\n    const sizes = matrix.map(() => 1);\n    for (let edge of edges) {\n        if (findWithEffect(parents, sizes, edge[0][0]) !== findWithEffect(parents, sizes, edge[0][1])) {\n            if (sizes[edge[0][0]] + sizes[edge[0][1]] > limitSize) {\n                if (find(cloneParents, edge[0][0]) !== find(cloneParents, edge[0][1])) {\n                    edgesInMST.push([edge[0], edge[1], true]);\n                    union(cloneParents, edge[0][0], edge[0][1]);\n                }\n                continue;\n            }\n            unionWithEffect(parents, sizes, edge[0][0], edge[0][1]);\n            // fuck typescript\n            // edgesInMST.push([...edge, inCutEdge]);\n            edgesInMST.push([edge[0], edge[1], false]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = findWithEffect(parents, sizes, i);\n            cloneParents[i] = find(cloneParents, i);\n        }\n        let set = new Set(parents);\n        if (set.size === 1) {\n            break;\n        }\n    }\n    return { edgesInMST, groups: parents };\n}\n/**\n *\n * @param matrix\n * @param groupNumber number of group generated by clustering\n */\nexport function kruskalMST(matrix, groupNumber = 4, threshold = 0) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const edgesInMST = [];\n    const parents = matrix.map((m, i) => i);\n    let groups = [...parents];\n    let inCutEdge = false;\n    for (let edge of edges) {\n        if (find(parents, edge[0][0]) !== find(parents, edge[0][1])) {\n            union(parents, edge[0][0], edge[0][1]);\n            // fuck typescript\n            // edgesInMST.push([...edge, inCutEdge]);\n            edgesInMST.push([edge[0], edge[1], inCutEdge]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = find(parents, i);\n        }\n        let set = new Set(parents);\n        // TODO:\n        // + use kruskalMST instead of kruskal.\n        if (set.size <= groupNumber || edge[1] < threshold) {\n            inCutEdge = true;\n        }\n        else {\n            groups = [...parents];\n        }\n        if (set.size === 1) {\n            break;\n        }\n    }\n    return { edgesInMST, groups };\n}\nfunction cluster({ matrix, measures, method = 'kruskal', groupMaxSize = 4, limitSize = false, threshold = 0 }) {\n    // const groups = kruskal({ matrix, groupMaxSize });\n    let groups;\n    if (limitSize) {\n        groups = kruskalWithLimitSize(matrix, groupMaxSize);\n    }\n    else {\n        groups = kruskal(matrix, groupMaxSize, threshold);\n    }\n    let ans = [];\n    for (let meas of groups.values()) {\n        ans.push(meas.map(meaIndex => measures[meaIndex]));\n    }\n    return ans;\n}\nexport default cluster;\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","class Base {\n    constructor(props) {\n        const { dataSource, dimensions, measures } = props;\n        this.dataSource = dataSource;\n        this.dimensions = dimensions;\n        this.measures = measures;\n    }\n    normalize() {\n        this.normalizedDataSource = [];\n        this.valueSets = [];\n        this.valueParser = [];\n        this.ranges = [];\n        this.dimensions.forEach(dim => {\n            this.valueSets.push(new Map());\n            this.valueParser.push([]);\n        });\n        this.measures.forEach(() => {\n            this.ranges.push([Infinity, -Infinity]);\n        });\n        this.dataSource.forEach(record => {\n            this.dimensions.forEach((dim, index) => {\n                let value = (record[dim] || 'others').toString();\n                if (!this.valueSets[index].has(value)) {\n                    this.valueSets[index].set(value, this.valueSets[index].size);\n                    this.valueParser[index].push(value);\n                }\n            });\n            this.measures.forEach((mea, index) => {\n                let value = record[mea];\n                if (typeof value === 'number') {\n                    this.ranges[index][0] = Math.min(this.ranges[index][0], value);\n                    this.ranges[index][1] = Math.max(this.ranges[index][1], value);\n                }\n            });\n        });\n        this.dataSource.forEach(record => {\n            let normalizedRecord = this.normalizeRecord(record);\n            this.normalizedDataSource.push(normalizedRecord);\n        });\n        return this.normalizedDataSource;\n    }\n    normalizeRecord(record) {\n        let normalizedRecord = {};\n        this.measures.forEach((mea, index) => {\n            normalizedRecord[mea] = (record[mea] - this.ranges[index][0]) / (this.ranges[index][1] - this.ranges[index][0]);\n        });\n        this.dimensions.forEach((dim, index) => {\n            let value = (record[dim] || 'others').toString();\n            normalizedRecord[dim] = this.valueSets[index].get(value);\n        });\n        return normalizedRecord;\n    }\n}\nexport class KNN extends Base {\n    constructor(props) {\n        super(props);\n        const { K } = props;\n        this.K = K;\n        this.normalize();\n    }\n    getNeighbors(targetRecord, features, weights = []) {\n        if (weights.length !== features.length) {\n            features.forEach(f => {\n                weights.push(1);\n            });\n        }\n        // let normalizedRecord = this.normalizeRecord(targetRecord);\n        let dimFeatures = [];\n        let meaFeatures = [];\n        let dimWeights = [];\n        let meaWeights = [];\n        let dimSets = new Set(this.dimensions);\n        for (let i = 0; i < features.length; i++) {\n            if (dimSets.has(features[i])) {\n                dimFeatures.push(features[i]);\n                dimWeights.push(weights[i]);\n            }\n            else {\n                meaFeatures.push(features[i]);\n                meaWeights.push(weights[i]);\n            }\n        }\n        // let legalFeatures = features.filter(f => this.measures.includes(f));\n        let distances = [];\n        this.normalizedDataSource.forEach((record, rIndex) => {\n            let dis = 0;\n            meaFeatures.forEach((feature, index) => {\n                dis += ((record[feature] - targetRecord[feature]) * meaWeights[index]) ** 2;\n            });\n            dimFeatures.forEach((feature, index) => {\n                if (record[feature] !== targetRecord[feature]) {\n                    dis += dimWeights[index] ** 2;\n                }\n            });\n            distances.push({\n                dis,\n                index: rIndex\n            });\n        });\n        distances.sort((a, b) => {\n            return a.dis - b.dis;\n        });\n        let ans = [];\n        let len = Math.min(this.K, distances.length);\n        for (let i = 0; i < len; i++) {\n            ans.push(this.normalizedDataSource[distances[i].index]);\n        }\n        return ans;\n    }\n    getTargetValue(targets, neighbors) {\n        let ans = [];\n        targets.forEach(tar => {\n            let votes = new Map();\n            neighbors.forEach(nei => {\n                if (!votes.has(nei[tar])) {\n                    votes.set(nei[tar], 0);\n                }\n                votes.set(nei[tar], votes.get(nei[tar]) + 1);\n            });\n            let mostCount = 0;\n            let mostFeature = 0;\n            for (let vote of votes) {\n                if (vote[1] > mostCount) {\n                    mostCount = vote[1];\n                    mostFeature = vote[0];\n                }\n            }\n            let dimIndex = this.dimensions.indexOf(tar);\n            if (dimIndex > -1) {\n                ans.push(this.valueParser[dimIndex][mostFeature]);\n            }\n            else {\n                ans.push(mostFeature);\n            }\n        });\n        return ans;\n    }\n}\n","/**\n * todo reservoir sampling is better to support stream data\n * Algorithm R:\n * Vitter, Jeffrey S. (1 March 1985). \"Random sampling with a reservoir\" (PDF). ACM Transactions on Mathematical Software. 11 (1): 37–57. CiteSeerX 10.1.1.138.784. doi:10.1145/3147.3165.\n */\nexport function reservoirSampling(dataSource, size = 500) {\n    if (dataSource.length <= size)\n        return dataSource;\n    let sampleSpace = dataSource.slice(0, size);\n    let len = dataSource.length;\n    for (let i = size + 1; i < len; i++) {\n        let pos = Math.round(Math.random() * i);\n        if (pos < size) {\n            sampleSpace[pos] = dataSource[i];\n        }\n    }\n    return sampleSpace;\n}\nfunction linearCongruentialGenerator(size, seed) {\n    if (size === 0)\n        return [];\n    const m = 2147483647;\n    const a = 1103515245;\n    const c = 12345;\n    let ans = [seed];\n    for (let i = 1; i < size; i++) {\n        ans.push(((ans[i - 1] * a + c) % m));\n    }\n    return ans.map(v => v / m);\n}\nexport function uniformSampling(dataSource, size) {\n    let sampleIndexes = linearCongruentialGenerator(size, Math.random() * 2147483647);\n    let ans = [];\n    for (let i = 0; i < size; i++) {\n        let index = Math.floor(sampleIndexes[i] * size) % size;\n        ans.push(dataSource[index]);\n    }\n    return ans;\n}\n","import { uniformSampling } from \"../../sampling\";\nimport { EULER } from \"../../constant\";\nexport class IsolationForest {\n    constructor(dimensions, measures, dataSource, treeNumber = 100, Psi = 256) {\n        this.dimensions = dimensions;\n        this.measures = measures;\n        this.dataSource = dataSource;\n        if (dataSource.length < Psi) {\n            this.treeNumber = Math.max(1, Math.ceil(Psi / 50));\n            this.sampleSize = Math.max(2, Math.floor(dataSource.length / 2));\n        }\n        else {\n            this.treeNumber = treeNumber;\n            this.sampleSize = Psi;\n        }\n        this.limitHeight = Math.ceil(Math.log2(this.sampleSize));\n        this.iForest = [];\n        this.normalizeDimensions();\n    }\n    normalizeDimensions() {\n        this.normalizedDataSource = [];\n        this.valueSets = [];\n        this.ranges = [];\n        this.dimensions.forEach(() => {\n            this.valueSets.push(new Map());\n        });\n        this.measures.forEach(() => {\n            this.ranges.push([Infinity, -Infinity]);\n        });\n        this.dataSource.forEach(record => {\n            this.dimensions.forEach((dim, index) => {\n                let value = (record[dim] || 'others').toString();\n                if (!this.valueSets[index].has(value)) {\n                    this.valueSets[index].set(value, this.valueSets[index].size);\n                }\n            });\n            this.measures.forEach((mea, index) => {\n                let value = record[mea];\n                if (typeof value === 'number') {\n                    this.ranges[index][0] = Math.min(this.ranges[index][0], value);\n                    this.ranges[index][1] = Math.max(this.ranges[index][1], value);\n                }\n            });\n        });\n        this.dataSource.forEach(record => {\n            let normalizedRecord = this.normalizeRecord(record);\n            this.normalizedDataSource.push(normalizedRecord);\n        });\n        return this.normalizedDataSource;\n    }\n    normalizeRecord(record) {\n        let normalizedRecord = {};\n        this.measures.forEach(mea => {\n            normalizedRecord[mea] = record[mea];\n        });\n        this.dimensions.forEach((dim, index) => {\n            let value = (record[dim] || 'others').toString();\n            normalizedRecord[dim] = this.valueSets[index].get(value);\n        });\n        return normalizedRecord;\n    }\n    buildIsolationTree(normalizedSampleData, depth) {\n        if (depth >= this.limitHeight || normalizedSampleData.length <= 1) {\n            return null;\n        }\n        else {\n            let rand = Math.random();\n            let randField = this.measures[0] || this.dimensions[0];\n            let dimLength = this.dimensions.length;\n            let meaLength = this.measures.length;\n            let randValue = 0;\n            if (rand >= dimLength / (dimLength + meaLength)) {\n                let index = Math.floor(Math.random() * meaLength) % meaLength;\n                randField = this.measures[index];\n                randValue = this.ranges[index][0] + (this.ranges[index][1] - this.ranges[index][0]) * Math.random();\n            }\n            else {\n                let index = Math.floor(Math.random() * dimLength) % dimLength;\n                randField = this.dimensions[index];\n                randValue = Math.floor(this.valueSets[index].size * Math.random()) % this.valueSets[index].size;\n            }\n            // random in range not in distribution.\n            // let randValue = normalizedSampleData[Math.floor(Math.random() * normalizedSampleData.length) % normalizedSampleData.length][randField];\n            let leftSubData = [];\n            let rightSubData = [];\n            for (let record of normalizedSampleData) {\n                if (record[randField] < randValue) {\n                    leftSubData.push(record);\n                }\n                else {\n                    rightSubData.push(record);\n                }\n            }\n            let node = {\n                field: randField,\n                value: randValue,\n                size: normalizedSampleData.length\n            };\n            node.left = this.buildIsolationTree(leftSubData, depth + 1);\n            node.right = this.buildIsolationTree(rightSubData, depth + 1);\n            return node;\n        }\n    }\n    /**\n     * average unsuccessful searches in BST (Preiss, 1999)\n     * @param Psi\n     */\n    AFS(Psi) {\n        if (Psi > 2)\n            return 2 * (Math.log(Psi - 1) + EULER) - 2 * (Psi - 1) / Psi;\n        if (Psi === 2)\n            return 1;\n        return 0;\n    }\n    getPathLength(record, iTree, pathLength, nodeSize) {\n        if (iTree === null) {\n            return pathLength + this.AFS(nodeSize);\n        }\n        let value = record[iTree.field];\n        if (value < iTree.value) {\n            return this.getPathLength(record, iTree.left, pathLength + 1, iTree.size);\n        }\n        else {\n            return this.getPathLength(record, iTree.right, pathLength + 1, iTree.size);\n        }\n    }\n    buildIsolationForest() {\n        this.iForest = [];\n        for (let i = 0; i < this.treeNumber; i++) {\n            let samples = uniformSampling(this.normalizedDataSource, this.sampleSize);\n            let iTree = this.buildIsolationTree(samples, 0);\n            this.iForest.push(iTree);\n        }\n        return this.iForest;\n    }\n    // public evaluate (record: Record): number {\n    // }\n    estimateOutierScore() {\n        this.recordScoreList = [];\n        this.normalizedDataSource.forEach(record => {\n            let recordScore = 0;\n            let avgPathLength = 0;\n            this.iForest.forEach(iTree => {\n                avgPathLength += this.getPathLength(record, iTree, 0, this.sampleSize);\n            });\n            avgPathLength /= this.iForest.length;\n            recordScore = Math.pow(2, -(avgPathLength / this.AFS(this.sampleSize)));\n            this.recordScoreList.push(recordScore);\n        });\n        return this.recordScoreList;\n    }\n}\n","import * as Cluster from './cluster/index';\nimport { KNN } from './classification/knn';\nimport { IsolationForest } from './outlier/isolationForest';\nconst Outier = {\n    IsolationForest\n};\nconst Classification = {\n    KNN\n};\nexport { Cluster, Outier, Classification };\n","import { crammersV, getCombination, pearsonCC } from '../statistics/index';\nimport { CrammersVThreshold, PearsonCorrelation } from './config';\nimport { Cluster } from '../ml/index';\nimport { CHANNEL } from '../constant';\n// insights like outlier and trend both request high impurity of dimension.\nexport function getDimCorrelationMatrix(dataSource, dimensions) {\n    let matrix = dimensions.map(d => dimensions.map(d => 0));\n    for (let i = 0; i < dimensions.length; i++) {\n        matrix[i][i] = 1;\n        for (let j = i + 1; j < dimensions.length; j++) {\n            matrix[i][j] = matrix[j][i] = crammersV(dataSource, dimensions[i], dimensions[j]);\n        }\n    }\n    return matrix;\n}\nexport function getMeaCorrelationMatrix(dataSource, measures) {\n    let matrix = measures.map(i => measures.map(j => 0));\n    for (let i = 0; i < measures.length; i++) {\n        matrix[i][i] = 1;\n        for (let j = i + 1; j < measures.length; j++) {\n            let r = pearsonCC(dataSource, measures[i], measures[j]);\n            matrix[j][i] = matrix[i][j] = r;\n        }\n    }\n    return matrix;\n}\nexport function getDimClusterGroups(dataSource, dimensions, threshold = CrammersVThreshold, max_number_of_group) {\n    const maxDimNumberInView = 4;\n    let dimCorrelationMatrix = getDimCorrelationMatrix(dataSource, dimensions);\n    // groupMaxSize here means group number.\n    let groups = Cluster.kruskal({\n        matrix: dimCorrelationMatrix,\n        measures: dimensions,\n        groupMaxSize: max_number_of_group ? max_number_of_group : Math.round(dimensions.length / maxDimNumberInView),\n        threshold,\n    });\n    return groups;\n}\nexport function getDimSetsBasedOnClusterGroups(dataSource, dimensions, correlation_threshold, max_dimensions_in_space) {\n    let dimSets = [];\n    let groups = getDimClusterGroups(dataSource, dimensions, correlation_threshold);\n    for (let group of groups) {\n        let combineDimSet = getCombination(group, 1, max_dimensions_in_space ? max_dimensions_in_space : CHANNEL.maxDimensionNumber);\n        dimSets.push(...combineDimSet);\n    }\n    return dimSets;\n}\n/**\n *\n * @param dataSource\n * @param measures\n * @param correlation_threshold a threshold of correlation used to define min correlation value in a cluster of measure.\n * @param max_measure_in_view\n */\nexport function getMeaSetsBasedOnClusterGroups(dataSource, measures, correlation_threshold, max_number_of_group = 3) {\n    const soft_max_measures_in_view = 3;\n    let correlationMatrix = getMeaCorrelationMatrix(dataSource, measures);\n    let groups = Cluster.kruskal({\n        matrix: correlationMatrix,\n        measures: measures,\n        groupMaxSize: max_number_of_group ? max_number_of_group : Math.round(measures.length / soft_max_measures_in_view),\n        threshold: correlation_threshold ? correlation_threshold : PearsonCorrelation.strong\n    });\n    return groups;\n}\nexport function subspaceSearching(dataSource, dimensions, should_dimensions_correlated = true) {\n    if (should_dimensions_correlated) {\n        return getDimSetsBasedOnClusterGroups(dataSource, dimensions);\n    }\n    else {\n        return getCombination(dimensions);\n    }\n}\nexport function getRelatedVertices(adjMatrix, vertices, verticesInGraph, topK) {\n    let verStatus = vertices.map(v => verticesInGraph.includes(v));\n    let edges = [];\n    let ans = [];\n    for (let i = 0; i < adjMatrix.length; i++) {\n        // if vertex in graph, then check all the edges from this vertex\n        if (verStatus[i]) {\n            for (let j = 0; j < adjMatrix[i].length; j++) {\n                if (!verStatus[j]) {\n                    edges.push([adjMatrix[i][j], [i, j]]);\n                }\n            }\n        }\n    }\n    edges.sort((a, b) => {\n        return b[0] - a[0];\n    });\n    for (let i = 0; i < edges.length; i++) {\n        let targetVertexIndex = edges[i][1][1];\n        if (!verStatus[targetVertexIndex]) {\n            verStatus[targetVertexIndex] = true;\n            ans.push({\n                field: vertices[targetVertexIndex],\n                corValue: edges[i][0]\n            });\n        }\n    }\n    return ans.slice(0, topK ? topK : ans.length);\n}\n","import { KNN } from \"../../ml/classification/knn\";\nexport class GroupIntention extends KNN {\n    getTargetValuePercent(targets, targetRecord, neighbors) {\n        let ans = [];\n        targets.forEach((target, index) => {\n            let sameCount = 0;\n            neighbors.forEach(nei => {\n                if (nei[target] === targetRecord[target]) {\n                    sameCount++;\n                }\n            });\n            ans.push(sameCount / neighbors.length);\n        });\n        return ans;\n    }\n    getSignificance(features, targets) {\n        let ans = 0;\n        this.normalizedDataSource.forEach(record => {\n            let neighbors = this.getNeighbors(record, features);\n            let percents = this.getTargetValuePercent(targets, record, neighbors);\n            let sig = 0;\n            percents.forEach(per => {\n                sig += per;\n            });\n            sig /= percents.length;\n            ans += sig;\n        });\n        ans /= this.normalizedDataSource.length;\n        return ans;\n    }\n}\n","import { getMeaSetsBasedOnClusterGroups, getDimClusterGroups } from './subspaces';\nimport { CrammersVThreshold, PearsonCorrelation } from './config';\nimport { Outier } from '../ml/index';\nimport { getCombination, mapPositive } from '../statistics/index';\nimport { CHANNEL } from '../constant';\nimport { entropy, normalize } from '../statistics/index';\nimport aggregate from 'cube-core';\nimport { oneDLinearRegression } from '../statistics/index';\nimport { GroupIntention } from \"./intention/groups\";\nconst SPLITER = '=;=';\nfunction crossGroups(dimensionGroups, measureGroups) {\n    let viewSpaces = [];\n    for (let dimensions of dimensionGroups) {\n        for (let measures of measureGroups) {\n            viewSpaces.push({\n                dimensions,\n                measures\n            });\n        }\n    }\n    return viewSpaces;\n}\nfunction getDimSetsFromClusterGroups(groups) {\n    let dimSets = [];\n    for (let group of groups) {\n        let combineDimSet = getCombination(group, 1, CHANNEL.maxDimensionNumber);\n        dimSets.push(...combineDimSet);\n    }\n    return dimSets;\n}\nfunction getCombinationFromClusterGroups(groups, limitSize = CHANNEL.maxDimensionNumber) {\n    let fieldSets = [];\n    for (let group of groups) {\n        let combineFieldSet = getCombination(group, 1, limitSize);\n        fieldSets.push(...combineFieldSet);\n    }\n    return fieldSets;\n}\nexport const getGeneralIntentionSpace = async function (aggData, dimensions, measures) {\n    let score = 0;\n    let significance = 0;\n    for (let mea of measures) {\n        let fL = aggData.map(r => r[mea]);\n        let pL = normalize(mapPositive(fL));\n        let value = entropy(pL);\n        score += value;\n        significance += value / Math.log2(fL.length);\n    }\n    score /= measures.length;\n    significance /= measures.length;\n    significance = 1 - significance;\n    return {\n        dimensions,\n        measures,\n        type: 'default_general',\n        score,\n        impurity: score,\n        significance,\n        order: 'asc'\n    };\n};\nexport const getOutlierIntentionSpace = async function getOutlierIntentionSpace(aggData, dimensions, measures) {\n    let iForest = new Outier.IsolationForest([], measures, aggData);\n    iForest.buildIsolationForest();\n    let scoreList = iForest.estimateOutierScore();\n    let maxIndex = 0;\n    let score = 0;\n    for (let i = 0; i < scoreList.length; i++) {\n        if (scoreList[i] > score) {\n            score = scoreList[i];\n            maxIndex = i;\n        }\n    }\n    let des = {};\n    dimensions.concat(measures).forEach(mea => { des[mea] = aggData[maxIndex][mea]; });\n    return {\n        dimensions,\n        measures,\n        score,\n        significance: score,\n        order: 'desc',\n        description: des\n    };\n};\nexport const getTrendIntentionSpace = async function (aggData, dimensions, measures) {\n    if (dimensions.length !== 1)\n        return null;\n    let orderedData = [...aggData];\n    orderedData.sort((a, b) => {\n        if (a[dimensions[0]] > b[dimensions[0]])\n            return 1;\n        if (a[dimensions[0]] === b[dimensions[0]])\n            return 0;\n        if (a[dimensions[0]] < b[dimensions[0]])\n            return -1;\n    });\n    let score = 0;\n    for (let mea of measures) {\n        let linearModel = new oneDLinearRegression(orderedData, dimensions[0], mea);\n        linearModel.normalizeDimensions(dimensions);\n        score += linearModel.significance();\n    }\n    score /= measures.length;\n    return {\n        dimensions,\n        measures,\n        score,\n        significance: score,\n        order: 'desc'\n    };\n};\nexport const getGroupIntentionSpace = async function (aggData, dimensions, measures) {\n    if (dimensions.length < 2)\n        return null;\n    let score = 0;\n    let groupIntention = new GroupIntention({\n        dataSource: aggData,\n        dimensions,\n        measures,\n        K: 8\n    });\n    score = groupIntention.getSignificance(measures.concat(dimensions.slice(0, -1)), dimensions.slice(-1));\n    return {\n        dimensions,\n        measures,\n        score,\n        significance: score,\n        order: 'desc'\n    };\n};\n// export const IntentionWorkerCollection: Map<string, IntentionWorker> = new Map();\nexport var DefaultIWorker;\n(function (DefaultIWorker) {\n    DefaultIWorker[\"outlier\"] = \"default_outlier\";\n    DefaultIWorker[\"cluster\"] = \"default_group\";\n    DefaultIWorker[\"trend\"] = \"default_trend\";\n})(DefaultIWorker || (DefaultIWorker = {}));\nexport class IntentionWorkerCollection {\n    constructor() {\n        this.workers = new Map();\n    }\n    register(name, iWorker) {\n        if (this.workers.has(name)) {\n            throw new Error(`There has been a worker named: ${name} already.`);\n        }\n        else {\n            this.workers.set(name, [true, iWorker]);\n        }\n    }\n    enable(name, status) {\n        if (!this.workers.has(name)) {\n            throw new Error(`Intention Worker \"${name}\" does not exist.`);\n        }\n        else {\n            let iWorkerWithStatus = this.workers.get(name);\n            iWorkerWithStatus[0] = status;\n            this.workers.set(name, iWorkerWithStatus);\n        }\n    }\n    each(func) {\n        for (let [name, iWorker] of this.workers) {\n            if (iWorker[0]) {\n                func(iWorker[1], name);\n            }\n        }\n    }\n    static init(props = { withDefaultIWorkers: true }) {\n        const { withDefaultIWorkers = true } = props;\n        if (!IntentionWorkerCollection.colletion) {\n            IntentionWorkerCollection.colletion = new IntentionWorkerCollection();\n            if (withDefaultIWorkers) {\n                IntentionWorkerCollection.colletion.register(DefaultIWorker.outlier, getOutlierIntentionSpace);\n                IntentionWorkerCollection.colletion.register(DefaultIWorker.cluster, getGroupIntentionSpace);\n                IntentionWorkerCollection.colletion.register(DefaultIWorker.trend, getTrendIntentionSpace);\n            }\n        }\n        for (let key in DefaultIWorker) {\n            IntentionWorkerCollection.colletion.enable(DefaultIWorker[key], withDefaultIWorkers);\n        }\n        return IntentionWorkerCollection.colletion;\n    }\n}\nexport async function getIntentionSpaces(cubePool, viewSpaces, Collection) {\n    let ansSpace = [];\n    for (let space of viewSpaces) {\n        const { dimensions, measures } = space;\n        let key = dimensions.join(SPLITER);\n        if (cubePool.has(key)) {\n            let aggData = cubePool.get(key);\n            let generalSpace = await getGeneralIntentionSpace(aggData, dimensions, measures);\n            Collection.each(async (iWorker, name) => {\n                try {\n                    let iSpace = await iWorker(aggData, dimensions, measures);\n                    if (iSpace !== null) {\n                        iSpace.type = name;\n                        iSpace.impurity = generalSpace.impurity;\n                        ansSpace.push(iSpace);\n                    }\n                }\n                catch (error) {\n                    console.error('worker failed', { dimensions, measures, aggData }, error);\n                }\n            });\n        }\n    }\n    return ansSpace;\n}\nexport async function getVisSpaces(props) {\n    const { dataSource, dimensions, measures, collection, dimension_correlation_threshold = CrammersVThreshold, measure_correlation_threshold = PearsonCorrelation.strong, max_dimension_num_in_view = 3, max_measure_num_in_view = 3, } = props;\n    // 1. get dimension cluster groups.\n    // 2. get measure cluster groups.\n    // 3. get dimension groups * measure groups = subspaces + aggregate\n    // 4. calculate each subspace intention score (entropy, outlier, trend for temporal & oridinal field)\n    // 5. filter each intend subspaces with threadshold\n    // 6.manage those spaces / order them.\n    let visableDimensions = dimensions; //.filter(dim => !isFieldUnique(dataSource, dim));\n    let dimensionGroups = getDimClusterGroups(dataSource, visableDimensions, dimension_correlation_threshold);\n    // let dimensionSets = getDimSetsFromClusterGroups(dimensionGroups);\n    let dimensionSets = getCombinationFromClusterGroups(dimensionGroups, max_dimension_num_in_view);\n    let measureGroups = getMeaSetsBasedOnClusterGroups(dataSource, measures, measure_correlation_threshold);\n    let measureSets = getCombinationFromClusterGroups(measureGroups, max_measure_num_in_view);\n    let viewSpaces = crossGroups(dimensionSets, measureSets);\n    let cubePool = new Map();\n    // for (let group of dimensionGroups) {\n    // todo: similar cuboids computation using cube-core\n    let t0 = new Date().getTime();\n    for (let group of dimensionSets) {\n        let key = group.join(SPLITER);\n        let aggData = aggregate({\n            dataSource,\n            dimensions: group,\n            measures,\n            asFields: measures,\n            operator: 'sum'\n        });\n        cubePool.set(key, aggData);\n    }\n    let t1 = new Date().getTime();\n    console.log('cube cost', t1 - t0);\n    cubePool.set('*', dataSource);\n    const usedCollection = collection || IntentionWorkerCollection.init();\n    ;\n    // usedCollection.enable(DefaultIWorker.cluster, false);\n    let ansSpace = await getIntentionSpaces(cubePool, viewSpaces, usedCollection);\n    return ansSpace;\n}\n","/**\n * \n * @param {task} task is a function \n */\nexport function timer (task) {\n  return function (e) {\n    let startTime = new Date().getTime();\n    try {\n      task(e);\n    } finally {\n      let cost = new Date().getTime() - startTime;\n      console.log(`Task [${task.name}] cost ${cost} ms.`)\n    }\n  }\n}","/* eslint no-restricted-globals: 0 */\nimport { getVisSpaces } from 'visual-insights/build/esm/insights/dev';\nimport { timer } from './timer';\n\nconst generateDashBoard = async (e) => {\n  const { dataSource, dimensions, measures } = e.data;\n  try {\n    let ansSpace = await getVisSpaces({ dataSource, dimensions, measures });\n    ansSpace.sort((a, b) => (a.impurity / a.significance) - (b.impurity / b.significance));\n    self.postMessage({\n      success: true,\n      data: ansSpace\n    })\n  } catch (error) {\n    self.postMessage({\n      success: false,\n      message: error\n    })\n  }\n}\n\nself.addEventListener('message', timer(generateDashBoard), false);"],"sourceRoot":""}