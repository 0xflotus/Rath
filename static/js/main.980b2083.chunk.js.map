{"version":3,"sources":["service.ts","actions.ts","state.tsx","utils/fileParser.ts","utils/transform.ts","utils/useComposeState.tsx","components/preference.tsx","demo/vegaBase.tsx","plugins/visSummary/index.tsx","plugins/visSummary/description.tsx","pages/gallery/association/digDimension.tsx","pages/gallery/association/index.tsx","pages/gallery/index.tsx","pages/notebook/distributionChart.tsx","pages/notebook/fieldAnalysis.tsx","pages/notebook/subspaces.tsx","pages/notebook/cluster.tsx","pages/notebook/index.tsx","components/table.tsx","components/fieldConfig.tsx","pages/dataSource/clean.ts","pages/dataSource/useDataSource.tsx","utils/deepcopy.ts","pages/dataSource/index.tsx","pages/dashBoard/indicatorCard.tsx","pages/dashBoard/combinedChart.tsx","pages/dashBoard/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["server","getFieldsSummaryService","dataSource","fields","a","async","fetch","method","headers","body","JSON","stringify","res","json","result","success","fieldSummaryList","data","Error","message","console","error","getGroupFieldsService","groupedData","newFields","combineFieldsService","dimensions","measures","operator","subspaceList","generateDashBoard","subspaces","dashBoardList","univariateSummary","state","updateState","params","filter","field","type","map","name","f","originSummary","fieldWithTypeList","includes","fieldName","groupedResult","newBIFields","groupedField","find","newDimensions","groupedSummary","draft","cookedDataSource","summary","origin","grouped","loading","concat","subspaceSearch","subspaceSearching","orderedDimensions","d","target","g","entropy","Infinity","sort","b","cookedDimensions","cookedMeasures","selectedDimensions","slice","Math","round","length","topK","dimensionSize","actions","extractInsights","gallery","univariateResult","getDashBoard","dashBoard","setAutoFreeze","initState","currentPage","rawData","subspacePercentSize","maxGroupNumber","viewSpaces","GloalStateContext","createContext","GlobalStateProvider","children","useState","setState","getters","dimScores","useMemo","maxEntropy","useGetters","stateUpdater","produce","draftState","Provider","value","actionName","useGlobalState","useContext","csvLoader","file","Promise","resolve","reject","Papa","parse","complete","results","row","record","forEach","index","jsonLoader","reader","FileReader","readAsText","onload","ev","onerror","transNumber","num","isNaN","Number","useComposeState","nextState","checkboxStyles","root","marginTop","aggregationList","key","text","PreferencePanel","props","show","onUpdateConfig","onClose","config","aggregator","setAggregator","defaultAggregated","setDefaultAggregated","defaultStack","setDefaultStack","useEffect","Panel","isOpen","PanelType","smallFixedFar","onDismiss","headerText","closeButtonAriaLabel","onRenderFooterContent","PrimaryButton","onClick","Label","Stack","verticalFill","tokens","childrenGap","padding","ComboBox","selectedKey","label","allowFreeform","autoComplete","options","onChange","e","option","Checkbox","styles","checked","isChecked","geomTypeMap","interval","line","point","density","BaseChart","schema","position","color","opacity","size","shape","geomType","facets","page","fieldFeatures","container","useRef","getFieldType","targetField","aggregatedMeasures","mea","op","as","table","aggregate","asFields","adjustField","aggField","current","spec","fieldMap","x","y","column","width","values","basicSpec","mark","tooltip","encoding","channel","stack","transform","selection","groupby","dim","Boolean","sliderSpec","brush","encodings","vconcat","getSpecification","embed","ref","StoryTeller","space","spaceList","isTeachingBubbleVisible","setIsTeachingBubbleVisible","sortedFieldsScores","mostInfluencedDimension","sp","some","bestMeasure","measuresInView","min","minPos","i","countDiffField","ans","undefined","join","DefaultButton","id","TeachingBubble","calloutProps","directionalHint","DirectionalHint","bottomCenter","isWide","hasCloseIcon","headline","source","VisDescription","similarityThrehold","topKRelatedSpace","measuresRelatedScore","measures1","measures2","meaSet","Set","meaSet1","meaSet2","meaVec1","meaVec2","push","has","score","sqrt","useDigDimension","interestedViewSpace","fieldScores","relatedSpaces","visualConfig","every","subDim","rankedRelatedSpaces","measureSimilarity","relatedScore","spaceFieldScores","specification","Association","digDimensionProps","onSelectView","relatedCharts","className","view","currentSpace","dimensions1","dimensions2","dim1","style","border","margin","overflow","fontSize","horizontal","IconButton","iconProps","iconName","title","Gallery","setCurrentPage","insightBoard","fieldConfig","configPanel","dataConfig","pageStatus","setPageStatus","showAssociation","setShowAssociation","setVisualConfig","setViewSpaces","aggData","dataView","setDataView","gotoPage","pageNo","combinedSpaces","spaces","v","clusterMeasures","matrix","correlationMatrix","then","viewState","log","subspace","ProgressIndicator","description","marginBottom","ariaLabel","dir","allowDisabledFocus","pos","findIndex","DistributionChart","chart","fieldType","hasIndex","member","test","memberName","exec","groups","left","sortBy","background","height","axis","columns","minWidth","maxWidth","getIconNameByFieldType","contrastColor","FieldAnalsis","entropyRange","originEntropy","s","max","onRenderCompactCard","item","toFixed","distribution","onRenderExpandedCard","DetailsList","compact","items","selectionMode","SelectionMode","none","onRenderItemColumn","expandingCardProps","renderData","compactCardHeight","expandedCardHeight","fieldContent","bgColor","Icon","range","chroma","scale","domain","rgb","bgColorStr","fontColorStr","HoverCard","expandedCardOpenDelay","instantOpenOnClick","boxShadow","backgroundColor","encodeArr","arr","Subspaces","onSpaceChange","curIndex","setCurIndex","spaceChart","relationChart","measureName","measureValue","on","reverse","condition","addEventListener","datum","targetSpace","m","j","correlation","scheme","ClusterBoard","adjMatrix","onFocusGroup","clusterResult","kruskalMST","edgesInMST","treeData","edges","edge","inCutEdge","nodes","group","NoteBook","isAggregated","setIsAggregated","clusterState","setClusterState","setMeasuresInView","Slider","valueFormat","showValue","step","measInView","Toggle","defaultChecked","onText","offText","DataTable","maxHeight","FieldPanel","setFields","updateFieldType","cleanMethodList","useDataSource","cleanMethod","Transform","preparedData","Cleaner","dropNull","useMode","simpleClean","cleanData","deepcopy","SampleKey","SampleOptions","reservoir","DataSourceBoard","dispatch","setCleanMethod","sampleMethod","setSampleMethod","sampleSize","setSampleSize","dataSetting","fileEle","labelId","useId","commandBarList","click","disabled","onExtractInsights","Callout","role","gapSpace","setInitialFocus","hidden","required","ChoiceGroup","defaultSelectedKey","ariaLabelledBy","val","multiple","accept","display","files","tmpFields","FileLoader","Sampling","reservoirSampling","dropNullColumn","Object","keys","CommandBar","overflowButtonProps","fontWeight","Card","styled","div","IndicatorCard","datalib","abs","parts","toString","split","replace","numberWithCommas","CombinedChart","globalFilters","setGlobalFilters","chartStateList","setChartStateList","filedDomains","fieldList","domainDict","dsLen","fLen","chartSpecList","board","shouldFieldAggregate","specList","markType","xType","yType","xAgg","yAgg","mustDefineScale","autosize","sl","dataSourceContainer","signalHandler","vsourceList","filters","isRange","ds","float","overflowY","minHeight","VegaLite","signalListeners","list","nextList","DashBoardPage","dashBoardIndex","setDashBoardIndex","Separator","overflowX","pivotList","itemKey","App","pivotKey","href","src","Pivot","onLinkClick","headersOnly","pivot","PivotItem","window","location","hostname","match","initializeIcons","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.980b2083.chunk.js","sourcesContent":["import { DataSource,  Field, FieldType, OperatorType } from './global';\nlet server = '//lobay.moe:8443';\n\nif (process.env.NODE_ENV !== 'production') {\n  console.log('using dev server');\n  server = '//localhost:8000';\n}\n\ninterface SuccessResult<T> {\n  success: true;\n  data: T;\n}\ninterface FailResult<T> {\n  success: false;\n  message: string;\n}\n\ntype Result<T> = SuccessResult<T> | FailResult<T>;\n\ninterface FieldAnalysisResponse {\n  dimScores: Array<[string, number, number, Field]>;\n  aggData: DataSource;\n}\nexport interface FieldAnalysisResult extends FieldAnalysisResponse {\n  newDimensions: string[];\n}\nexport async function fieldsAnalysisService (cleanData: DataSource, dimensions: string[], measures: string[]): Promise<FieldAnalysisResult> {\n  const res = await fetch(server + '/api/service/fieldsAnalysis', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      dataSource: cleanData,\n      dimensions,\n      measures\n    })\n  });\n  const result: Result<FieldAnalysisResponse> = await res.json();\n  if (result.success === true) {\n    const { dimScores, aggData } = result.data;\n    const newDimensions = dimScores.map(dim => dim[0]).filter(dim => !measures.includes(dim));\n    return {\n      dimScores,\n      aggData,\n      newDimensions\n    }\n  } else {\n    throw new Error('fieldsAnalysisService failed' + result.message);\n  }\n}\nexport interface View {\n  groups: string[][];\n  detail: [string[], any, number[][]];\n  score: number;\n}\n\nexport async function getInsightViewsService (aggData: DataSource, newDimensions: string[], measures: string[]): Promise<View[]> {\n  const res = await fetch(server + '/api/service/getInsightViews', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      dataSource: aggData,\n      dimensions: newDimensions,\n      measures\n    })\n  });\n  const result: Result<View[]> = await res.json();\n  if (result.success === true) {\n    const views = result.data;\n    return views;\n  } else {\n    throw new Error('getInsightView service fail' + result.message);\n  }\n}\n/**\n * statistic description for a field\n */\nexport interface FieldSummary {\n  fieldName: string;\n  entropy: number;\n  maxEntropy: number;\n  distribution: Array<{ memberName: string; count: number }>\n  type: FieldType\n}\nexport async function getFieldsSummaryService (dataSource: DataSource, fields: string[] | Field[]): Promise<FieldSummary[] | undefined> {\n  try {\n    const res = await fetch(server + '/api/service/fieldsSummary', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        dataSource,\n        fields\n      })\n    })\n    const result: Result<FieldSummary[]> = await res.json();\n    if (result.success === true) {\n      const fieldSummaryList = result.data;\n      return fieldSummaryList\n    } else {\n      throw new Error('[fields summary failed]' + result.message)\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\ninterface GroupFieldsResponse {\n  groupedData: DataSource;\n  newFields: Field[];\n  fields: Field[];\n}\nexport async function getGroupFieldsService (dataSource: DataSource, fields: Field[]): Promise<GroupFieldsResponse | undefined> {\n  try {\n    const res = await fetch(server + '/api/service/groupFields', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        dataSource,\n        fields\n      })\n    })\n    const result: Result<GroupFieldsResponse> = await res.json();\n    if (result.success === true) {\n      const { groupedData, newFields, fields } = result.data;\n      return { groupedData, newFields, fields }\n    } else {\n      throw new Error('[group fields failed]' + result.message)\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport interface Subspace {\n  score: number;\n  dimensions: string[];\n  measures: Array<{name: string; value: number}>;\n  correlationMatrix: number[][];\n}\nexport async function combineFieldsService (dataSource: DataSource, dimensions: string[], measures: string[], operator: OperatorType): Promise<Subspace[] | undefined> {\n  try {\n    const res = await fetch(server + '/api/service/combineFields', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        dataSource,\n        dimensions,\n        measures,\n        operator\n      })\n    })\n    const result: Result<Subspace[]> = await res.json();\n    if (result.success === true) {\n      const subspaceList = result.data;\n      return subspaceList\n    } else {\n      throw new Error('[combine fields failed]' + result.message)\n    }\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport interface ViewCombinedSpace {\n  dimensions: string[];\n  measures: Array<{name: string; value: number}>;\n  matrix: number[][];\n}\n\nexport interface ViewSpace {\n  index: number;\n  dimensions: string[];\n  measures: string[];\n  score: number;\n}\n\nexport async function clusterMeasures (maxGroupNumber: number, combinedSpaces: ViewCombinedSpace[]): Promise<ViewSpace[]> {\n  let viewSpaces: ViewSpace[] = [];\n  try {\n    const res = await fetch(server + '/api/service/clusterMeasures', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        maxGroupNumber,\n        spaces: combinedSpaces\n      })\n    });\n    const result: Result<ViewSpace[]> = await res.json();\n    if (result.success === true) {\n      viewSpaces = result.data.map((v, i) => {\n        return {\n          ...v,\n          index: i\n        }\n      });\n    } else {\n      throw new Error('[cluster measures]' + result.message)\n    }\n  } catch (error) {\n    console.error(error)\n  }\n  return viewSpaces;\n}\n\ninterface ViewInDashBoard {\n  type: string;\n  dimensions: string[];\n  measures: string[];\n}\n\nexport type DashBoard = ViewInDashBoard[];\n\nexport async function generateDashBoard (dataSource: DataSource, dimensions: string[], measures: string[], subspaces: Subspace[]): Promise<DashBoard[]> {\n  let dashBoardList: DashBoard[] = [];\n  try {\n    const res =  await fetch(server + '/api/service/generateDashBoard', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        dataSource,\n        dimensions,\n        measures,\n        subspaces\n      })\n    });\n    const result = await res.json();\n    if (result.success) {\n      dashBoardList = result.data;\n    } else {\n      throw new Error('[generateDashBoard]' + result.message);\n    }\n  } catch (error) {\n    console.error(error)\n  }\n  return dashBoardList;\n} ","import { DataSource, BIField, Field, OperatorType } from \"./global\";\nimport {\n  getFieldsSummaryService,\n  FieldSummary,\n  getGroupFieldsService,\n  combineFieldsService,\n  generateDashBoard\n} from \"./service\";\nimport { GlobalState, StateUpdater } from './state';\n\n\n\ntype Action<T> = (state: GlobalState, updateState: (updater:StateUpdater<GlobalState>) => void, params: T) => any;\n\n\nconst univariateSummary: Action<{dataSource: DataSource; fields: BIField[]}> = async (state, updateState, params) => {\n  const { dataSource, fields } = params;\n  const dimensions = fields\n    .filter(field => field.type === \"dimension\")\n    .map(field => field.name);\n  const measures = fields\n    .filter(field => field.type === \"measure\")\n    .map(field => field.name);\n  // updateState(draft => { draft.loading.univariateSummary = true })\n  try {\n    /**\n     * get summary of the orignal dataset(fields without grouped)\n     */\n    const originSummary = await getFieldsSummaryService(\n      dataSource,\n      fields.map(f => f.name)\n    );\n    // todo only group dimension.\n    let fieldWithTypeList: Field[] = originSummary\n      ? originSummary\n          .filter(f => dimensions.includes(f.fieldName))\n          .map(f => {\n            return {\n              name: f.fieldName,\n              type: f.type\n            };\n          })\n      : [];\n    /**\n     * bug:\n     * should not group measures!!!\n     */\n    const groupedResult = await getGroupFieldsService(\n      dataSource,\n      fieldWithTypeList\n    );\n    const { groupedData, newFields } = groupedResult\n      ? groupedResult\n      : { groupedData: dataSource, newFields: fieldWithTypeList };\n    /**\n     * `newBIFields` shares the same length (size) with fields.\n     * It repalces some of the fields with high entropy with a grouped new field.\n     * newBIFields does not contain field before grouped.\n     */\n    const newBIFields: BIField[] = fields.map(field => {\n      let groupedField = newFields.find(\n        f => f.name === field.name + \"(group)\"\n      );\n      return {\n        name: groupedField ? groupedField.name : field.name,\n        type: field.type\n      };\n    });\n    const newDimensions: string[] = newBIFields\n      .filter(f => f.type === \"dimension\")\n      .map(f => f.name);\n\n    /**\n     * groupedSummary only contains newFields generated during `groupFieldsService`.\n     */\n    const groupedSummary = await getFieldsSummaryService(\n      groupedData,\n      newFields\n    );\n    \n    updateState(draft => {\n      draft.cookedDataSource = groupedData;\n      draft.summary = {\n        origin: originSummary || [],\n        grouped: groupedSummary || []\n      }\n      draft.loading.univariateSummary = false;\n    });\n    // setFields(newBIFields);\n    // tmp solutions\n    let summary = (groupedSummary || []).concat(originSummary || []);\n    return {\n      groupedData,\n      summary,\n      newDimensions,\n      measures\n    }\n    // await SubspaceSeach(groupedData, summary, newDimensions, measures, \"sum\");\n  } catch (error) {\n    updateState(draft => {\n      draft.loading.univariateSummary = false;\n    });\n  }\n}\n\n\n\ninterface SubspaceSeachParams {\n  groupedData: DataSource;\n  summary: FieldSummary[];\n  dimensions: string[];\n  measures: string[];\n  operator: OperatorType\n}\nconst subspaceSearch: Action<SubspaceSeachParams> = async (state, updateState, params) => {\n  const { groupedData: dataSource, summary, dimensions, measures, operator } = params;\n  updateState(draft => {\n    draft.loading.subspaceSearching = true;\n  });\n  let orderedDimensions: Array<{ name: string; entropy: number }> = [];\n  orderedDimensions = dimensions.map(d => {\n    let target = summary.find(g => g.fieldName === d);\n    return {\n      name: d,\n      entropy: target ? target.entropy : Infinity\n    };\n  });\n\n  orderedDimensions.sort((a, b) => a.entropy - b.entropy);\n  updateState(draft => {\n    draft.cookedDimensions = orderedDimensions.map(d => d.name);\n    draft.cookedMeasures = measures;\n  });\n  const selectedDimensions = orderedDimensions\n    .map(d => d.name)\n    .slice(\n      0,\n      Math.round(orderedDimensions.length * state.topK.dimensionSize)\n    );\n  try {\n    const subspaceList = await combineFieldsService(\n      dataSource,\n      selectedDimensions,\n      measures,\n      operator\n    );\n    if (subspaceList) {\n      updateState(draft => {\n        draft.subspaceList = subspaceList;\n      });\n    }\n    updateState(draft => {\n      draft.loading.subspaceSearching = false;\n    });\n  } catch (error) {\n    updateState(draft => {\n      draft.loading.subspaceSearching = false;\n    });\n  }\n}\n\nconst extractInsights: Action<{dataSource: DataSource; fields: BIField[]}> = async (state, updateState, params) => {\n  const { dataSource, fields } = params;\n  updateState(draft => {\n    draft.loading.gallery = true\n  })\n  try {\n    const univariateResult = await univariateSummary(state, updateState, {\n      dataSource, fields\n    });\n      if (univariateResult) {\n        const {\n          groupedData,\n          summary,\n          newDimensions,\n          measures\n        } = univariateResult;\n        await subspaceSearch(state, updateState, {\n          groupedData, summary, dimensions: newDimensions, measures, operator: \"sum\"\n        });\n      }\n  } catch (error) {\n  } finally {\n    updateState(draft => {\n      draft.loading.gallery = false\n      draft.loading.gallery = false\n    })\n  }\n}\n\nconst getDashBoard: Action<{dataSource: DataSource, dimensions: string[], measures: string[]}> = async (state, updateState, params) => {\n  const { dataSource, dimensions, measures } = params;\n  updateState(draft => {\n    draft.loading.dashBoard = true\n  })\n  try {\n    const dashBoardList = await generateDashBoard(dataSource, dimensions, measures, state.subspaceList)\n    updateState(draft => {\n      draft.dashBoardList = dashBoardList;\n    })\n  } catch (error) {\n    console.error(error)\n  } finally {\n    updateState(draft => {\n      draft.loading.dashBoard = false\n    })\n  }\n}\nconst actions = {\n  univariateSummary,\n  subspaceSearch,\n  extractInsights,\n  getDashBoard\n}\nexport type Actions =  typeof actions\n\ntype valueof<T> = T[keyof T]\n\ntype Foo = Parameters<typeof subspaceSearch> // ReturnType\nexport type Test = valueof<{  [key in keyof Actions]: {\n  name: key,\n  params: Parameters<Actions[key]>[2]\n}}>\n\nexport default actions;\n","import produce, { Draft, setAutoFreeze } from 'immer';\nimport React, { useState, useMemo, createContext, useContext } from 'react';\nimport { DataSource, BIField, Field } from './global';\nimport { Subspace, FieldSummary, ViewSpace, DashBoard } from './service';\nimport actions, { Test, Actions } from './actions';\n\nsetAutoFreeze(false)\n\nexport interface GlobalState {\n  /**\n   * `currentPage` is the current page number of visualization in explore board.\n   */\n  currentPage: number;\n  /**\n   * raw data is fetched and parsed data or uploaded data without any other changes.\n   * computed value `dataSource` will be calculated \n   */\n  rawData: DataSource;\n  /**\n   * fields contains fields with `dimension` or `measure` type.\n   * currently, this kind of type is not computed property unlike 'quantitative', 'nominal'...\n   * This is defined by user's purpose or domain knowledge.\n   */\n  fields: BIField[];\n  /**\n   * dataSource been cleaned and grouped which is readly for exploration.\n   */\n  cookedDataSource: DataSource;\n  cookedDimensions: string[];\n  cookedMeasures: string[];\n  /**\n   * subspaceList is ordered list by it score.\n   */\n  // subspaceList: Subspace[]\n  /**\n   * loading status for some service\n   * todo: \n   * manage the loading status in pages intead of globally.\n   */\n  loading: {\n    univariateSummary: boolean;\n    subspaceSearching: boolean;\n    gallery: boolean;\n    dashBoard: boolean;\n  };\n  \n  topK: {\n    /**\n     * top k percent subspace it will fetch.\n     */\n    subspacePercentSize: number;\n    dimensionSize: number;\n  }\n  maxGroupNumber: number;\n  subspaceList: Subspace[];\n  summary: {\n    origin: FieldSummary[];\n    grouped: FieldSummary[];\n  };\n  viewSpaces: ViewSpace[];\n  dashBoardList: DashBoard[];\n}\n\ninterface Getters {\n  /**\n   * `dataSource` is computed data based on fields' property(dimension or measure).\n   * sometimes, uploaded data contains contains some measure field but they are parsed into string value, which is raw data.\n   * dataSource transform these fields into what they should be for future computation.\n   * This is usually happened when a csv file is uploaded.\n   */\n  dimScores: [string, number, number, Field][]\n}\nexport type StateUpdater<S> = (draftState: Draft<S>) => void\n\n// function createStore<S>(initState: S) {\n//   const [state, setState] = useState<S>(initState)\n\n//   return function useGlobalState(): [S, (stateUpdater: StateUpdater<S>) => void] {\n//     const updateState = (stateUpdater: StateUpdater<S>) => {\n//       const nextState = produce<S>(state, draftState => stateUpdater(draftState))\n//       setState(nextState)\n//     }\n//     return [state, updateState]\n//   }\n// }\n\nconst initState: GlobalState = {\n  currentPage: 0,\n  fields: [],\n  rawData: [],\n  cookedDataSource: [],\n  cookedDimensions: [],\n  cookedMeasures: [],\n  loading: {\n    univariateSummary: false,\n    subspaceSearching: false,\n    gallery: false,\n    dashBoard: false,\n  },\n  topK: {\n    subspacePercentSize: 0.3,\n    dimensionSize: 0.72\n  },\n  maxGroupNumber: 4,\n  subspaceList: [],\n  summary: {\n    origin: [],\n    grouped: []\n  },\n  viewSpaces: [],\n  dashBoardList: []\n};\ntype Dispatch<T> = (actionName: string, params: T) => void;\ntype valueof<T> = T[keyof T]\nconst GloalStateContext = createContext<[GlobalState, (updater:StateUpdater<GlobalState>) => void, <P extends Test>(actionName: P['name'], params: P['params']) => void, Getters]>(null!)\nfunction useGetters(state: GlobalState) {\n  const dimScores = useMemo<[string, number, number, Field][]>(() => {\n    return [...state.summary.origin, ...state.summary.grouped].map(field => {\n      return [\n        field.fieldName,\n        field.entropy,\n        field.maxEntropy,\n        { name: field.fieldName, type: field.type }\n      ];\n    });\n  }, [state.summary])\n\n  const getters: Getters = {\n    dimScores\n  }\n\n  return getters;\n}\nexport function GlobalStateProvider({ children }: { children: React.ReactNode }) {\n  const [state, setState] = useState<GlobalState>(initState)\n\n  const getters = useGetters(state);\n  const updateState = (stateUpdater: StateUpdater<GlobalState>) => {\n    setState(state => {\n      const nextState = produce<GlobalState>(state, draftState => stateUpdater(draftState))\n      return nextState;\n    })\n  }\n\n  const dispatch: <P extends Test>(actionName: P['name'], params: P['params']) => void = (actionName, params) => {\n    if (typeof actions[actionName] === 'function') {\n\n      // todo: fix the any type\n      \n      actions[actionName](state, updateState, params as any);\n      // actions['subspaceSearch'](state, updateState, params)\n    }\n  }\n\n\n\n  return (\n    <GloalStateContext.Provider value={[state, updateState, dispatch, getters]}>\n      {children}\n    </GloalStateContext.Provider>\n  )\n}\nexport function useGlobalState() {\n  return useContext(GloalStateContext)\n}","import { Record, DataSource } from '../global';\nimport Papa from 'papaparse';\n\nexport function csvLoader (file: File) {\n  return new Promise<DataSource>((resolve, reject) => {\n    Papa.parse(file, {\n      complete (results, file) {\n        let data: string[][] = results.data;\n        let fields: string[] = data[0];\n        let rawData = data.slice(1).map(row => {\n          let record: Record = {};\n          fields.forEach((field, index) => {\n            record[field] = row[index]\n          })\n          return record\n        })\n        resolve(rawData)\n      },\n      error (error, file) {\n        reject(error)\n      }\n    })\n  })\n}\n\nexport function jsonLoader (file: File): Promise<DataSource> {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader()\n    reader.readAsText(file)\n    reader.onload = (ev) => {\n      if (ev.target) {\n        try {\n          const rawData: DataSource = JSON.parse(ev.target.result as string);\n          resolve(rawData);\n        } catch (error) {\n          reject(error)\n        }\n      } else {\n        reject(ev)\n      }\n    }\n    reader.onerror = reject\n  })\n}","export function transNumber(num: any): number | null {\n  if (isNaN(num)) {\n    return null\n  }\n  return Number(num)\n}","import React, { useState } from 'react';\nimport produce, { Draft } from 'immer';\n/**\n * @param S type of the composed state\n */\nexport type StateUpdater<S> = (draftState: Draft<S>) => void\n/**\n * \n * @param initState\n * useComposeState helps you manage several state together, provided with immutable state change api\n * \n * example:\n * ```js\n * const [state, setState] = useComposeState({foo: 12, bar: { foo: 20}})\n * setState(draft => {\n *  draft.bar.foo = 100;\n * })\n * ```\n */\nexport default function useComposeState<S>(initState: S): [S, (stateUpdater: StateUpdater<S>) => void] {\n  const [state, setState] = useState<S>(initState)\n  const updateState = (stateUpdater: StateUpdater<S>) => {\n    const nextState = produce<S>(state, draftState => stateUpdater(draftState))\n    setState(nextState)\n  }\n  return [state, updateState]\n}","import React, { useState, useEffect } from 'react';\nimport { PrimaryButton, Stack, Checkbox, Panel, PanelType, ComboBox, Label } from 'office-ui-fabric-react';\nimport { Aggregator } from '../global';\nconst checkboxStyles = () => {\n  return {\n    root: {\n      marginTop: '10px'\n    }\n  };\n}\n\n// todo: import aggregators list from cube-core\nconst aggregationList: Array<{ key: Aggregator; text: string }> = [\n  { key: 'sum', text: 'Sum' },\n  { key: 'count', text: 'Count' },\n  { key: 'mean', text: 'Mean' }\n]\nexport interface PreferencePanelConfig {\n  aggregator: Aggregator;\n  defaultAggregated: boolean;\n  defaultStack: boolean\n}\nexport interface PreferencePanelProps {\n  show: boolean;\n  onUpdateConfig: (props: PreferencePanelConfig) => void;\n  onClose: () => void;\n  config: PreferencePanelConfig\n}\n\nconst PreferencePanel: React.FC<PreferencePanelProps> = (props) => {\n  const {\n    show = false,\n    onUpdateConfig,\n    onClose,\n    config\n  } = props;\n  \n  const [aggregator, setAggregator] = useState<Aggregator>('sum');\n  const [defaultAggregated, setDefaultAggregated] = useState(true);\n  const [defaultStack, setDefaultStack] = useState(true);\n  \n  useEffect(() => {\n    const { aggregator, defaultAggregated, defaultStack } = config;\n    setAggregator(aggregator);\n    setDefaultAggregated(defaultAggregated);\n    setDefaultStack(defaultStack);\n  }, [config, show])\n  \n  const onRenderFooterContent = () => <div>\n    <PrimaryButton onClick={() => { onUpdateConfig({ aggregator, defaultAggregated, defaultStack }) }}>\n      Save\n    </PrimaryButton>\n  </div>\n  \n  return <Panel\n    isOpen={show}\n    type={PanelType.smallFixedFar}\n    onDismiss={onClose}\n    headerText=\"Preference\"\n    closeButtonAriaLabel=\"Close\"\n    onRenderFooterContent={onRenderFooterContent}\n  >\n    <Label>Preference</Label>\n    <Stack verticalFill tokens={{ childrenGap: 50, padding: 6}}>\n      <ComboBox\n        selectedKey={aggregator}\n        label=\"Aggregator\"\n        allowFreeform={true}\n        autoComplete=\"on\"\n        options={aggregationList}\n        onChange={(e, option) => {option && setAggregator(option.key as Aggregator)}}\n      />\n      <Checkbox styles={checkboxStyles} label=\"measurement aggregation\" checked={defaultAggregated} onChange={(e, isChecked) => {setDefaultAggregated(isChecked || false)}} />\n      <Checkbox styles={checkboxStyles} label=\"measurement stack\" checked={defaultStack} onChange={(e, isChecked) => {setDefaultStack(isChecked || false)}} />\n    </Stack>\n  </Panel>\n}\n\nexport default PreferencePanel;","import React, { useEffect, useRef } from 'react';\nimport aggregate from 'cube-core';\nimport embed from 'vega-embed';\nimport { DataSource, Field, FieldType } from '../global'\nexport const geomTypeMap: {[key: string]: any} = {\n  interval: 'bar',\n  line: 'line',\n  point: 'point',\n  // density: 'rect'\n  density: 'point'\n}\nexport interface Specification {\n  position?: string[];\n  color?: string[];\n  opacity?: string[];\n  size?: string[];\n  shape?: string[];\n  geomType?: string[];\n  facets?: string[];\n  page?: string[];\n  filter?: string[]\n}\ninterface BaseChartProps {\n  defaultAggregated: boolean;\n  defaultStack: boolean;\n  aggregator: 'sum' | 'mean' | 'count';\n  dataSource: DataSource;\n  dimensions: string[];\n  measures: string[];\n  fieldFeatures: Field[];\n  schema: Specification;\n}\n\nconst BaseChart: React.FC<BaseChartProps> = (props) => {\n  const {\n    defaultAggregated,\n    defaultStack,\n    aggregator,\n    dataSource = [],\n    dimensions = [],\n    measures = [],\n    schema: {\n      position = [],\n      color = [],\n      opacity = [],\n      size = [],\n      shape = [],\n      geomType = [],\n      facets = [],\n      page = [],\n      filter = []\n    },\n    fieldFeatures = []\n  } = props;\n\n  const container = useRef<HTMLDivElement>(null);\n\n  function getFieldType (field: string): FieldType {\n    let targetField = fieldFeatures.find(f => f.name === field);\n    return targetField ? targetField.type : 'nominal';\n  }\n\n  const aggregatedMeasures = measures.map(mea => {\n    return {\n      op: aggregator,\n      field: mea,\n      as: `${mea}_${aggregator}`\n    }\n  })\n  let table = defaultAggregated ? aggregate({ dataSource, dimensions, measures, operator: aggregator, asFields: aggregatedMeasures.map(mea => mea.as)}) : dataSource;\n  function adjustField (fieldName: string): string {\n    if (defaultAggregated && measures.includes(fieldName)) {\n      let aggField = aggregatedMeasures.find(mea => {\n        return mea.field === fieldName;\n      });\n      return aggField ? aggField.as : fieldName;\n    }\n    return fieldName;\n  }\n  // todo for slider\n  // function getDomain (field) {\n  //   let fieldType = fieldFeatures.find(f => f.name === field).type;\n  //   let values = table.map(row => row[field]);\n  //   if (fieldType === 'quantitative') {\n  //     let min = Math.min(0, ...values)\n  //     let max = Math.max(...values)\n  //     return [min, max]\n  //   }\n  //   return [...new Set(values)];\n  // }\n  function getSpecification () {\n    let chartWidth = 600; //container.current ? container.current.offsetWidth * 0.8 : 600;\n    const fieldMap: any = {\n      x: position[0],\n      y: position[1],\n      color: color[0],\n      size: size[0],\n      opacity: opacity[0],\n      row: facets[0],\n      column: facets[1]\n    }\n    let spec: any = {\n      width: chartWidth,\n      data: {\n        values: table\n      }\n    }\n    let basicSpec: any = {\n      width: chartWidth,\n      mark: {\n        type: (geomType[0] && geomTypeMap[geomType[0]]) ? geomTypeMap[geomType[0]] : geomType[0],\n        tooltip: true\n      },\n      encoding: {}\n    };\n    for (let channel in fieldMap) {\n      if (fieldMap[channel]) {\n        basicSpec.encoding[channel] = {\n          field: adjustField(fieldMap[channel]),\n          type: getFieldType(fieldMap[channel])\n        }\n        if (['x', 'y'].includes(channel) && getFieldType(fieldMap[channel]) === 'quantitative' && !defaultStack) {\n          basicSpec.encoding[channel].stack = null;\n        }\n      }\n    }\n    if (!defaultStack && opacity.length === 0) {\n      basicSpec.encoding.opacity = { value: 0.7 }\n    }\n    if (page.length === 0) {\n      spec = {\n        ...spec,\n        ...basicSpec\n      }\n    } else if (page.length > 0) {\n      basicSpec.transform = [\n        {filter: {selection: 'brush'}},\n        defaultAggregated ? {\n          aggregate: aggregatedMeasures,\n          groupby: dimensions.filter(dim => dim !== page[0])\n        } : null\n      ].filter(Boolean);\n      let sliderSpec = {\n        width: chartWidth,\n        mark: 'tick',\n        selection: { brush: { encodings: ['x'], type: 'interval'}},\n        encoding: {\n          x: { field: page[0], type: getFieldType(page[0]) }\n        }\n      }\n      spec.vconcat = [basicSpec, sliderSpec];\n    }\n    return spec;\n  }\n  useEffect(() => {\n    if (container.current !== null) {\n      if (position.length > 0 && geomType.length > 0) {\n        let spec = getSpecification()\n        // console.log(spec)\n        embed(container.current, spec);\n      }\n    }\n  })\n  return <div ref={container}></div>\n  \n}\n\nexport default BaseChart;","import React, { useMemo, useState, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Subspace, FieldSummary } from '../../service';\nimport { DefaultButton, TeachingBubble, DirectionalHint } from 'office-ui-fabric-react';\n\nimport './index.css';\nimport { Field } from '../../global';\nimport { Specification } from '../../demo/vegaBase';\n\ninterface StoryTellerProps {\n  lang?: 'zh' | 'en';\n  dimScores: Array<[string, number, number, Field]>;\n  space: Subspace;\n  spaceList: Subspace[];\n  dimensions: string[];\n  measures: string[];\n  schema: Specification\n}\n\nconst StoryTeller: React.FC<StoryTellerProps> = (props) => {\n  const { space, dimensions = [], measures = [], dimScores = [], spaceList = [], schema } = props;\n  const [isTeachingBubbleVisible, setIsTeachingBubbleVisible] = useState(false);\n\n  const sortedFieldsScores = useMemo<Array<[string, number, number, Field]>>(() => {\n    return [...dimScores].sort((a, b) => a[1] - b[1]);\n  }, [dimScores])\n  const mostInfluencedDimension = useMemo<string | undefined>(() => {\n    if (typeof space === 'undefined') return;\n    for (let sp of spaceList) {\n      if (sp.dimensions.some(dim => {\n        return space.dimensions.includes(dim)\n      })) {\n        return sp.dimensions.find(dim => {\n          return space.dimensions.includes(dim)\n        })\n      }\n    }\n  }, [])\n  const bestMeasure = useMemo<string | undefined>(() => {\n    if (typeof space === 'undefined') return;\n    const measuresInView = space.measures.filter(mea => measures.includes(mea.name));\n    let min = Infinity;\n    let minPos = 0;\n    for (let i = 0; i < measuresInView.length; i++) {\n      if (measuresInView[i].value < min) {\n        min = measuresInView[i].value;\n        minPos = i;\n      }\n    }\n    return measuresInView[minPos].name;\n  }, [measures, space])\n\n  const countDiffField = useMemo<string | undefined>(() => {\n    let ans = sortedFieldsScores.find(dim => dimensions.includes(dim[0]));\n    return ans ? ans[0] : undefined;\n  }, [sortedFieldsScores, dimensions])\n  const result = `\n  ${ schema && schema.position ? `Current chart mainly focus on the relationship between ***${schema.position[0]}*** and ***${schema.position[1]}***` : ''}\n  ${ dimensions.length > 1 ? `+ DataSource is grouped by ***${dimensions.join(', ')}***, measures(indicators) will propose strong difference of distribution between each other.` : '' }\n  ${ measures.length > 1 ? `+ ***${measures.join(', ')}***are strongly related to each other` : '' }\n  ${ countDiffField ? `+ The distribution of member countings of ***${countDiffField}*** seems to contain more orders and patterns.` : '' }\n  ${ mostInfluencedDimension ? `+ ***${mostInfluencedDimension}*** has great influence on aggregated measure values.` : '' }\n  ${ bestMeasure ? `+ ***${bestMeasure}*** is more likely to have patterns according to its distribution.` : '' }\n  \\`\\`\\\n  `\n  return (\n    <div>\n      <DefaultButton id=\"vis-summary\" text=\"Summary\" onClick={() => { setIsTeachingBubbleVisible(true) }} />\n      {isTeachingBubbleVisible ? (\n          <div>\n            <TeachingBubble\n              calloutProps={{ directionalHint: DirectionalHint.bottomCenter }}\n              isWide={true}\n              hasCloseIcon={true}\n              closeButtonAriaLabel=\"Close\"\n              target={'#vis-summary'}\n              onDismiss={() => { setIsTeachingBubbleVisible(false) }}\n              headline=\"Chart Description\"\n            >\n              <ReactMarkdown source={result} />\n            </TeachingBubble>\n          </div>\n        ) : null}\n    </div>\n  )\n}\n\nexport default StoryTeller","import React, { useMemo, useState, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Subspace, FieldSummary } from '../../service';\n\nimport './index.css';\nimport { Field } from '../../global';\nimport { Specification } from '../../demo/vegaBase';\n\ninterface VisDescriptionProps {\n  lang?: 'zh' | 'en';\n  dimScores: Array<[string, number, number, Field]>;\n  space: Subspace;\n  spaceList: Subspace[];\n  dimensions: string[];\n  measures: string[];\n  schema: Specification\n}\n\nconst VisDescription: React.FC<VisDescriptionProps> = (props) => {\n  const { space, dimensions = [], measures = [], dimScores = [], spaceList = [], schema } = props;\n\n  const sortedFieldsScores = useMemo<Array<[string, number, number, Field]>>(() => {\n    return [...dimScores].sort((a, b) => a[1] - b[1]);\n  }, [dimScores])\n  const mostInfluencedDimension = useMemo<string | undefined>(() => {\n    if (typeof space === 'undefined') return;\n    for (let sp of spaceList) {\n      if (sp.dimensions.some(dim => {\n        return space.dimensions.includes(dim)\n      })) {\n        return sp.dimensions.find(dim => {\n          return space.dimensions.includes(dim)\n        })\n      }\n    }\n  }, [])\n  const bestMeasure = useMemo<string | undefined>(() => {\n    if (typeof space === 'undefined') return;\n    const measuresInView = space.measures.filter(mea => measures.includes(mea.name));\n    let min = Infinity;\n    let minPos = 0;\n    for (let i = 0; i < measuresInView.length; i++) {\n      if (measuresInView[i].value < min) {\n        min = measuresInView[i].value;\n        minPos = i;\n      }\n    }\n    return measuresInView[minPos].name;\n  }, [measures, space])\n\n  const countDiffField = useMemo<string | undefined>(() => {\n    let ans = sortedFieldsScores.find(dim => dimensions.includes(dim[0]));\n    return ans ? ans[0] : undefined;\n  }, [sortedFieldsScores, dimensions])\n  const result = `\n  ${ schema && schema.position ? `Current chart mainly focus on the relationship between ***${schema.position[0]}*** and ***${schema.position[1]}***` : ''}\n  ${ dimensions.length > 1 ? `+ DataSource is grouped by ***${dimensions.join(', ')}***, measures(indicators) will propose strong difference of distribution between each other.` : '' }\n  ${ measures.length > 1 ? `+ ***${measures.join(', ')}***are strongly related to each other` : '' }\n  ${ countDiffField ? `+ The distribution of member countings of ***${countDiffField}*** seems to contain more orders and patterns.` : '' }\n  ${ mostInfluencedDimension ? `+ ***${mostInfluencedDimension}*** has great influence on aggregated measure values.` : '' }\n  ${ bestMeasure ? `+ ***${bestMeasure}*** is more likely to have patterns according to its distribution.` : '' }\n  \\`\\`\\\n  `\n  return (\n    <ReactMarkdown source={result} />\n  )\n}\n\nexport default VisDescription","import React, { useMemo } from 'react';\nimport {\n  ViewSpace\n} from '../../../service';\nimport { Field, DataSource } from '../../../global';\nimport { specification } from 'visual-insights';\nimport { PreferencePanelConfig } from '../../../components/preference';\nconst similarityThrehold = 0.2;\nconst topKRelatedSpace = 5;\n\nfunction measuresRelatedScore (measures1: string[], measures2: string[]) {\n  let meaSet = new Set([...measures1, ...measures2])\n  let meaSet1 = new Set(measures1)\n  let meaSet2 = new Set(measures2)\n  let meaVec1: number[] = [];\n  let meaVec2: number[] = [];\n  for (let mea of meaSet) {\n    meaVec1.push(Number(meaSet1.has(mea)))\n    meaVec2.push(Number(meaSet2.has(mea)))\n  }\n  let score = 0;\n  for (let i = 0; i < meaVec1.length; i++) {\n    score += meaVec1[i] * meaVec2[i];\n  }\n  score /= (Math.sqrt(measures1.length) * Math.sqrt(measures2.length))\n  // console.log(measures1, measures2, score)\n  return score;\n}\ninterface RelatedViewSpace extends ViewSpace {\n  relatedScore: number;\n}\nexport interface DigDimensionProps {\n  /**\n   * we suppose that viewSpaces here is a ranked space list\n   */\n  viewSpaces: ViewSpace[];\n  interestedViewSpace: ViewSpace;\n  fieldScores: Array<[string, number, number, Field]>;\n  dataSource: DataSource;\n  visualConfig: PreferencePanelConfig\n}\n\nfunction useDigDimension(props: DigDimensionProps) {\n  const { viewSpaces, interestedViewSpace, fieldScores, dataSource, visualConfig } = props;\n  const relatedSpaces = useMemo<ViewSpace[]>(() => {\n    let ans: ViewSpace[] = []\n    for (let space of viewSpaces) {\n      if (space.dimensions.length > interestedViewSpace.dimensions.length && space.dimensions.length - interestedViewSpace.dimensions.length <= 2) {\n        let isSubset = interestedViewSpace.dimensions.every(subDim => {\n          return space.dimensions.find(dim => subDim === dim)\n        })\n        if (isSubset) {\n          ans.push(space)\n        }\n      }\n    }\n    return ans;\n  }, [interestedViewSpace, viewSpaces])\n  const rankedRelatedSpaces = useMemo(() => {\n    let ans: RelatedViewSpace[] = [];\n    for (let space of relatedSpaces) {\n      let measureSimilarity = measuresRelatedScore(interestedViewSpace.measures, space.measures);\n      if (measureSimilarity > similarityThrehold) {\n        // console.log({ measureSimilarity })\n        ans.push({\n          ...space,\n          relatedScore: space.score / Math.sqrt(measureSimilarity)\n        })\n      }\n    }\n    return ans.sort((a, b) => a.relatedScore - b.relatedScore);\n  }, [relatedSpaces]);\n\n  const viewList = useMemo(() => {\n    const ans = rankedRelatedSpaces.slice(0, topKRelatedSpace).map(space => {\n      let spaceFieldScores = fieldScores.filter(field => {\n        return space.dimensions.includes(field[0]) || space.measures.includes(field[0])\n      })\n      return {\n        ...space,\n        schema: specification(spaceFieldScores, dataSource, space.dimensions, space.measures).schema\n      };\n    })\n    return ans;\n  }, [rankedRelatedSpaces, fieldScores])\n\n  return viewList\n}\n\nexport default useDigDimension;\n","import React, { useMemo } from \"react\";\nimport VisDescription from \"../../../plugins/visSummary/description\";\nimport useDigDimension, { DigDimensionProps } from \"./digDimension\";\nimport BaseChart, { Specification } from \"../../../demo/vegaBase\";\nimport { Subspace } from \"../../../service\";\nimport { IconButton, Stack } from \"office-ui-fabric-react\";\n\nfunction isDimensionEqual(dimensions1: string[], dimensions2: string[]) {\n  if (dimensions1.length !== dimensions2.length) {\n    return false;\n  }\n  return dimensions1.every(dim1 => {\n    return dimensions2.includes(dim1);\n  });\n}\ninterface AssociationProps {\n  digDimensionProps: DigDimensionProps;\n  subspaceList: Subspace[];\n  onSelectView: (index: number) => void\n}\nconst Association: React.FC<AssociationProps> = props => {\n  const { digDimensionProps, subspaceList, onSelectView } = props;\n  const { dataSource, visualConfig, fieldScores } = digDimensionProps;\n  const relatedCharts = useDigDimension(digDimensionProps);\n  const fieldFeatures = fieldScores.map(f => f[3]);\n  return (\n    <div>\n      <div className=\"ms-Grid\">\n        {relatedCharts.map((view, i) => {\n          let currentSpace = subspaceList.find(space => {\n            return isDimensionEqual(space.dimensions, view.dimensions);\n          });\n          return (\n            <div key={`associate-row-${i}`}\n              className=\"ms-Grid-row\"\n              style={{\n                border: \"solid 1px #bfbfbf\",\n                margin: \"1em\",\n                padding: \"1em\"\n              }}\n            >\n              <div\n                className=\"ms-Grid-col ms-sm6 ms-md8 ms-lg9\"\n                style={{ overflow: 'auto' }}\n              >\n                <BaseChart\n                  aggregator={visualConfig.aggregator}\n                  defaultAggregated={view.schema.geomType && view.schema.geomType.includes(\"point\") ? false : true}\n                  defaultStack={visualConfig.defaultStack}\n                  dimensions={view.dimensions}\n                  measures={view.measures}\n                  dataSource={dataSource}\n                  schema={view.schema}\n                  fieldFeatures={fieldFeatures}\n                />\n              </div>\n              <div\n                className=\"ms-Grid-col ms-sm6 ms-md4 ms-lg3\"\n                style={{ fontSize: 14, color: \"#8a8886\", overflow: \"auto\" }}\n              >\n                <div>\n                  \n                  <Stack tokens={{ childrenGap: 8 }} horizontal>\n                    <IconButton iconProps={{ iconName: 'Lightbulb' }} title=\"Interested\" onClick={() => {\n                      onSelectView(view.index)\n                    }} />\n                  </Stack>\n                </div>\n                {currentSpace && (\n                  <VisDescription\n                    dimensions={view.dimensions}\n                    measures={view.measures}\n                    dimScores={fieldScores}\n                    space={currentSpace}\n                    spaceList={subspaceList}\n                    schema={view.schema}\n                  />\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Association;\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport {\n  DefaultButton,\n  IconButton,\n  Stack,\n  ProgressIndicator\n} from \"office-ui-fabric-react\";\nimport PreferencePanel, {\n  PreferencePanelConfig\n} from \"../../components/preference\";\nimport { useComposeState } from \"../../utils/index\";\nimport BaseChart, { Specification } from \"../../demo/vegaBase\";\nimport { DataSource, Field } from \"../../global\";\nimport { specification } from \"visual-insights\";\nimport VisSummary from \"../../plugins/visSummary/index\";\nimport { useGlobalState } from \"../../state\";\nimport Association from \"./association/index\";\nimport {\n  Subspace,\n  clusterMeasures,\n  ViewSpace,\n  FieldSummary\n} from \"../../service\";\n\ninterface PageStatus {\n  show: {\n    insightBoard: boolean;\n    configPanel: boolean;\n    fieldConfig: boolean;\n    dataConfig: boolean;\n  };\n}\ninterface DataView {\n  schema: Specification;\n  aggData: DataSource;\n  fieldFeatures: Field[];\n  dimensions: string[];\n  measures: string[];\n}\n\ninterface GalleryProps {\n  subspaceList: Subspace[];\n  /**\n   * dataSource here should be cookedData.\n   */\n  dataSource: DataSource;\n  summary: {\n    origin: FieldSummary[];\n    grouped: FieldSummary[];\n  };\n}\n\nconst Gallery: React.FC<GalleryProps> = props => {\n  const { dataSource, summary, subspaceList } = props;\n  const [currentPage, setCurrentPage] = useState(0);\n  const [state, updateState] = useGlobalState();\n  const [pageStatus, setPageStatus] = useComposeState<PageStatus>({\n    show: {\n      insightBoard: false,\n      fieldConfig: false,\n      configPanel: false,\n      dataConfig: false\n    }\n  });\n  const [showAssociation, setShowAssociation] = useState(false);\n  const [visualConfig, setVisualConfig] = useState<PreferencePanelConfig>({\n    aggregator: \"sum\",\n    defaultAggregated: true,\n    defaultStack: true\n  });\n  const [viewSpaces, setViewSpaces] = useState<ViewSpace[]>([]);\n\n  const [dataView, setDataView] = useState<DataView>({\n    schema: {\n      position: [],\n      color: [],\n      opacity: [],\n      geomType: []\n    },\n    fieldFeatures: [],\n    aggData: [],\n    dimensions: [],\n    measures: []\n  });\n\n  const gotoPage = (pageNo: number) => {\n    setCurrentPage(pageNo);\n  };\n\n  useEffect(() => {\n    updateState(draft => {\n      draft.loading.gallery = true;\n    });\n    // todo:\n    // should group number be the same for different subspaces?\n    clusterMeasures(\n      state.maxGroupNumber,\n      subspaceList.map(space => {\n        return {\n          dimensions: space.dimensions,\n          measures: space.measures,\n          matrix: space.correlationMatrix\n        };\n      })\n    ).then(viewSpaces => {\n      setViewSpaces(viewSpaces);\n      updateState(draft => {\n        draft.loading.gallery = false;\n      });\n    });\n  }, [subspaceList, dataSource, state.maxGroupNumber]);\n\n  const dimScores = useMemo<[string, number, number, Field][]>(() => {\n    return [...summary.origin, ...summary.grouped].map(field => {\n      return [\n        field.fieldName,\n        field.entropy,\n        field.maxEntropy,\n        { name: field.fieldName, type: field.type }\n      ];\n    });\n  }, [summary.origin, summary.grouped]);\n\n  useEffect(() => {\n    const viewState = viewSpaces[currentPage];\n    if (viewState) {\n      const { dimensions, measures } = viewState;\n      try {\n        // todo: find the strict confition instead of using try catch\n        const fieldScores = dimScores.filter(field => {\n          return dimensions.includes(field[0]) || measures.includes(field[0]);\n        });\n        const { schema } = specification(\n          fieldScores,\n          dataSource,\n          dimensions,\n          measures\n        );\n        setDataView({\n          schema,\n          fieldFeatures: fieldScores.map(f => f[3]),\n          aggData: dataSource,\n          dimensions,\n          measures\n        });\n        // ugly code\n        // todo:\n        // implement this in specification\n        // + check geomType\n        // + check geom number and aggregated geom number\n        if (schema.geomType && (schema.geomType.includes(\"point\") || schema.geomType.includes(\"density\"))) {\n          setVisualConfig(config => {\n            return {\n              ...config,\n              defaultAggregated: false\n            };\n          });\n        } else {\n          setVisualConfig(config => {\n            return {\n              ...config,\n              defaultAggregated: true\n            };\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [viewSpaces, currentPage]);\n  const currentSpace = useMemo<Subspace>(() => {\n    return subspaceList.find(subspace => {\n      return subspace.dimensions.join(\",\") === dataView.dimensions.join(\",\");\n    })!;\n  }, [subspaceList, currentPage, dataView]);\n  useEffect(() => {\n    setShowAssociation(false);\n  }, [currentPage]);\n  return (\n    <div className=\"content-container\">\n      <PreferencePanel\n        show={pageStatus.show.configPanel}\n        config={visualConfig}\n        onUpdateConfig={config => {\n          setVisualConfig(config);\n          setPageStatus(draft => {\n            draft.show.configPanel = false;\n          });\n        }}\n        onClose={() => {\n          setPageStatus(draft => {\n            draft.show.configPanel = false;\n          });\n        }}\n      />\n\n      <div className=\"card\">\n        {(state.loading.gallery ||\n          state.loading.subspaceSearching ||\n          state.loading.univariateSummary) && (\n          <ProgressIndicator description=\"calculating\" />\n        )}\n        <h2 style={{ marginBottom: 0 }}>\n          Visual Insights{\" \"}\n          <IconButton\n            iconProps={{ iconName: \"Settings\" }}\n            title=\"Preference\"\n            ariaLabel=\"preference\"\n            onClick={() => {\n              setPageStatus(draft => {\n                draft.show.configPanel = true;\n              });\n            }}\n          />\n          <IconButton\n            iconProps={{ iconName: \"Lightbulb\" }}\n            title=\"Dig In\"\n            ariaLabel=\"digIn\"\n            onClick={() => {\n              setShowAssociation(true);\n            }}\n          />\n        </h2>\n        <p className=\"state-description\">\n          Page No. {currentPage + 1} of {viewSpaces.length}\n        </p>\n        <p className=\"state-description\">\n          Details of the recommendation process can be seen in <b>NoteBook</b>{\" \"}\n          Board. You can adjust some of the parameters and operators and see how\n          it influence recommendation results.\n        </p>\n        <p className=\"state-description\">\n          Try to use the setting button beside the \"visual insight\" title to\n          adjust the visualization settings to get a view you prefer better.\n        </p>\n        <div className=\"ms-Grid\" dir=\"ltr\">\n          <div className=\"ms-Grid-row\">\n            <div\n              className=\"ms-Grid-col ms-sm6 ms-md8 ms-lg3\"\n              style={{ overflow: \"auto\" }}\n            >\n              <Stack horizontal tokens={{ childrenGap: 20 }}>\n                <DefaultButton\n                  text=\"Last\"\n                  onClick={() => {\n                    gotoPage(\n                      (currentPage - 1 + viewSpaces.length) % viewSpaces.length\n                    );\n                  }}\n                  allowDisabledFocus\n                />\n                <DefaultButton\n                  text=\"Next\"\n                  onClick={() => {\n                    gotoPage((currentPage + 1) % viewSpaces.length);\n                  }}\n                  allowDisabledFocus\n                />\n              </Stack>\n              <h3>Specification</h3>\n              <pre>{JSON.stringify(dataView.schema, null, 2)}</pre>\n              <VisSummary\n                dimensions={dataView.dimensions}\n                measures={dataView.measures}\n                dimScores={dimScores}\n                space={currentSpace}\n                spaceList={subspaceList}\n                schema={dataView.schema}\n              />\n            </div>\n            <div\n              className=\"ms-Grid-col ms-sm6 ms-md4 ms-lg9\"\n              style={{ overflow: \"auto\" }}\n            >\n              <BaseChart\n                aggregator={visualConfig.aggregator}\n                defaultAggregated={visualConfig.defaultAggregated}\n                defaultStack={visualConfig.defaultStack}\n                dimensions={dataView.dimensions}\n                measures={dataView.measures}\n                dataSource={dataView.aggData}\n                schema={dataView.schema}\n                fieldFeatures={dataView.fieldFeatures}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      {showAssociation && (\n        <div className=\"card\">\n          <h2> Related Views </h2>\n          <Association\n            onSelectView={(index) => {\n              let pos = viewSpaces.findIndex(v => v.index === index)\n              if (pos > -1) {\n                gotoPage(pos);\n              }\n            }}\n            subspaceList={subspaceList}\n            digDimensionProps={{\n              visualConfig,\n              dataSource,\n              viewSpaces,\n              fieldScores: dimScores,\n              interestedViewSpace: viewSpaces[currentPage]\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Gallery;\n","import React, { useRef, useEffect } from 'react';\nimport embed from 'vega-embed';\nimport { FieldType, DataSource } from '../../global';\nexport interface DistributionChartProps {\n  fieldType: FieldType;\n  x: string;\n  y: string;\n  dataSource: DataSource\n}\n\nconst DistributionChart: React.FC<DistributionChartProps> = (props) => {\n  const chart = useRef<HTMLDivElement>(null);\n  const { x, y, dataSource, fieldType } = props;\n    useEffect(() => {\n      if (chart.current) {\n        let values: typeof dataSource = [];\n        let hasIndex = false;\n        if (fieldType === 'ordinal' && dataSource.some(member => {\n          return /(\\[|\\()-?([0-9.]+|Infinity),\\s*([0-9.]+|Infinity)(\\]|\\))/.test(member.memberName)\n        })) {\n          values = dataSource.map(member => {\n            hasIndex = true;\n            let result = /(\\[|\\()(?<left>-?([0-9.]+|Infinity)),\\s*([0-9.]+|Infinity)(\\]|\\))/.exec(member.memberName);\n            \n            return {\n              ...member,\n              index: result === null ? member.name : Number(result.groups!.left)\n            }\n          })\n        } else {\n          values = dataSource\n        }\n        let sortBy: string | undefined | any = undefined;\n        if (fieldType === 'nominal') {\n          sortBy = '-y'\n        } else if (fieldType === 'ordinal' && hasIndex) {\n          sortBy = { field: 'index' }\n        }\n        embed(chart.current, {\n          background: '#fff',\n          data: {\n            values\n          },\n          height: 120,\n          width: 200,\n          mark: ['quantitative', 'temporal'].includes(fieldType) ? 'line' : 'bar',\n          encoding: {\n            x: {\n              field: x,\n              axis: dataSource.length > 16 ? null : undefined,\n              type: fieldType, sort: sortBy\n            },\n            y: { field: y, type: 'quantitative', aggregate: 'sum' }\n          }\n        }, {\n          actions: false\n        })\n      }\n    }, [x, y, dataSource])\n  return <div ref={chart}></div>\n}\n\nexport default DistributionChart;","import React, { useMemo } from 'react';\nimport { DetailsList, SelectionMode, IColumn, Icon, HoverCard, IExpandingCardProps } from 'office-ui-fabric-react';\nimport chroma, { Color } from 'chroma-js';\nimport { FieldSummary } from '../../service';\nimport DistributionChart from './distributionChart';\nimport { FieldType, Record } from '../../global';\n\nimport './fieldAnalysis.css';\n\n// todo: distribution info\n\ninterface FieldAnalsisProps {\n  originSummary: FieldSummary[];\n  groupedSummary: FieldSummary[];\n}\nconst columns: IColumn[] = [\n  {\n    key: 'fieldName',\n    name: 'fieldName',\n    fieldName: 'fieldName',\n    minWidth: 70,\n    maxWidth: 150\n  },\n  {\n    key: 'type',\n    name: 'type',\n    fieldName: 'type',\n    minWidth: 50\n  },\n  {\n    key: 'entropy',\n    name: 'entropy',\n    fieldName: 'entropy',\n    minWidth: 120\n  },\n  {\n    key: 'maxEntropy',\n    name: 'maxEntropy',\n    fieldName: 'maxEntropy',\n    minWidth: 120\n  }\n];\nfunction getIconNameByFieldType (type: string): string {\n  switch (type) {\n    case 'nominal':\n      return 'TextField';\n    case 'quantitative':\n      return 'NumberField';\n    case 'ordinal':\n      return 'Breadcrumb';\n    case 'temporal':\n      return 'EventDate';\n    default:\n      return ''\n  }\n}\n\nfunction getValueColor (value: number, range: [number, number]): [number, number, number] {\n  return chroma.scale('YlGnBu').domain([range[1], range[0]])(value).rgb();\n}\n\n/**\n * \n * @param color rgb array\n * algorithm provided by https://stackoverflow.com/questions/1855884/determine-font-color-based-on-background-color\n */\nfunction contrastColor(color: [number, number, number]): [number, number, number] {\n  let luminance = (0.299 * color[0] + 0.587 * color[1] + 0.114 * color[2]) / 255;\n  return luminance > 0.5 ? [0, 0, 0] : [255, 255, 255]\n}\nconst FieldAnalsis: React.FC<FieldAnalsisProps> = (props) => {\n\n  const { originSummary, groupedSummary } = props;\n\n  const entropyRange = useMemo<[number, number]>(() => {\n    const originEntropy = originSummary.map(s => s.maxEntropy);\n    return [0, Math.max(...originEntropy)];\n  }, [originSummary])\n\n  const onRenderCompactCard = (item: Record) => {\n    return (\n      <div className=\"field-hover-card\">\n        <h2>{item.fieldName}</h2>\n        <div>Field entropy is { Number(item.entropy).toFixed(2) }</div>\n        <div className=\"chart-vertical-margin-container\" >\n          <DistributionChart x=\"memberName\" y=\"count\" fieldType={item.type as FieldType} dataSource={item.distribution} />\n        </div>\n        \n      </div>\n    )\n  }\n  const onRenderExpandedCard = (item: Record) => {\n    const name = item.fieldName;\n    const target = groupedSummary.find(s => s.fieldName === name + '(group)')\n    return (\n      <div className=\"field-hover-card\">\n        {\n          target ? <div>\n            <h3>{target.fieldName}</h3>\n            <div>Field entropy is { Number(target.entropy).toFixed(2) }</div>\n            <div className=\"chart-vertical-margin-container\">\n              <DistributionChart x=\"memberName\" y=\"count\" fieldType={target.type as FieldType} dataSource={target.distribution} />\n            </div>\n          </div> : <div>This field is not grouped.</div>\n        }\n      </div>\n    )\n  }\n\n\n\n  const renderItemColumn = (item: Record, index?: number, column?: IColumn) => {\n    if (column !== undefined) {\n      const name = item.fieldName;\n      const target = groupedSummary.find(s => s.fieldName === name + '(group)')\n      const expandingCardProps: IExpandingCardProps = {\n        onRenderCompactCard,\n        onRenderExpandedCard,\n        renderData: item,\n        compactCardHeight: 320,\n        expandedCardHeight: target ? 320 : 40\n      }\n      const fieldContent = item[column.fieldName!];\n      let bgColor: [number, number, number] = [255, 255, 255];\n      switch (column.key) {\n        case 'type':\n          return <div>\n            <Icon iconName={getIconNameByFieldType(fieldContent)} /> {fieldContent}\n          </div>\n        case 'entropy':\n        case 'maxEntropy':\n          bgColor = getValueColor(item[column.key], entropyRange);\n          let fontColor = contrastColor(bgColor)\n          let bgColorStr = `rgb(${bgColor.join(',')})`\n          let fontColorStr = `rgb(${contrastColor(bgColor).join(',')})`\n          return (\n            <HoverCard expandedCardOpenDelay={800} expandingCardProps={expandingCardProps} instantOpenOnClick={true}>\n              <div style={{ boxShadow: `${bgColorStr} 0px 0px 0px 10px`, backgroundColor: bgColorStr, color: fontColorStr }}>{fieldContent}</div>\n            </HoverCard>\n          )\n        default:\n          return <HoverCard expandedCardOpenDelay={800} expandingCardProps={expandingCardProps} instantOpenOnClick={true}>\n          <div>{fieldContent}</div>\n        </HoverCard>\n      }\n    }\n  }\n\n  // const onRenderRow: IRenderFunction<any> = (props) => {\n  //   const customStyles: Partial<IDetailsRowStyles> = {};\n  //   customStyles.root = { backgroundColor: getValueColor(props.item['entropy'], entropyRange), color: '#fff' }\n  //   return <DetailsRow {...props} styles={customStyles} />;\n  // };\n\n  return <DetailsList compact={true} columns={columns} items={originSummary} selectionMode={SelectionMode.none} onRenderItemColumn={renderItemColumn} />\n}\n\nexport default FieldAnalsis;","import React, { useRef, useMemo, useEffect, useState } from 'react';\nimport { Subspace } from '../../service';\nimport { DetailsList, SelectionMode, IColumn, Icon, IDetailsRowProps, IDetailsRowStyles, DetailsRow, IRenderFunction, HoverCard, IExpandingCardProps } from 'office-ui-fabric-react';\nimport embed from 'vega-embed';\nimport { DataSource } from '../../global';\n\nfunction encodeArr (arr: any[]): string {\n  return arr.join(',')\n}\ninterface IndexSubspace extends Subspace {\n  index: number\n}\ninterface SubspacesProps {\n  subspaceList: Subspace[];\n  onSpaceChange: (dimensions: string[], measures: string[], matrix: number[][]) => void\n}\nconst Subspaces: React.FC<SubspacesProps> = (props) => {\n  const { subspaceList, onSpaceChange } = props;\n  const [curIndex, setCurIndex] = useState(0);\n  const spaceChart = useRef<HTMLDivElement>(null)\n  const relationChart = useRef<HTMLDivElement>(null)\n  // const subspaces = useMemo<IndexSubspace[]>(() => {\n  //   return subspaceList.map((space, index) => {\n  //     return {\n  //       ...space,\n  //       index\n  //     }\n  //   })\n  // }, [subspaceList]);\n  const range = useMemo<[number, number]>(() => {\n    let max = 0;\n    let min = Infinity;\n    for (let space of subspaceList) {\n      for (let { name, value } of space.measures) {\n        max = Math.max(max, value);\n        min = Math.min(min, value);\n      }\n    }\n    return [min, max]\n  }, [subspaceList])\n  const values = useMemo<DataSource>(() => {\n    let ans = [];\n    // todos:\n    // the fold operation here is a tmp solution. it is designed when I don't there is a api in vega to handle event listener.\n    // the fold operation here can caused a wasted of time and space.\n    // I suggested to divied it into two charts and connect the logic throgh a state manager outside the charts.\n    for (let i = 0; i < subspaceList.length; i++) {\n      let space = subspaceList[i];\n      let dimensions = encodeArr(space.dimensions)\n      for (let { name, value } of space.measures) {\n        let record: any = {\n          test: i,\n          score: space.score,\n          dimensions,\n          measureName: name,\n          measureValue: value,\n        };\n        ans.push(record)\n      }\n    }\n    return ans\n  }, [subspaceList, range])\n  useEffect(() => {\n    if (spaceChart.current && subspaceList.length > 0) {\n      embed(spaceChart.current, {\n        data: {\n          values\n        },\n        vconcat: [\n          {\n            mark: 'rect',\n            selection: {\n              dim: {\n                type: 'single',\n                on: 'click',\n                encodings: ['y']\n              }\n            },\n            encoding: {\n              x: { field: 'measureName', type: 'nominal' },\n              y: {\n                field: 'dimensions',\n                type: 'ordinal',\n                sort: { field: 'score' }\n              },\n              color: { field: 'measureValue', type: 'quantitative', aggregate: 'mean', scale: { reverse: true } },\n              opacity: {\n                condition: {selection: 'dim', value: 1},\n                value: 0.72\n              },\n            }\n          }\n        ]\n      }).then(res => {\n        res.view.addEventListener('click', function (e, item) {\n          if (item) {\n            /**\n             * record is the data record(defiend in `values`) the event contains.\n             */\n            let record = item.datum;\n            let index = subspaceList.findIndex(space => encodeArr(space.dimensions) === record.dimensions)\n\n            if (index > -1) {\n              let targetSpace = subspaceList[index];\n              onSpaceChange(targetSpace.dimensions, targetSpace.measures.map(m => m.name), targetSpace.correlationMatrix);\n              setCurIndex(index);\n            }\n          }\n        })\n      })\n    }\n  }, [subspaceList, values])\n  useEffect(() => {\n    let space = subspaceList[curIndex];\n    if (relationChart.current && subspaceList.length > 0 && space) {\n      let matrix: DataSource = [];\n      \n      for (let i = 0; i < space.correlationMatrix.length; i++) {\n          for (let j = 0; j < space.correlationMatrix[i].length; j++) {\n            matrix.push({\n              x: space.measures[i].name,\n              y: space.measures[j].name,\n              correlation: space.correlationMatrix[i][j]\n            })\n          }\n        }\n      embed(relationChart.current, {\n        data: {\n          values: matrix\n        },\n        mark: 'rect',\n        encoding: {\n          x: { field: 'x', type: 'nominal' },\n          y: { field: 'y', type: 'nominal' },\n          color: { field: 'correlation', type: 'quantitative', aggregate: 'mean' , scale: { scheme: 'redyellowgreen', domain: [-1, 1] } }\n        }\n      })\n    }\n    \n  }, [subspaceList, curIndex])\n  return <div>\n    <div ref={spaceChart}></div>\n    <div ref={relationChart}></div>\n  </div>\n}\n\nexport default Subspaces;","import React, { useEffect, useMemo, useRef } from 'react';\nimport { kruskalMST } from 'visual-insights';\nimport { useGlobalState } from '../../state';\nimport embed from 'vega-embed';\n// cluster should be used for small graph because the number of measure is limited. \n// Browser may be more likely crashed by other algorithm or data structure or memory used in the whole analysis pipline.\n/**\n * adjMatrix and measures share a common index system;\n */\ninterface ClusterBoardProps {\n  adjMatrix: number[][];\n  measures: string[];\n  onFocusGroup: (measuresInView: string[]) => void;\n}\n\ninterface VegaEdge {\n  source: number | string;\n  target: number | string;\n  value: number;\n  inCutEdge: boolean;\n}\ninterface VegaNode {\n  name: string;\n  index: number;\n  value: number;\n  group: number;\n}\ninterface TreeData { \n  nodes: VegaNode[];\n  edges: VegaEdge[]\n}\nconst ClusterBoard: React.FC<ClusterBoardProps> = (props) => {\n  const { adjMatrix, measures, onFocusGroup } = props;\n  const [state, updateState] = useGlobalState();\n  const chart = useRef<HTMLDivElement>(null);\n  // const groups = useMemo<string[][]>(() => {\n  //   return clusterMeasures({\n  //     matrix: adjMatrix,\n  //     measures,\n  //   })\n  // }, [adjMatrix, measures]);\n  const clusterResult = useMemo(() => {\n    /**\n     * todo: \n     * maxGroupNumber = the measures length / max visual channel for measure.\n     */\n    let { edgesInMST, groups } = kruskalMST(adjMatrix, state.maxGroupNumber);\n    return { edgesInMST, groups }\n  }, [adjMatrix, state.maxGroupNumber])\n  const treeData = useMemo<TreeData>(() => {\n    let { edgesInMST, groups } = clusterResult;\n    const edges: VegaEdge[] = edgesInMST.map(edge => {\n      return {\n        source: edge[0][0],\n        target: edge[0][1],\n        value: 1 / edge[1],\n        inCutEdge: edge[2]\n      }\n    });\n    const nodes: VegaNode[] = [];\n    for (let i = 0; i < groups.length; i++) {\n      nodes.push({\n        name: measures[i],\n        index: i,\n        value: 1,\n        group: groups[i]\n      })\n    }\n    return {\n      nodes,\n      edges\n    }\n  }, [measures, clusterResult])\n  useEffect(() => {\n    if (chart.current && measures.length > 0) {\n      embed(chart.current, {\n        \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n        \"width\": 700,\n        \"height\": 500,\n        \"padding\": 0,\n        \"autosize\": \"none\",\n      \n        \"signals\": [\n          { \"name\": \"cx\", \"update\": \"width / 2\" },\n          { \"name\": \"cy\", \"update\": \"height / 2\" },\n          {\n            \"description\": \"State variable for active node fix status.\",\n            \"name\": \"fix\", \"value\": false,\n            \"on\": [\n              {\n                \"events\": \"text:mouseout[!event.buttons], window:mouseup\",\n                \"update\": \"false\"\n              },\n              {\n                \"events\": \"text:mouseover\",\n                \"update\": \"fix || true\"\n              },\n              {\n                \"events\": \"[text:mousedown, window:mouseup] > window:mousemove!\",\n                \"update\": \"xy()\",\n                \"force\": true\n              }\n            ]\n          },\n          {\n            \"description\": \"Graph node most recently interacted with.\",\n            \"name\": \"node\", \"value\": null,\n            \"on\": [\n              {\n                \"events\": \"text:mouseover\",\n                \"update\": \"fix === true ? item() : node\"\n              }\n            ]\n          },\n          {\n            \"description\": \"Flag to restart Force simulation upon data changes.\",\n            \"name\": \"restart\", \"value\": false,\n            \"on\": [\n              {\"events\": {\"signal\": \"fix\"}, \"update\": \"fix && fix.length\"}\n            ]\n          }\n        ],\n      \n        \"data\": [\n          {\n            \"name\": \"node-data\",\n            values: treeData.nodes,\n          },\n          {\n            \"name\": \"link-data\",\n            values: treeData.edges\n          }\n        ],\n      \n        \"scales\": [\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"domain\": {\"data\": \"node-data\", \"field\": \"group\"},\n            \"range\": {\"scheme\": \"tableau20\"}\n          },\n          {\n            \"name\": \"colorEdge\",\n            \"type\": \"quantize\",\n            \"domain\": {\"data\": \"link-data\", \"field\": \"value\"},\n            \"range\": {\"scheme\": \"viridis\"}\n          }\n        ],\n      \n        \"marks\": [\n          {\n            \"name\": \"nodes\",\n            \"type\": \"text\",\n            \"zindex\": 1,\n      \n            \"from\": {\"data\": \"node-data\"},\n            \"on\": [\n              {\n                \"trigger\": \"fix\",\n                \"modify\": \"node\",\n                \"values\": \"fix === true ? {fx: node.x, fy: node.y} : {fx: fix[0], fy: fix[1]}\"\n              },\n              {\n                \"trigger\": \"!fix\",\n                \"modify\": \"node\", \"values\": \"{fx: null, fy: null}\"\n              }\n            ],\n      \n            \"encode\": {\n              \"enter\": {\n                \"fill\": {\"scale\": \"color\", \"field\": \"group\"},\n                \"text\": {\"field\": \"name\"},\n                \"fontSize\": {\"value\": 14},\n                \"fontWeight\": {\"value\": 600}\n              },\n              \"update\": {\n                \"cursor\": {\"value\": \"pointer\"}\n              }\n            },\n      \n            \"transform\": [\n              {\n                \"type\": \"force\",\n                \"iterations\": 300,\n                \"restart\": {\"signal\": \"restart\"},\n                \"signal\": \"force\",\n                \"forces\": [\n                  {\"force\": \"center\", \"x\": {\"signal\": \"cx\"}, \"y\": {\"signal\": \"cy\"}},\n                  {\"force\": \"collide\" },\n                  {\"force\": \"nbody\" },\n                  {\"force\": \"link\", \"links\": \"link-data\" }\n                ]\n              }\n            ]\n          },\n          {\n            \"type\": \"path\",\n            \"from\": {\"data\": \"link-data\"},\n            \"interactive\": false,\n            \"encode\": {\n              \"update\": {\n                \"stroke\": {\n                  \"scale\": \"colorEdge\",\n                  \"field\": \"value\"\n                },\n                \"strokeWidth\": {\"value\": 0.8},\n                \"opacity\": {\"value\": 0.5}\n              },\n            },\n            \"transform\": [\n              {\n                \"type\": \"linkpath\",\n                \"require\": {\"signal\": \"force\"},\n                \"shape\": \"line\",\n                \"sourceX\": \"datum.source.x\", \"sourceY\": \"datum.source.y\",\n                \"targetX\": \"datum.target.x\", \"targetY\": \"datum.target.y\"\n              }\n            ]\n          }\n        ]\n      }).then(res => {\n        res.view.addEventListener('click', function (e, item) {\n          if (item) {\n            let record = item.datum;\n            let group = record.group;\n            let measuresInView = measures.filter((mea, index) => {\n              return clusterResult.groups[index] === group\n            });\n            onFocusGroup(measuresInView);\n          }\n        })\n      })\n    }\n  }, [treeData, measures])\n  return <div ref={chart}>\n  </div>\n}\n\nexport default ClusterBoard;","import React, { useMemo, useState, useEffect } from 'react';\nimport { DataSource, Field } from '../../global';\nimport FieldAnalysisBoard from './fieldAnalysis';\nimport Subspaces from './subspaces';\nimport { FieldSummary, Subspace, combineFieldsService } from '../../service';\nimport ClusterBoard from './cluster';\nimport { specification } from 'visual-insights';\nimport { ProgressIndicator, Toggle, Slider } from 'office-ui-fabric-react';\nimport { useGlobalState } from '../../state';\nimport VegaBase from '../../demo/vegaBase';\nimport './index.css';\nconst maxMeasureInView = 4;\ninterface NoteBookProps {\n  dataSource: DataSource;\n  // dimScores: [string, number, number, Field][],\n  summary: {\n    origin: FieldSummary[];\n    grouped: FieldSummary[]\n  };\n  subspaceList: Subspace[]\n}\nconst NoteBook: React.FC<NoteBookProps> = (props) => {\n  const { summary, subspaceList, dataSource } = props;\n  const [state, updateState] = useGlobalState();\n  const [isAggregated, setIsAggregated] = useState(false);\n  interface ClusterState {\n    measures: string[];\n    dimensions: string[];\n    matrix: number[][];\n  }\n  const [clusterState, setClusterState] = useState<ClusterState>({\n    measures: [],\n    dimensions: [],\n    matrix: []\n  })\n\n  const [measuresInView, setMeasuresInView] = useState<string[]>([]);\n\n\n  // todo:\n  // should be updated after designing new specification api\n  const dimScores = useMemo<[string, number, number, Field][]>(() => {\n    return [...summary.origin, ...summary.grouped].map(field => {\n      return [field.fieldName, field.entropy, field.maxEntropy, { name: field.fieldName, type: field.type }]\n    });\n  }, [summary.origin, summary.grouped])\n\n  const spec = useMemo(() => {\n    const { dimensions, measures } = clusterState;\n    // todo\n    // this condition is not strict enough. dimScores should share same elements with dimensions and measures.\n    // maybe use try catch in future\n    try {\n      /**\n       * fieldScores is the scores info for the dims and meas in current view.\n       * dimensions should get the grouped new field.\n       * measures shall never use the grouped field.\n       */\n      const fieldScores = dimScores.filter(field => {\n        return dimensions.includes(field[0]) || measuresInView.includes(field[0])\n      })\n      const { schema } = specification(fieldScores, dataSource, dimensions, measuresInView)\n      return schema;\n    } catch (error) {\n      console.log(error)\n      return {\n        position: []\n      }\n    }\n\n  }, [dimScores, clusterState, dataSource, measuresInView])\n  useEffect(() => {\n    updateState(draft => {\n      draft.maxGroupNumber = Math.round(state.cookedMeasures.length / maxMeasureInView)\n    })\n  }, [state.cookedMeasures])\n  return <div>\n    <h3 className=\"notebook header\">Univariate Summary</h3>\n    <p className=\"state-description\">Hover your mouse over the fields and see the distails and entropy reducing strategy.</p>\n    {state.loading.univariateSummary && <ProgressIndicator description=\"analyzing\" />}\n    <div className=\"notebook content container\">\n      <FieldAnalysisBoard originSummary={summary.origin} groupedSummary={summary.grouped} />\n    </div>\n\n    <h3 className=\"notebook header\">Subspace Searching</h3>\n    <p className=\"state-description\">Try to choose one row(combination of dimensions) of the subspace and see the changes of the processes below.</p>\n    {state.loading.subspaceSearching && <ProgressIndicator description=\"analyzing\" />}\n    {!state.loading.subspaceSearching && <Slider value={state.topK.dimensionSize * 100} label=\"top k percent dimension used\" max={100} valueFormat={(value: number) => `${value}%`} showValue={true}\n      onChange={(value: number) => {\n        updateState(draft => {\n          draft.topK.dimensionSize = value / 100;\n        })\n        const selectedDimensions = state.cookedDimensions.slice(0, Math.round(state.cookedDimensions.length * value / 100));\n        combineFieldsService(dataSource, selectedDimensions, state.cookedMeasures, 'sum')\n          .then(subspaces => {\n            if (subspaces) {\n              updateState(draft => {\n                draft.subspaceList = subspaces\n              })\n            }\n          })\n      }}/>}\n      {\n        !state.loading.subspaceSearching && <Slider value={state.topK.subspacePercentSize * 100} label=\"top k percent subspace used\" max={100} valueFormat={(value: number) => `${value}%`} showValue={true}\n        onChange={(value: number) => {\n          updateState(draft => {\n            draft.topK.subspacePercentSize = value / 100;\n          })\n        }}/>\n      }\n    <div className=\"notebook content center container\">\n      <Subspaces subspaceList={subspaceList.slice(0, Math.round(subspaceList.length * state.topK.subspacePercentSize))} onSpaceChange={(dimensions, measures, matrix) => {\n        setClusterState({\n          dimensions,\n          measures,\n          matrix\n        })\n      }} />\n    </div>\n\n    <h3 className=\"notebook header\">Measurement Clustering</h3>\n    <p className=\"state-description\">Try to choose one group to visualize them.</p>\n    <Slider\n      label=\"Max Group Number\"\n      min={1}\n      max={state.cookedMeasures.length || 4}\n      step={1}\n      // defaultValue={clusterState.measures.length / 4}\n      value={state.maxGroupNumber}\n      showValue={true}\n      onChange={(value: number) => { updateState(draft => {\n        draft.maxGroupNumber = value\n      })}}\n    />\n    <div className=\"notebook content center container\">\n      <ClusterBoard adjMatrix={clusterState.matrix} measures={clusterState.measures} onFocusGroup={(measInView) => { setMeasuresInView(measInView); console.log('view in measures', measInView) }} />\n    </div>\n\n    <h3 className=\"notebook header\">Visualization</h3>\n    <p className=\"state-description\">\n      If there is no result here, try to click one group of measures in <b>Clustering</b> process above.\n    </p>\n    <Toggle checked={isAggregated} label=\"aggregate measures\" defaultChecked onText=\"On\" offText=\"Off\" onChange={(e, checked: boolean | undefined) => {setIsAggregated(!!checked)}} />\n    <div className=\"notebook content center container\">\n      <VegaBase defaultAggregated={isAggregated} defaultStack={true} aggregator={'sum'}\n        schema={spec}\n        fieldFeatures={dimScores.map(dim => dim[3])}\n        dataSource={dataSource}\n        dimensions={clusterState.dimensions} measures={measuresInView} />\n    </div>\n\n  </div>\n}\n\nexport default NoteBook;","import React from 'react';\nimport { DetailsList, SelectionMode } from 'office-ui-fabric-react';\nimport { DataSource, BIField, BIFieldType } from '../global';\nexport interface DataTableProps {\n  dataSource: DataSource,\n  fields: BIField[]\n}\nconst DataTable: React.FC<DataTableProps> = (props) => {\n  const { dataSource = [], fields = [] } = props;\n  let columns = fields.map(field => {\n    return {\n      key: field.name,\n      name: field.name,\n      fieldName: field.name,\n      minWidth: 70,\n      maxHeight: 90\n    }\n  });\n\n  return <div style={{maxHeight: 400, overflow: 'auto'}}>\n    <DetailsList items={dataSource} columns={columns} selectionMode={SelectionMode.none} />\n  </div>\n}\n\nexport default DataTable;","import React, { useState, useEffect } from 'react';\nimport { PrimaryButton, Panel, PanelType, Toggle } from 'office-ui-fabric-react';\n\nimport { BIField, BIFieldType } from '../global';\n\ninterface FieldPanelProps {\n  show: boolean;\n  onClose: () => void;\n  onUpdateConfig: (fields: BIField[]) => void;\n  fields: BIField[];\n}\nconst FieldPanel: React.FC<FieldPanelProps> = (props) => {\n  const {\n    show = false,\n    // fields = [],\n    onUpdateConfig,\n    onClose\n  } = props;\n  const [fields, setFields] = useState<BIField[]>([])\n  useEffect(() => {\n    setFields(props.fields)\n  }, [props.fields])\n  \n  function updateFieldType(field: BIField, type: BIFieldType) {\n    setFields(fields => {\n      return fields.map(f => {\n        if (field.name === f.name) {\n          return {\n            name: field.name,\n            type\n          }\n        } else {\n          return f\n        }\n      })\n    })\n  }\n\n  const onRenderFooterContent = () => <div>\n    <PrimaryButton onClick={() => { onUpdateConfig(fields); onClose(); }}>\n      Save\n    </PrimaryButton>\n  </div>\n  \n  return <Panel\n    isOpen={show}\n    type={PanelType.smallFixedFar}\n    onDismiss={onClose}\n    headerText=\"Meta Config\"\n    closeButtonAriaLabel=\"Close\"\n    onRenderFooterContent={onRenderFooterContent}\n  >\n    <div>\n      {\n        fields.map(field => <Toggle key={field.name} checked={field.type === 'dimension'} label={field.name} onText=\"dimension\" offText=\"measure\" onChange={(e, checked) => { updateFieldType(field, checked ? 'dimension' : 'measure')}} />)\n      }\n    </div>\n  </Panel>\n}\n\nexport default FieldPanel;\n","import { Cleaner } from 'visual-insights';\nimport { DataSource } from '../../global';\n\n// todo\n// cleanMethodList has redundency.\n// clean method type, cleanData(switch), cleanMethodList should be maintained in one structure.\nexport type CleanMethod = 'dropNull' | 'useMode' | 'simpleClean';\nexport function cleanData (dataSource: DataSource, dimensions: string[], measures: string[], method: CleanMethod): DataSource {\n  // hint: dropNull works really bad when we test titanic dataset.\n  // useMode fails when there are more null values than normal values;\n  switch (method) {\n    case 'dropNull':\n      return Cleaner.dropNull(dataSource, dimensions, measures);\n    case 'useMode':\n      // todo: bad props design\n      return Cleaner.useMode(dataSource, dimensions.concat(measures));  \n    case 'simpleClean':\n    default:\n      return Cleaner.simpleClean(dataSource, dimensions, measures);\n  }\n}\n\nexport const cleanMethodList: Array<{ key: CleanMethod; text: string }> = [\n  { key: 'dropNull', text: 'drop null records' },\n  { key: 'useMode', text: 'replace null with mode' },\n  { key: 'simpleClean', text: 'simple cleaning' }\n]\n","import React, { useMemo } from 'react';\nimport { BIField, DataSource, Record } from '../../global';\nimport { Transform } from '../../utils/index'\nimport {  cleanData,  CleanMethod } from './clean';\nimport { deepcopy } from '../../utils/index';\n\n\nexport function useDataSource (rawData: DataSource, fields: BIField[], cleanMethod: CleanMethod): [DataSource, DataSource] {\n  const dimensions = useMemo<string[]>(() => {\n    return fields.filter(field => field.type === 'dimension').map(field => field.name)\n  }, [fields])\n\n  const measures = useMemo<string[]>(() => {\n    return fields.filter(field => field.type === 'measure').map(field => field.name)\n  }, [fields])\n\n  const dataSource = useMemo<DataSource>(() => {\n    return rawData.map(row => {\n      let record: Record = {}\n      fields.forEach(field => {\n        record[field.name] = field.type === 'dimension' ? row[field.name] : Transform.transNumber(row[field.name])\n      })\n      return record\n    })\n  }, [rawData, fields])\n\n  const preparedData = useMemo<DataSource>(() => {\n    return cleanData(deepcopy(dataSource), dimensions, measures, cleanMethod);\n  }, [dimensions, measures, dataSource, cleanMethod])\n\n  return [dataSource, preparedData]\n}","// todo replace the deepcopy with a safe and faster one.\nexport default function deepcopy(dataSource: any) {\n  return JSON.parse(JSON.stringify(dataSource))\n}","import React, { useState, useRef } from \"react\";\nimport { useGlobalState } from \"../../state\";\nimport { FileLoader, useComposeState } from '../../utils/index';\nimport { ComboBox, PrimaryButton, IconButton, Callout, Stack, CommandBar, ChoiceGroup, IChoiceGroupOption, Slider, Label } from 'office-ui-fabric-react';\nimport DataTable from '../../components/table';\nimport FieldPanel from '../../components/fieldConfig';\nimport { DataSource,  BIField } from '../../global';\nimport {  cleanMethodList, CleanMethod } from './clean';\nimport { Cleaner, Sampling } from 'visual-insights';\nimport { useDataSource } from './useDataSource';\nimport { useId } from '@uifabric/react-hooks';\n\nenum SampleKey {\n  none = 'none',\n  reservoir = 'reservoir',\n}\n\nconst SampleOptions = [\n  {\n    key: SampleKey.none,\n    text: 'none'\n  },\n  {\n    key: SampleKey.reservoir,\n    text: 'reservoir'\n  }\n];\n\ninterface PageStatus {\n  show: {\n    insightBoard: boolean;\n    configPanel: boolean;\n    fieldConfig: boolean;\n    dataConfig: boolean;\n  }\n}\n\ninterface DataSourceBoardProps {\n  onExtractInsights: () => void;\n}\n\nconst DataSourceBoard: React.FC<DataSourceBoardProps> = (props) => {\n  const [state,updateState, dispatch] = useGlobalState();\n  const [pageStatus, setPageStatus] = useComposeState<PageStatus>({\n    show: {\n      insightBoard: false,\n      fieldConfig: false,\n      configPanel: false,\n      dataConfig: false\n    }\n  })\n  const [cleanMethod, setCleanMethod] = useState<CleanMethod>('dropNull');\n  const [sampleMethod, setSampleMethod] = useState<SampleKey>(SampleKey.none)\n  const [sampleSize, setSampleSize] = useState<number>(0.2);\n\n  const dataSetting = useRef<HTMLDivElement>(null);\n  const fileEle = useRef<HTMLInputElement>(null);\n\n  const [dataSource, preparedData] = useDataSource(state.rawData, state.fields, cleanMethod);\n\n  const labelId = useId('labelElement');\n\n  async function fileUploadHanlder () {\n    if (fileEle.current !== null && fileEle.current.files !== null) {\n      const file = fileEle.current.files[0];\n      /**\n       * tmpFields is fields cat by specific rules, the results is not correct sometimes, waitting for human's input\n       */\n      let tmpFields: BIField[] = [];\n      let rawData: DataSource = [];\n\n      if (file.type === 'text/csv' || file.type === 'application/vnd.ms-excel') {\n        rawData = await FileLoader.csvLoader(file);\n      } else if (file.type === 'application/json') {\n        rawData = await FileLoader.jsonLoader(file);\n      } else {\n        throw new Error(`unsupported file type=${file.type} `)\n      }\n      if (sampleMethod === SampleKey.reservoir) {\n        rawData = Sampling.reservoirSampling(rawData, Math.round(rawData.length * sampleSize));\n      }\n      rawData = Cleaner.dropNullColumn(rawData, Object.keys(rawData[0])).dataSource;\n      tmpFields = Object.keys(rawData[0]).map(fieldName => {\n        return {\n          name: fieldName,\n          type: rawData.every(row => {\n            return !isNaN(row[fieldName]) || row[fieldName] === undefined;\n          }) ? 'measure' : 'dimension'\n        }\n      });\n      updateState(draft => {\n        draft.fields = tmpFields;\n        draft.rawData = rawData;\n      })\n      setPageStatus(draft => {\n        draft.show.dataConfig = false;\n      });\n    }\n  }\n  // const analysisHandler = startAnalysis(preparedData, state.fields);\n\n  const commandBarList = [\n    {\n      key: 'upload',\n      name: 'Upload',\n      iconProps: { iconName: 'Upload' },\n      onClick: () => {\n        if (fileEle.current) {\n          fileEle.current.click();\n        }\n      }\n    }\n  ]\n\n  return (\n    <div className=\"content-container\">\n      <FieldPanel\n        fields={state.fields}\n        show={pageStatus.show.fieldConfig}\n        onUpdateConfig={fields => {\n          updateState(draft => {\n            draft.fields = fields;\n          });\n        }}\n        onClose={() => {\n          setPageStatus(draft => {\n            draft.show.fieldConfig = false;\n          });\n        }}\n      />\n      <div className=\"card\">\n        <Stack horizontal>\n          <PrimaryButton\n            disabled={dataSource.length === 0}\n            iconProps={{ iconName: \"Financial\" }}\n            text=\"Extract Insights\"\n            onClick={() => {\n              dispatch('extractInsights', {\n                dataSource: preparedData,\n                fields: state.fields\n              })\n              props.onExtractInsights();\n            }}\n          />\n          <div ref={dataSetting}>\n            <IconButton\n              iconProps={{ iconName: \"ExcelDocument\" }}\n              title=\"Upload\"\n              ariaLabel=\"upload data\"\n              onClick={() => {\n                setPageStatus(draft => {\n                  draft.show.dataConfig = true;\n                });\n              }}\n            />\n            <Callout\n              style={{ maxWidth: 300 }}\n              className=\"vi-callout-callout\"\n              role=\"alertdialog\"\n              gapSpace={0}\n              target={dataSetting.current}\n              onDismiss={() => {\n                setPageStatus(draft => {\n                  draft.show.dataConfig = false;\n                });\n              }}\n              setInitialFocus={true}\n              hidden={!pageStatus.show.dataConfig}\n            >\n              <div className=\"vi-callout-header\">\n                <p className=\"vi-callout-title\">Upload Your own dataset</p>\n              </div>\n              <div className=\"vi-callout-inner\">\n                <div className=\"vi-callout-content\">\n                  <p className=\"vi-callout-subTex\">\n                    .csv, .json are supportted.\n                  </p>\n                </div>\n                <div>\n                <Label id={labelId} required={true}>\n                  Sampling\n                </Label>\n                <ChoiceGroup\n                  defaultSelectedKey=\"B\"\n                  options={SampleOptions}\n                  selectedKey={sampleMethod}\n                  onChange={(ev: any, option: IChoiceGroupOption | undefined) => {\n                    if (option) {\n                      setSampleMethod(option.key as SampleKey)\n                    }\n                  }}\n                  ariaLabelledBy={labelId}\n                />\n                {\n                  sampleMethod !== SampleKey.none && <Slider\n                    label=\"sample size(percent)\"\n                    min={0}\n                    max={1}\n                    step={0.001}\n                    value={sampleSize}\n                    showValue={true}\n                    valueFormat={(value: number) => `${(value * 100).toFixed(1)}%`}\n                    onChange={(val: number) => { setSampleSize(val) }}\n                  />\n                }\n                </div>\n                <div className=\"vi-callout-actions\">\n                  <input\n                    type=\"file\"\n                    ref={fileEle}\n                    multiple\n                    accept=\"*\"\n                    style={{ display: \"none\" }}\n                    onChange={fileUploadHanlder}\n                  />\n                  <CommandBar\n                    overflowButtonProps={{ name: \"More\" }}\n                    items={commandBarList}\n                  />\n                </div>\n              </div>\n            </Callout>\n          </div>\n          <IconButton\n            iconProps={{ iconName: \"Settings\" }}\n            title=\"Field Setting\"\n            ariaLabel=\"field setting\"\n            onClick={() => {\n              setPageStatus(draft => {\n                draft.show.fieldConfig = true;\n              });\n            }}\n          />\n        </Stack>\n        <div style={{ margin: \"20px 0px\" }}>\n          <ComboBox\n            styles={{ root: { maxWidth: \"180px\" } }}\n            selectedKey={cleanMethod}\n            label=\"Clean Method\"\n            allowFreeform={true}\n            autoComplete=\"on\"\n            options={cleanMethodList}\n            onChange={(e, option) => {\n              option && setCleanMethod(option.key as CleanMethod);\n            }}\n          />\n        </div>\n        <p style={{ fontSize: 12, fontWeight: 400, color: \"#595959\" }}>\n          Remember to adjust the fields' types and cleaning strategy before\n          extracting insights.\n        </p>\n        <i style={{ fontSize: 12, fontWeight: 300, color: \"#595959\" }}>\n          Number of records {preparedData.length}\n        </i>\n        <DataTable fields={state.fields} dataSource={preparedData} />\n      </div>\n    </div>\n  );\n};\n\nexport default DataSourceBoard;\n","import React, { useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { DataSource } from \"../../global\";\nimport datalib from \"datalib\";\n\nfunction numberWithCommas(x: number): string {\n  let parts = x.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.join(\".\");\n}\n\nconst Card = styled.div`\n  float: left;\n  padding: 1rem;\n  border: 1px solid #f5f5f5;\n  margin: 1rem;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB',\n  'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif, 'Apple Color Emoji',\n  'Segoe UI Emoji', 'Segoe UI Symbol';\n  .indicator-card.header {\n    color: #8c8c8c;\n    margin-top: 0px;\n    margin-bottom: 0px;\n    font-size: 20px;\n    line-height: 28px;\n    font-weight: 400;\n  }\n  .indicator-card.content {\n    color: #0078d4;\n    font-size: 56px;\n    line-height: 64px;\n    font-weight: 400;\n    margin: 0px;\n  }\n`;\ninterface IndicatorProps {\n  dataSource: DataSource;\n  measures: string[];\n  operator?: 'sum' | 'mean' | 'max' | 'min';\n}\nconst IndicatorCard: React.FC<IndicatorProps> = props => {\n  const { dataSource = [], measures = [], operator = 'sum' } = props;\n  const value = useMemo(() => {\n    if (measures.length === 0 || dataSource.length === 0) {\n      return '-'\n    }\n    let ans = 0;\n    try {\n      ans = datalib[operator](dataSource.map(d => d[measures[0]]));\n    } catch (error) {\n      console.log('operator does not exist or not in vega/datalib.')\n    }\n    if (Math.abs(ans - Math.round(ans)) > 0.00001) {\n      ans = Number(ans.toFixed(2));\n    }\n    return numberWithCommas(ans);\n  }, [dataSource, measures]);\n\n  return (\n    <Card>\n      <h4 className=\"indicator-card header\">{measures[0]} {operator && `(${operator})`}</h4>\n      <h1 className=\"indicator-card content\">{ value }</h1>\n    </Card>\n  );\n};\n\nexport default IndicatorCard;\n","import React, { useMemo, useEffect, useState } from \"react\";\nimport { DashBoard } from \"../../service\";\nimport { DataSource, Field, FieldType } from \"../../global\";\nimport { specification } from \"visual-insights\";\nimport embed, { VisualizationSpec } from \"vega-embed\";\nimport { VegaLite } from \"react-vega\";\nimport { geomTypeMap } from \"../../demo/vegaBase\";\nimport produce from \"immer\";\nimport { useComposeState } from \"../../utils/index\";\nimport { IconButton } from \"office-ui-fabric-react\";\nimport IndicatorCard from \"./indicatorCard\";\n\nconst IndicatorCardType = \"indicator\" as const;\n\ninterface CombinedChartProps {\n  dashBoard: DashBoard;\n  dataSource: DataSource;\n  dimScores: [string, number, number, Field][];\n}\n\ninterface GlobalFilters {\n  [key: string]: any[];\n}\n\nfunction getFieldScale (dataSource: DataSource, field: XMLDocument, type: 'quantitative' | 'norminal') {\n  return \n}\n\nconst CombinedChart: React.FC<CombinedChartProps> = props => {\n  const { dashBoard, dataSource, dimScores } = props;\n  const [globalFilters, setGlobalFilters] = useComposeState<GlobalFilters>({});\n  const [chartStateList, setChartStateList] = useState<boolean[]>([]);\n\n  useEffect(() => {\n    setChartStateList(dashBoard.map(() => false));\n  }, [dashBoard]);\n  const filedDomains = useMemo(() => {\n    const fieldList = dimScores.map(f => f[0]);\n    let domainDict: {[key: string]: any[]} = {};\n    let dsLen = dataSource.length;\n    let fLen = fieldList.length;\n    for (let i = 0; i < fLen; i++) {\n      if (dimScores[i][3].type !== 'quantitative') {\n        continue;\n        // tmp\n      }\n      let fieldName = fieldList[i];\n      domainDict[fieldName] = [0, 100];\n      let min = Infinity;\n      let max = -Infinity;\n      for (let j = 0; j < dsLen; j++) {\n        min = Math.min(dataSource[j][fieldName], min)\n        max = Math.max(dataSource[j][fieldName], max)\n      }\n      domainDict[fieldName] = [min, max];\n    }\n    return domainDict;\n  }, [dataSource, dimScores])\n  const chartSpecList = useMemo(() => {\n    if (!dashBoard || !dataSource || !dimScores) {\n      return [];\n    }\n    return dashBoard.map(board => {\n      const { dimensions, measures, type } = board;\n      const fieldScores = dimScores.filter(field => {\n        return dimensions.includes(field[0]) || measures.includes(field[0]);\n      });\n      let { schema } = specification(\n        fieldScores,\n        dataSource,\n        dimensions,\n        measures\n      );\n      schema.position = schema.position || [];\n      schema.color = schema.color || [];\n      schema.opacity = schema.opacity || [];\n      schema.size = schema.size || [];\n      schema.shape = schema.shape || [];\n      schema.geomType = schema.geomType || [];\n      return {\n        dimensions,\n        measures,\n        type,\n        schema\n      };\n    });\n  }, [dashBoard, dataSource, dimScores]);\n\n  const fieldFeatures = dimScores.map(dim => dim[3]);\n\n  function getFieldType(field: string): FieldType {\n    let targetField = fieldFeatures.find(f => f.name === field);\n    return targetField ? targetField.type : \"nominal\";\n  }\n\n  function shouldFieldAggregate(\n    field: string,\n    dimensions: string[],\n    measures: string[],\n    geomType: string\n  ): boolean {\n    if (geomType === \"point\") {\n      return false;\n    }\n    const fieldType = getFieldType(field);\n    if (fieldType === \"quantitative\" && measures.includes(field)) {\n      return true;\n    }\n    return false;\n  }\n\n  const specList = useMemo<any[]>(() => {\n    return chartSpecList.map((spec, index) => {\n      const { dimensions, measures, schema, type } = spec;\n      if (type === \"target\" && measures.length === 1) {\n        return {\n          type: IndicatorCardType,\n          measures: measures,\n          operator: \"sum\"\n        };\n      }\n\n      const markType =\n        schema.geomType![0] && geomTypeMap[schema.geomType![0]]\n          ? geomTypeMap[schema.geomType![0]]\n          : schema.geomType![0];\n      const xType = getFieldType(schema.position![0]);\n      const yType = getFieldType(schema.position![1]);\n      const xAgg = shouldFieldAggregate(schema.position![0], dimensions, measures, markType);\n      const yAgg = shouldFieldAggregate(schema.position![1], dimensions, measures, markType);\n      const mustDefineScale = xType === 'quantitative' && yType === 'quantitative';\n      return {\n        // transform: filters.length > 0 && [...filters],\n        // width: 300,\n        data: { name: \"dataSource\" },\n        // padding: 26,\n        autosize: {\n          type: \"pad\"\n        },\n        mark: markType,\n        selection: {\n          sl: {\n            type: markType === \"bar\" ? \"single\" : \"interval\",\n            encodings: markType === \"bar\" ? [\"x\"] : undefined\n          }\n        },\n        encoding: {\n          x: schema.position![0] && {\n            field: schema.position![0],\n            type: getFieldType(schema.position![0]),\n            aggregate: xAgg && 'sum',\n            scale: mustDefineScale && !xAgg ? { domain: filedDomains[schema.position![0]] } : undefined\n          },\n          y: schema.position![1] && {\n            field: schema.position![1],\n            type: getFieldType(schema.position![1]),\n            aggregate: yAgg && 'sum',\n            scale: mustDefineScale && !yAgg ? { domain: filedDomains[schema.position![1]] } : undefined\n          },\n          size: schema.size![0] && {\n            field: schema.size![0],\n            type: getFieldType(schema.size![0])\n          },\n          opacity: schema.opacity![0] && {\n            field: schema.opacity![0],\n            type: getFieldType(schema.opacity![0])\n          },\n          shape: schema.shape![0] && {\n            field: schema.shape![0],\n            type: getFieldType(schema.shape![0])\n          },\n          color: schema.color![0] && {\n            field: schema.color![0],\n            type: schema.color![0] && getFieldType(schema.color![0])\n          }\n        }\n      };\n    }) as any;\n  }, [chartSpecList, filedDomains]);\n  const dataSourceContainer = useMemo(() => {\n    return { dataSource };\n  }, [dataSource, specList, dimScores]);\n\n  const signalHandler = useMemo(() => {\n    return dashBoard.map((d, index) => {\n      return {\n        sl: (name: any, values: any) => {\n          if (chartStateList[index]) {\n            setGlobalFilters(draft => {\n              if (Object.keys(values).length === 0) {\n                for (let key in draft) {\n                  // delete draft[key]\n                  draft[key] = [];\n                }\n              } else {\n                for (let key in values) {\n                  draft[key] = values[key];\n                }\n              }\n            });\n          }\n        }\n      };\n    });\n  }, [dashBoard, chartStateList, dimScores, specList]);\n  const vsourceList = useMemo<Array<{ dataSource: DataSource }>>(() => {\n    let ans = [];\n    const filters = Object.keys(globalFilters).map(fieldName => {\n      return {\n        fieldName: fieldName,\n        filter: globalFilters[fieldName],\n        // protentional risk\n        isRange:\n          globalFilters[fieldName].length === 2 &&\n          typeof globalFilters[fieldName][0] === \"number\" &&\n          typeof globalFilters[fieldName][1] === \"number\" &&\n          globalFilters[fieldName][0] < globalFilters[fieldName][1]\n      };\n    });\n    for (let i = 0; i < dashBoard.length; i++) {\n      if (chartStateList[i]) {\n        ans.push(dataSourceContainer);\n        continue;\n      }\n      const ds = dataSource.filter(record => {\n        return filters.every(f => {\n          if (f.filter.length === 0) {\n            return true;\n          }\n          if (f.isRange) {\n            return (\n              record[f.fieldName] >= f.filter[0] &&\n              record[f.fieldName] <= f.filter[1]\n            );\n          } else {\n            return f.filter.includes(record[f.fieldName]);\n          }\n        });\n      });\n      ans.push({ dataSource: ds });\n    }\n    return ans;\n  }, [\n    dashBoard,\n    globalFilters,\n    dataSource,\n    chartStateList,\n    specList,\n    dataSourceContainer\n  ]);\n  return (\n    <div>\n      {specList.map((spec, index) =>\n        spec.type === IndicatorCardType ? (\n          <IndicatorCard\n            key={`ds-chart-${index}`}\n            dataSource={vsourceList[index].dataSource}\n            measures={spec.measures}\n          />\n        ) : (\n          <div\n            key={`ds-chart-${index}`}\n            style={{\n              float: \"left\",\n              padding: \"4px\",\n              margin: \"2px\",\n              height: \"380px\",\n              overflowY: \"auto\"\n            }}\n          >\n            <div\n              style={{ float: \"left\", minWidth: \"300px\", minHeight: \"300px\" }}\n            >\n              <VegaLite\n                data={vsourceList[index]}\n                spec={spec}\n                actions={true}\n                signalListeners={\n                  chartStateList[index] && (signalHandler[index] as any)\n                }\n              />\n            </div>\n            <div style={{ float: \"left\" }}>\n              <IconButton\n                iconProps={{\n                  iconName: chartStateList[index] ? \"FilterSolid\" : \"Filter\"\n                }}\n                onClick={() => {\n                  setChartStateList(list => {\n                    let nextList = [...list];\n                    nextList[index] = !nextList[index];\n                    return nextList;\n                  });\n                }}\n              />\n            </div>\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default CombinedChart;\n","import React, { useState } from \"react\";\nimport { PrimaryButton, DefaultButton, Stack, Separator, ProgressIndicator } from \"office-ui-fabric-react\";\nimport { useGlobalState } from \"../../state\";\nimport CombinedChart from \"./combinedChart\";\n\nconst DashBoardPage: React.FC = props => {\n  const [state, updateState, dispatch, getters] = useGlobalState();\n  const [dashBoardIndex, setDashBoardIndex] = useState(0);\n  const {\n    subspaceList,\n    cookedDataSource,\n    cookedDimensions,\n    cookedMeasures,\n    dashBoardList\n  } = state;\n  const { dimScores } = getters;\n  return (\n    <div className=\"content-container\">\n      <div className=\"card\">\n        <PrimaryButton\n          text=\"Generate Dashboard\"\n          disabled={subspaceList.length === 0}\n          iconProps={{ iconName: \"AreaChart\" }}\n          onClick={() => {\n            dispatch(\"getDashBoard\", {\n              dataSource: cookedDataSource,\n              dimensions: cookedDimensions,\n              measures: cookedMeasures\n            });\n          }}\n        />\n        { state.loading.dashBoard && <ProgressIndicator description=\"generating dashboard\" /> }\n        <Separator>current page no: {dashBoardIndex + 1} of {dashBoardList.length}</Separator>\n        <Stack horizontal tokens={{ childrenGap: 20 }}>\n          <DefaultButton\n            text=\"Last\"\n            onClick={() => {\n              setDashBoardIndex(index => (index + dashBoardList.length - 1) % dashBoardList.length)\n            }}\n            allowDisabledFocus\n          />\n          <DefaultButton\n            text=\"Next\"\n            onClick={() => {\n              setDashBoardIndex(index => (index + 1) % dashBoardList.length)\n            }}\n            allowDisabledFocus\n          />\n        </Stack>\n        <p className=\"state-description\">\n          Double click the chart with selection to clear selection(filter).\n        </p>\n        <div\n          style={{\n            overflowX: \"auto\",\n            margin: \"1rem\",\n            border: \"1px solid #e8e8e8\"\n          }}\n        >\n          {dashBoardList[dashBoardIndex] && dashBoardList[dashBoardIndex].length > 0 && (\n            <CombinedChart\n              dataSource={cookedDataSource}\n              dashBoard={dashBoardList[dashBoardIndex]}\n              dimScores={dimScores}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashBoardPage;\n","import React from \"react\";\nimport { useGlobalState, GlobalStateProvider } from \"./state\";\nimport { Pivot, PivotItem } from \"office-ui-fabric-react\";\nimport { useComposeState } from \"./utils/index\";\nimport \"./App.css\";\n\nimport Gallery from \"./pages/gallery/index\";\nimport NoteBook from \"./pages/notebook/index\";\nimport DataSourceBoard from \"./pages/dataSource/index\";\nimport DashBoardPage from './pages/dashBoard/index';\n\nconst pivotList = [\n  {\n    title: \"DataSource\",\n    itemKey: \"pivot-\" + 1\n  },\n  {\n    title: \"NoteBook\",\n    itemKey: \"pivot-\" + 2\n  },\n  {\n    title: \"Explore\",\n    itemKey: \"pivot-\" + 3\n  },\n  {\n    title: \"DashBaord\",\n    itemKey: \"pivot-\" + 4\n  }\n];\n\ninterface PageStatus {\n  show: {\n    insightBoard: boolean;\n    configPanel: boolean;\n    fieldConfig: boolean;\n    dataConfig: boolean;\n  };\n  current: {\n    pivotKey: string;\n  };\n}\n\nfunction App() {\n  const [state, updateState] = useGlobalState();\n  const [pageStatus, setPageStatus] = useComposeState<PageStatus>({\n    show: {\n      insightBoard: false,\n      fieldConfig: false,\n      configPanel: false,\n      dataConfig: false\n    },\n    current: {\n      pivotKey: pivotList[0].itemKey\n    }\n  });\n\n  return (\n    <div>\n      <div className=\"header-bar\">\n        <div className=\"ms-Grid-row\">\n          <div className=\"ms-Grid-col ms-sm6 ms-md4 ms-lg1\">\n            <a\n              href=\"https://github.com/ObservedObserver/visual-insights\"\n              className=\"logo\"\n            >\n              <img src=\"https://chspace.oss-cn-hongkong.aliyuncs.com/logos/logo.png\" />\n            </a>\n          </div>\n          <div className=\"ms-Grid-col ms-sm6 ms-md8 ms-lg11\">\n            <Pivot\n              selectedKey={pageStatus.current.pivotKey}\n              onLinkClick={item => {\n                item &&\n                  item.props.itemKey &&\n                  setPageStatus(draft => {\n                    draft.current.pivotKey = item.props.itemKey!;\n                  });\n              }}\n              headersOnly={true}\n            >\n              {pivotList.map(pivot => (\n                <PivotItem\n                  key={pivot.itemKey}\n                  headerText={pivot.title}\n                  itemKey={pivot.itemKey}\n                />\n              ))}\n            </Pivot>\n          </div>\n        </div>\n      </div>\n      {pageStatus.current.pivotKey === \"pivot-3\" && (\n        <Gallery\n          subspaceList={state.subspaceList}\n          dataSource={state.cookedDataSource}\n          summary={state.summary}\n        />\n      )}\n      {pageStatus.current.pivotKey === \"pivot-1\" && <DataSourceBoard onExtractInsights={() => {\n        setPageStatus(draft => {\n          draft.current.pivotKey = \"pivot-3\";\n          draft.show.insightBoard = true;\n        });\n      }\n      } />}\n      {pageStatus.current.pivotKey === \"pivot-2\" && (\n        <div className=\"content-container\">\n          <div className=\"card\">\n            <NoteBook\n              summary={state.summary}\n              subspaceList={state.subspaceList}\n              dataSource={state.cookedDataSource}\n            />\n          </div>\n        </div>\n      )}\n      {\n        pageStatus.current.pivotKey === 'pivot-4' && <DashBoardPage />\n      }\n    </div>\n  );\n}\n\nexport default function() {\n  return (\n    <GlobalStateProvider>\n      <App />\n    </GlobalStateProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { initializeIcons } from '@uifabric/icons';\nimport * as serviceWorker from './serviceWorker';\ninitializeIcons();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}