{"version":3,"sources":["../webpack/bootstrap","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../../../node_modules/cube-core/built/index.js","../../src/sum.js","../../src/mean.js","../../src/sum_nth_power_deviations.js","../../src/variance.js","../../src/standard_deviation.js","../../src/mode_sorted.js","../../src/numeric_sort.js","../../src/min.js","../../src/max.js","../../src/sum_simple.js","../../src/quantile_sorted.js","../../src/quickselect.js","../../src/quantile.js","../../src/quantile_rank_sorted.js","../../src/interquartile_range.js","../../src/median.js","../../src/median_absolute_deviation.js","../../src/shuffle_in_place.js","../../src/shuffle.js","../../src/sample.js","../../src/make_matrix.js","../../src/unique_count_sorted.js","../../src/ckmeans.js","../../src/sample_covariance.js","../../src/sample_variance.js","../../src/sample_standard_deviation.js","../../src/combine_means.js","../../src/mean_simple.js","../../src/root_mean_square.js","../../src/bayesian_classifier.js","../../src/perceptron.js","../../src/epsilon.js","../../src/factorial.js","../../src/gammaln.js","../../src/chi_squared_distribution_table.js","../../src/kernel_density_estimation.js","../../src/standard_normal_table.js","../../src/error_function.js","../../src/inverse_error_function.js","../../src/sign.js","../../src/euclidean_distance.js","../../src/k_means_cluster.js","../../src/silhouette.js","../../src/relative_error.js","../../src/add_to_mean.js","../../src/approx_equal.js","../../src/bernoulli_distribution.js","../../src/binomial_distribution.js","../../src/bisect.js","../../src/chi_squared_goodness_of_fit.js","../../src/chunk.js","../../src/combinations.js","../../src/combinations_replacement.js","../../src/combine_variances.js","../../src/cumulative_std_normal_probability.js","../../src/equal_interval_breaks.js","../../src/extent.js","../../src/extent_sorted.js","../../src/gamma.js","../../src/geometric_mean.js","../../src/harmonic_mean.js","../../src/linear_regression.js","../../src/linear_regression_line.js","../../src/max_sorted.js","../../src/median_sorted.js","../../src/min_sorted.js","../../src/mode.js","../../src/mode_fast.js","../../src/permutation_test.js","../../src/permutations_heap.js","../../src/poisson_distribution.js","../../src/probit.js","../../src/product.js","../../src/quantile_rank.js","../../src/r_squared.js","../../src/sample_correlation.js","../../src/sample_kurtosis.js","../../src/sample_skewness.js","../../src/sample_with_replacement.js","../../src/silhouette_metric.js","../../src/subtract_from_mean.js","../../src/t_test.js","../../src/t_test_two_sample.js","../../src/z_score.js","../../../node_modules/cube-core/built/utils/aggregation.js","../../../node_modules/cube-core/built/core/index.js","../../../node_modules/cube-core/built/core/periodCube.js","../../../node_modules/cube-core/built/core/momentCube.js","../../../node_modules/cube-core/built/utils/transform.js","../../../node_modules/regenerator-runtime/runtime.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../../node_modules/visual-insights/build/esm/statistics/correlation.js","../../../node_modules/visual-insights/build/esm/statistics/utils.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../../../node_modules/visual-insights/build/esm/statistics/linearRegression.js","../../../node_modules/visual-insights/build/esm/statistics/aggregation.js","../../../node_modules/visual-insights/build/esm/insights/config.js","../../../node_modules/visual-insights/build/esm/ml/cluster/kruskal.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/typeof.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../../../node_modules/visual-insights/build/esm/ml/classification/knn.js","../../../node_modules/visual-insights/build/esm/sampling/index.js","../../../node_modules/visual-insights/build/esm/constant.js","../../../node_modules/visual-insights/build/esm/ml/index.js","../../../node_modules/visual-insights/build/esm/ml/outlier/isolationForest.js","../../../node_modules/visual-insights/build/esm/insights/subspaces.js","../../../node_modules/visual-insights/build/esm/insights/impurity.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../../../node_modules/visual-insights/build/esm/insights/intention/groups.js","../../../node_modules/visual-insights/build/esm/insights/dev.js","../../../node_modules/visual-insights/build/esm/univariateSummary/index.js","../../../node_modules/visual-insights/build/esm/utils/common.js","../../../node_modules/visual-insights/build/esm/insights/InsightFlow/fieldSummary.js","../../../node_modules/visual-insights/build/esm/insights/InsightFlow/dataGraph.js","../../../node_modules/visual-insights/build/esm/insights/InsightFlow/workerCollection.js","../../../node_modules/visual-insights/build/esm/cube/cuboid.js","../../../node_modules/visual-insights/build/esm/cube/index.js","../../../node_modules/visual-insights/build/esm/insights/workers/IForestOutlier.js","../../../node_modules/visual-insights/build/esm/insights/workers/LRTrend.js","../../../node_modules/visual-insights/build/esm/insights/InsightFlow/specification/encoding.js","../../../node_modules/visual-insights/build/esm/insights/InsightFlow/engine.js","workers/timer.js","workers/combineFields.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","this","__assign","index_1","require","transform_1","aggregation_1","operatorMap","sum_unsafe","mean","count","createCube","_a","type","_b","aggFunc","_c","factTable","_d","dimensions","_e","measures","periodCube","momentCube","default","props","asFields","operator","dataSource","cube","table","tree2Table","forEach","row","as","__export","sum","x","length","let","transition","correction","Math","abs","Error","sumNthPowerDeviations","const","tempValue","meanValue","pow","variance","standardDeviation","v","sqrt","modeSorted","sorted","last","NaN","maxSeen","seenThis","numericSort","slice","sort","a","b","min","max","sumSimple","quantileSorted","idx","ceil","quickselect","arr","k","left","right","z","log","exp","sd","floor","j","swap","tmp","quantile","copy","Array","isArray","indices","push","quantileIndex","compare","stack","pop","quantileSelect","results","len","quantileRankSorted","mid","lo","hi","u","interquartileRange","q1","q2","median","medianAbsoluteDeviation","medianValue","medianAbsoluteDeviations","shuffleInPlace","randomSource","random","temporary","index","shuffle","sample","makeMatrix","columns","rows","matrix","column","uniqueCountSorted","lastSeenValue","uniqueValueCount","ssq","sums","sumsOfSquares","sji","muji","fillMatrixColumn","iMin","iMax","cluster","backtrackMatrix","jlow","ssqjlow","ssqj","jhigh","sampleCovariance","y","xmean","ymean","sampleVariance","sampleStandardDeviation","sampleVarianceX","combineMeans","mean1","n1","mean2","n2","meanSimple","rootMeanSquare","sumOfSquares","BayesianClassifier","totalCount","data","train","item","category","score","odds","oddsSums","combination","PerceptronModel","weights","bias","predict","features","label","prediction","gradient","epsilon","factorial","accumulator","COEFFICIENTS","LOGSQRT2PI","PI","chiSquaredDistributionTable","1","0.995","0.99","0.975","0.95","0.9","0.5","0.1","0.05","0.025","0.01","0.005","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","40","50","60","70","80","90","100","SQRT_2PI","kernels","gaussian","bandwidthMethods","nrd","stddev","iqr","kernelDensityEstimation","X","kernel","bandwidthMethod","kernelFn","bandwidth","cumulativeDistribution","round","standardNormalTable","errorFunction","tau","inverseErrorFunction","inv","sign","TypeError","euclideanDistance","diff","labelPoints","points","centroids","map","minDist","Number","MAX_VALUE","dist","calculateCentroids","labels","numCluster","dimension","counts","fill","numPoints","point","current","centroid","calculateChange","total","silhouette","groupings","numGroups","result","distances","meanDistanceFromPointToGroup","meanDistanceToNearestGroup","which","group","relativeError","actual","expected","newValue","tolerance","trials","probability","cumulativeProbability","cells","binomialCoefficient","func","start","end","maxIterations","errorTolerance","output","distributionType","significance","chiSquared","hypothesizedDistribution","observedFrequencies","expectedFrequencies","degreesOfFreedom","chunkSize","nClusters","nValues","shift","shiftedValue","clusters","clusterRight","clusterLeft","combinations","subI","subsetCombinations","next","combinationList","unshift","combinationsReplacement","concat","variance1","variance2","newMean","absZ","toFixed","nClasses","theMin","theMax","breaks","breakSize","gamma","isInteger","sin","seriesDenom","E","Infinity","g","reciprocalSum","oldCentroids","newCentroids","change","dataLength","sumX","sumY","sumXX","sumXY","mb","Map","modeCount","newCount","set","sampleX","sampleY","alternative","testStatistic","testStatDsn","allData","midIndex","permLeft","permRight","permTestStatistic","numExtremeTStats","elements","indexes","permutations","swapFrom","temp","lambda","factorialX","average","err","secondCentralMoment","fourthCentralMoment","sumSquaredDeviations","sumCubedDeviations","besselsCorrection","theSampleStandardDeviation","expectedValue","difference","meanX","meanY","sampleVarianceY","weightedVariance","subset","mea","_loop_1","_loop_2","MEASURES","cnts","_loop_3","periodCube_1","momentCube_1","__read","iterator","e","ar","done","error","__spread","arguments","__values","Node","children","_rawData","cache","params","_i","apply","aggData","_aggData","rawData","clearCache","e_1","size","values","children_1","children_1_1","child","e_1_1","return","configurable","getNode","search","node","level","e_2","entries","children_2","children_2_1","childName","e_2_1","tree","e_3","children_3","children_3_1","e_3_1","buildTree","insertNode","record","member","has","aggTree","e_4","children_4","children_4_1","e_4_1","aggNode","e_5","children_5","children_5_1","e_5_1","setData","assign","dfs","runtime","undefined","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","define","obj","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","tryCatch","GenStateSuspendedYield","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","resolve","reject","__await","then","unwrapped","previousPromise","callInvokeWithMethodAndArg","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","toString","keys","reverse","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","_defineProperty","_arrayLikeToArray","arr2","_unsupportedIterableToArray","minLen","from","test","_slicedToArray","_arr","_n","_s","_toConsumableArray","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","_objectSpread2","target","source","getOwnPropertyDescriptors","defineProperties","_createForOfIteratorHelper","allowArrayLike","it","F","f","normalCompletion","didErr","step","_e2","crammersV","fieldX","fieldY","xSet","Set","ySet","nestTree","add","chis","rowSums","colSums","totalSum","counter","observed","pearsonCC","xBar","yBar","linearMapPositive","getCombination","ans","combine","normalize","frequencyList","entropy","probabilityList","log2","_classCallCheck","instance","Constructor","_defineProperties","descriptor","_createClass","protoProps","staticProps","oneDLinearRegression","Y","normalizedDataSource","valueSets","dim","normalizedRecord","normalizeRecord","beta","numerator","denominator","getRegressionEquation","alpha","SSR","SST","yHat","cumulativeLogisticDistribution","r_squared","pValue","SPLITOR","SFMapper","getAggregator","op","CrammersVThreshold","PearsonCorrelation","turnAdjMatrix2List","edges","find","parents","union","p1","p2","findWithEffect","sizes","unionWithEffect","size1","size2","kruskalMST","groupNumber","threshold","edgesInMST","groups","inCutEdge","edge","groupMaxSize","limitSize","kruskalWithLimitSize","kruskal","meas","meaIndex","_setPrototypeOf","_inherits","subClass","superClass","_getPrototypeOf","_typeof","_possibleConstructorReturn","ReferenceError","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Date","Super","NewTarget","KNN","K","targetRecord","dimFeatures","meaFeatures","dimWeights","meaWeights","dimSets","rIndex","dis","feature","targets","neighbors","tar","votes","nei","mostCount","mostFeature","vote","dimIndex","indexOf","valueParser","ranges","uniformSampling","sampleIndexes","seed","linearCongruentialGenerator","CHANNEL","Outier","IsolationForest","treeNumber","Psi","sampleSize","limitHeight","iForest","normalizeDimensions","normalizedSampleData","depth","rand","randField","dimLength","meaLength","randValue","leftSubData","rightSubData","field","buildIsolationTree","iTree","pathLength","nodeSize","AFS","getPathLength","samples","recordScoreList","recordScore","avgPathLength","getDimCorrelationMatrix","getMeaCorrelationMatrix","getDimClusterGroups","max_number_of_group","maxDimNumberInView","dimCorrelationMatrix","Cluster","getDimSetsBasedOnClusterGroups","correlation_threshold","max_dimensions_in_space","combineDimSet","getMeaSetsBasedOnClusterGroups","soft_max_measures_in_view","correlationMatrix","subspaceSearching","should_dimensions_correlated","getRelatedVertices","adjMatrix","vertices","verticesInGraph","topK","verStatus","includes","targetVertexIndex","corValue","shouldDimensionsCorrelated","insightExtraction","impurityList","dimSet","dset","impurity","aggregate","pL","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","GroupIntention","sameCount","getNeighbors","percents","getTargetValuePercent","sig","per","SPLITER","crossGroups","dimensionGroups","measureGroups","viewSpaces","getCombinationFromClusterGroups","fieldSets","combineFieldSet","DefaultIWorker","getGeneralIntentionSpace","fL","order","getOutlierIntentionSpace","buildIsolationForest","scoreList","estimateOutierScore","maxIndex","des","description","getTrendIntentionSpace","orderedData","linearModel","getGroupIntentionSpace","groupIntention","getSignificance","IntentionWorkerCollection","workers","iWorker","status","iWorkerWithStatus","withDefaultIWorkers","colletion","register","outlier","trend","enable","getIntentionSpaces","cubePool","Collection","ansSpace","space","join","generalSpace","each","iSpace","console","getVisSpaces","collection","dimension_correlation_threshold","measure_correlation_threshold","max_dimension_num_in_view","max_measure_num_in_view","dimensionSets","measureSets","t0","getTime","t1","usedCollection","init","getFieldType","fieldName","every","parse","isFieldTime","isFieldContinous","isFieldCategory","TESTS","boolean","integer","number","date","getFieldsSummary","fieldKeys","fields","dictonary","valueMap","dataType","types","splice","inferDataType","semanticType","analyticType","domain","DataGraph","DIMENSION_CORRELATION_THRESHOLD","MEASURE_CORRELATION_THRESHOLD","computeDGraph","computeMGraph","cc","DG","computeGraph","MG","CORRELATION_THRESHOLD","DClusters","MClusters","DEFAULT_OPS","Cuboid","ops","aggs","opFunc","dimValues","split","stdAggregate","cuboid","stdAggregateFromCuboid","getRawState","operatorOfMeasures","newRow","CUBOID_KEY_SPLITOR","Cube","dimOrder","cuboids","orderedDims","d1","d2","sortDimension","dimKey","currDimSet","existingParentKeys","nullParentKeys","parentKey","minCost","minCuboidKey","pCuboid","parentCuboid","getCuboid","computeFromCuboid","baseCuboid","baseKey","buildBaseCuboid","IForestOutlierWorker","LRTrendWorker","InsightWorkerCollection","workerName","geomTypes","interval","line","area","path","density","findBestField","fieldRankList","choosen","specification","dataView","spec","visualElements","position","color","shape","opacity","facets","page","highFacets","priority","fieldLeft","typeIndex","channelList","channel","encoding","originDimField","dimCardinality","geomType","geom","schema","VIEngine","DIMENSION_NUM_IN_VIEW","MAX","MIN","MEASURE_NUM_IN_VIEW","aggregators","workerCollection","_dimensions","_fields","_measures","_fieldKeys","fieldDictonary","dataGraph","clusterDGraph","clusterMGraph","subspaces","dims","subSpaces","getState","imp","getSpaceImpurity","jobPool","job","all","insightSpaces","insightSpace","fieldsInVis","dAggData","getFieldInfoInVis","task","addEventListener","topKPercent","dimReport","postMessage","success","view","message","startTime","cost"],"mappings":"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","file":"static/js/combineFields.worker.34201631.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","module.exports = require(\"regenerator-runtime\");\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./core/index\");\n// import { JsonRecord } from './types';\nvar transform_1 = require(\"./utils/transform\");\nvar aggregation_1 = require(\"./utils/aggregation\");\nvar operatorMap = {\n    'sum': aggregation_1.sum_unsafe,\n    'mean': aggregation_1.mean,\n    'count': aggregation_1.count,\n};\nfunction copyDataSource(data) {\n    return data.map(function (row) {\n        return __assign({}, row);\n    });\n}\nfunction aggregate(props) {\n    var dimensions = props.dimensions, measures = props.measures, asFields = props.asFields, operator = props.operator, dataSource = props.dataSource;\n    var data = [];\n    var cube = createCube({\n        type: 'moment',\n        aggFunc: operatorMap[operator] || aggregation_1.count,\n        dimensions: dimensions,\n        measures: measures,\n        factTable: dataSource\n    });\n    var table = transform_1.tree2Table({ dimensions: dimensions, measures: measures, cube: cube });\n    table.forEach(function (row) {\n        asFields.forEach(function (as, i) {\n            row[as] = row[measures[i]];\n        });\n    });\n    return table;\n}\nfunction createCube(_a) {\n    var type = _a.type, _b = _a.aggFunc, aggFunc = _b === void 0 ? aggregation_1.count : _b, _c = _a.factTable, factTable = _c === void 0 ? [] : _c, _d = _a.dimensions, dimensions = _d === void 0 ? [] : _d, _e = _a.measures, measures = _e === void 0 ? [] : _e;\n    switch (type) {\n        case \"period\":\n            return new index_1.periodCube({\n                aggFunc: aggFunc,\n                factTable: factTable,\n                dimensions: dimensions,\n                measures: measures\n            });\n        case \"moment\":\n            return new index_1.momentCube({\n                aggFunc: aggFunc,\n                factTable: factTable,\n                dimensions: dimensions,\n                measures: measures\n            });\n        default:\n            return new index_1.momentCube({\n                aggFunc: aggFunc,\n                factTable: factTable,\n                dimensions: dimensions,\n                measures: measures\n            });\n    }\n}\nexports.createCube = createCube;\nexports.default = aggregate;\n__export(require(\"./utils/aggregation\"));\n","/**\n * Our default sum is the [Kahan-Babuska algorithm](https://pdfs.semanticscholar.org/1760/7d467cda1d0277ad272deb2113533131dc09.pdf).\n * This method is an improvement over the classical\n * [Kahan summation algorithm](https://en.wikipedia.org/wiki/Kahan_summation_algorithm).\n * It aims at computing the sum of a list of numbers while correcting for\n * floating-point errors. Traditionally, sums are calculated as many\n * successive additions, each one with its own floating-point roundoff. These\n * losses in precision add up as the number of numbers increases. This alternative\n * algorithm is more accurate than the simple way of calculating sums by simple\n * addition.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sum([1, 2, 3]); // => 6\n */\nfunction sum(x) {\n    // If the array is empty, we needn't bother computing its sum\n    if (x.length === 0) {\n        return 0;\n    }\n\n    // Initializing the sum as the first number in the array\n    let sum = x[0];\n\n    // Keeping track of the floating-point error correction\n    let correction = 0;\n\n    let transition;\n\n    for (let i = 1; i < x.length; i++) {\n        transition = sum + x[i];\n\n        // Here we need to update the correction in a different fashion\n        // if the new absolute value is greater than the absolute sum\n        if (Math.abs(sum) >= Math.abs(x[i])) {\n            correction += sum - transition + x[i];\n        } else {\n            correction += x[i] - transition + sum;\n        }\n\n        sum = transition;\n    }\n\n    // Returning the corrected sum\n    return sum + correction;\n}\n\nexport default sum;\n","import sum from \"./sum\";\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the the length of x is less than one\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\nfunction mean(x) {\n    if (x.length === 0) {\n        throw new Error(\"mean requires at least one data point\");\n    }\n\n    return sum(x) / x.length;\n}\n\nexport default mean;\n","import mean from \"./mean\";\n\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it's the sum of squared deviations.\n * When n=3 it's the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n *\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * sumNthPowerDeviations(input, 2) / input.length;\n */\nfunction sumNthPowerDeviations(x, n) {\n    const meanValue = mean(x);\n    let sum = 0;\n    let tempValue;\n    let i;\n\n    // This is an optimization: when n is 2 (we're computing a number squared),\n    // multiplying the number by itself is significantly faster than using\n    // the Math.pow method.\n    if (n === 2) {\n        for (i = 0; i < x.length; i++) {\n            tempValue = x[i] - meanValue;\n            sum += tempValue * tempValue;\n        }\n    } else {\n        for (i = 0; i < x.length; i++) {\n            sum += Math.pow(x[i] - meanValue, n);\n        }\n    }\n\n    return sum;\n}\n\nexport default sumNthPowerDeviations;\n","import sumNthPowerDeviations from \"./sum_nth_power_deviations\";\n\n/**\n * The [variance](http://en.wikipedia.org/wiki/Variance)\n * is the sum of squared deviations from the mean.\n *\n * This is an implementation of variance, not sample variance:\n * see the `sampleVariance` method if you want a sample measure.\n *\n * @param {Array<number>} x a population of one or more data points\n * @returns {number} variance: a value greater than or equal to zero.\n * zero indicates that all values are identical.\n * @throws {Error} if x's length is 0\n * @example\n * variance([1, 2, 3, 4, 5, 6]); // => 2.9166666666666665\n */\nfunction variance(x) {\n    if (x.length === 0) {\n        throw new Error(\"variance requires at least one data point\");\n    }\n\n    // Find the mean of squared deviations between the\n    // mean value and each value.\n    return sumNthPowerDeviations(x, 2) / x.length;\n}\n\nexport default variance;\n","import variance from \"./variance\";\n\n/**\n * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n * is the square root of the variance. This is also known as the population\n * standard deviation. It's useful for measuring the amount\n * of variation or dispersion in a set of values.\n *\n * Standard deviation is only appropriate for full-population knowledge: for\n * samples of a population, {@link sampleStandardDeviation} is\n * more appropriate.\n *\n * @param {Array<number>} x input\n * @returns {number} standard deviation\n * @example\n * variance([2, 4, 4, 4, 5, 5, 7, 9]); // => 4\n * standardDeviation([2, 4, 4, 4, 5, 5, 7, 9]); // => 2\n */\nfunction standardDeviation(x) {\n    if (x.length === 1) {\n        return 0;\n    }\n    const v = variance(x);\n    return Math.sqrt(v);\n}\n\nexport default standardDeviation;\n","/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)` because the input is sorted.\n *\n * @param {Array<number>} sorted a sample of one or more data points\n * @returns {number} mode\n * @throws {Error} if sorted is empty\n * @example\n * modeSorted([0, 0, 1]); // => 0\n */\nfunction modeSorted(sorted) {\n    // Handle edge cases:\n    // The mode of an empty list is undefined\n    if (sorted.length === 0) {\n        throw new Error(\"mode requires at least one data point\");\n    } else if (sorted.length === 1) {\n        return sorted[0];\n    }\n\n    // This assumes it is dealing with an array of size > 1, since size\n    // 0 and 1 are handled immediately. Hence it starts at index 1 in the\n    // array.\n    let last = sorted[0],\n        // store the mode as we find new modes\n        value = NaN,\n        // store how many times we've seen the mode\n        maxSeen = 0,\n        // how many times the current candidate for the mode\n        // has been seen\n        seenThis = 1;\n\n    // end at sorted.length + 1 to fix the case in which the mode is\n    // the highest number that occurs in the sequence. the last iteration\n    // compares sorted[i], which is undefined, to the highest number\n    // in the series\n    for (let i = 1; i < sorted.length + 1; i++) {\n        // we're seeing a new number pass by\n        if (sorted[i] !== last) {\n            // the last number is the new mode since we saw it more\n            // often than the old one\n            if (seenThis > maxSeen) {\n                maxSeen = seenThis;\n                value = last;\n            }\n            seenThis = 1;\n            last = sorted[i];\n            // if this isn't a new number, it's one more occurrence of\n            // the potential mode\n        } else {\n            seenThis++;\n        }\n    }\n    return value;\n}\n\nexport default modeSorted;\n","/**\n * Sort an array of numbers by their numeric value, ensuring that the\n * array is not changed in place.\n *\n * This is necessary because the default behavior of .sort\n * in JavaScript is to sort arrays as string values\n *\n *     [1, 10, 12, 102, 20].sort()\n *     // output\n *     [1, 10, 102, 12, 20]\n *\n * @param {Array<number>} x input array\n * @return {Array<number>} sorted array\n * @private\n * @example\n * numericSort([3, 2, 1]) // => [1, 2, 3]\n */\nfunction numericSort(x) {\n    return (\n        x\n            // ensure the array is not changed in-place\n            .slice()\n            // comparator function that treats input as numeric\n            .sort(function (a, b) {\n                return a - b;\n            })\n    );\n}\n\nexport default numericSort;\n","/**\n * The min is the lowest number in the array.\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the the length of x is less than one\n * @returns {number} minimum value\n * @example\n * min([1, 5, -10, 100, 2]); // => -10\n */\nfunction min(x) {\n    if (x.length === 0) {\n        throw new Error(\"min requires at least one data point\");\n    }\n\n    let value = x[0];\n    for (let i = 1; i < x.length; i++) {\n        if (x[i] < value) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\nexport default min;\n","/**\n * This computes the maximum number in an array.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} maximum value\n * @throws {Error} if the the length of x is less than one\n * @example\n * max([1, 2, 3, 4]);\n * // => 4\n */\nfunction max(x) {\n    if (x.length === 0) {\n        throw new Error(\"max requires at least one data point\");\n    }\n\n    let value = x[0];\n    for (let i = 1; i < x.length; i++) {\n        if (x[i] > value) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\nexport default max;\n","/**\n * The simple [sum](https://en.wikipedia.org/wiki/Summation) of an array\n * is the result of adding all numbers together, starting from zero.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sumSimple([1, 2, 3]); // => 6\n */\nfunction sumSimple(x) {\n    let value = 0;\n    for (let i = 0; i < x.length; i++) {\n        value += x[i];\n    }\n    return value;\n}\n\nexport default sumSimple;\n","/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} x sample of one or more data points\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @throws {Error} if p ix outside of the range from 0 to 1\n * @throws {Error} if x is empty\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantileSorted(x, p) {\n    const idx = x.length * p;\n    if (x.length === 0) {\n        throw new Error(\"quantile requires at least one data point.\");\n    } else if (p < 0 || p > 1) {\n        throw new Error(\"quantiles must be between 0 and 1\");\n    } else if (p === 1) {\n        // If p is 1, directly return the last element\n        return x[x.length - 1];\n    } else if (p === 0) {\n        // If p is 0, directly return the first element\n        return x[0];\n    } else if (idx % 1 !== 0) {\n        // If p is not integer, return the next element in array\n        return x[Math.ceil(idx) - 1];\n    } else if (x.length % 2 === 0) {\n        // If the list has even-length, we'll take the average of this number\n        // and the next value, if there is one\n        return (x[idx - 1] + x[idx]) / 2;\n    } else {\n        // Finally, in the simple case of an integer value\n        // with an odd-length list, return the x value at the index.\n        return x[idx];\n    }\n}\n\nexport default quantileSorted;\n","/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} [left] left index\n * @param {number} [right] right index\n * @returns {void} mutates input array\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nfunction quickselect(arr, k, left, right) {\n    left = left || 0;\n    right = right || arr.length - 1;\n\n    while (right > left) {\n        // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp((2 * z) / 3);\n            let sd = 0.5 * Math.sqrt((z * s * (n - s)) / n);\n            if (m - n / 2 < 0) sd *= -1;\n            const newLeft = Math.max(left, Math.floor(k - (m * s) / n + sd));\n            const newRight = Math.min(\n                right,\n                Math.floor(k + ((n - m) * s) / n + sd)\n            );\n            quickselect(arr, k, newLeft, newRight);\n        }\n\n        const t = arr[k];\n        let i = left;\n        let j = right;\n\n        swap(arr, left, k);\n        if (arr[right] > t) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (arr[i] < t) i++;\n            while (arr[j] > t) j--;\n        }\n\n        if (arr[left] === t) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nexport default quickselect;\n","import quantileSorted from \"./quantile_sorted\";\nimport quickselect from \"./quickselect\";\n\n/**\n * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n * this is a population quantile, since we assume to know the entire\n * dataset in this library. This is an implementation of the\n * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n * algorithm from wikipedia.\n *\n * Sample is a one-dimensional array of numbers,\n * and p is either a decimal number from 0 to 1 or an array of decimal\n * numbers from 0 to 1.\n * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n * with decimal values.\n * When p is an array, the result of the function is also an array containing the appropriate\n * quantiles in input order\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {Array<number> | number} p the desired quantile, as a number between 0 and 1\n * @returns {number} quantile\n * @example\n * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantile(x, p) {\n    const copy = x.slice();\n\n    if (Array.isArray(p)) {\n        // rearrange elements so that each element corresponding to a requested\n        // quantile is on a place it would be if the array was fully sorted\n        multiQuantileSelect(copy, p);\n        // Initialize the result array\n        const results = [];\n        // For each requested quantile\n        for (let i = 0; i < p.length; i++) {\n            results[i] = quantileSorted(copy, p[i]);\n        }\n        return results;\n    } else {\n        const idx = quantileIndex(copy.length, p);\n        quantileSelect(copy, idx, 0, copy.length - 1);\n        return quantileSorted(copy, p);\n    }\n}\n\nfunction quantileSelect(arr, k, left, right) {\n    if (k % 1 === 0) {\n        quickselect(arr, k, left, right);\n    } else {\n        k = Math.floor(k);\n        quickselect(arr, k, left, right);\n        quickselect(arr, k + 1, k + 1, right);\n    }\n}\n\nfunction multiQuantileSelect(arr, p) {\n    const indices = [0];\n    for (let i = 0; i < p.length; i++) {\n        indices.push(quantileIndex(arr.length, p[i]));\n    }\n    indices.push(arr.length - 1);\n    indices.sort(compare);\n\n    const stack = [0, indices.length - 1];\n\n    while (stack.length) {\n        const r = Math.ceil(stack.pop());\n        const l = Math.floor(stack.pop());\n        if (r - l <= 1) continue;\n\n        const m = Math.floor((l + r) / 2);\n        quantileSelect(\n            arr,\n            indices[m],\n            Math.floor(indices[l]),\n            Math.ceil(indices[r])\n        );\n\n        stack.push(l, m, m, r);\n    }\n}\n\nfunction compare(a, b) {\n    return a - b;\n}\n\nfunction quantileIndex(len, p) {\n    const idx = len * p;\n    if (p === 1) {\n        // If p is 1, directly return the last index\n        return len - 1;\n    } else if (p === 0) {\n        // If p is 0, directly return the first index\n        return 0;\n    } else if (idx % 1 !== 0) {\n        // If index is not integer, return the next index in array\n        return Math.ceil(idx) - 1;\n    } else if (len % 2 === 0) {\n        // If the list has even-length, we'll return the middle of two indices\n        // around quantile to indicate that we need an average value of the two\n        return idx - 0.5;\n    } else {\n        // Finally, in the simple case of an integer index\n        // with an odd-length list, return the index\n        return idx;\n    }\n}\n\nexport default quantile;\n","/* eslint no-bitwise: 0 */\n\n/**\n * This function returns the quantile in which one would find the given value in\n * the given array. With a sorted array, leveraging binary search, we can find\n * this information in logarithmic time.\n *\n * @param {Array<number>} x input\n * @returns {number} value value\n * @example\n * quantileRankSorted([1, 2, 3, 4], 3); // => 0.75\n * quantileRankSorted([1, 2, 3, 3, 4], 3); // => 0.7\n * quantileRankSorted([1, 2, 3, 4], 6); // => 1\n * quantileRankSorted([1, 2, 3, 3, 5], 4); // => 0.8\n */\nfunction quantileRankSorted(x, value) {\n    // Value is lesser than any value in the array\n    if (value < x[0]) {\n        return 0;\n    }\n\n    // Value is greater than any value in the array\n    if (value > x[x.length - 1]) {\n        return 1;\n    }\n\n    let l = lowerBound(x, value);\n\n    // Value is not in the array\n    if (x[l] !== value) {\n        return l / x.length;\n    }\n\n    l++;\n\n    const u = upperBound(x, value);\n\n    // The value exists only once in the array\n    if (u === l) {\n        return l / x.length;\n    }\n\n    // Here, we are basically computing the mean of the range of indices\n    // containing our searched value. But, instead, of initializing an\n    // array and looping over it, there is a dedicated math formula that\n    // we apply below to get the result.\n    const r = u - l + 1;\n    const sum = (r * (u + l)) / 2;\n    const mean = sum / r;\n\n    return mean / x.length;\n}\n\nfunction lowerBound(x, value) {\n    let mid = 0;\n    let lo = 0;\n    let hi = x.length;\n\n    while (lo < hi) {\n        mid = (lo + hi) >>> 1;\n\n        if (value <= x[mid]) {\n            hi = mid;\n        } else {\n            lo = -~mid;\n        }\n    }\n\n    return lo;\n}\n\nfunction upperBound(x, value) {\n    let mid = 0;\n    let lo = 0;\n    let hi = x.length;\n\n    while (lo < hi) {\n        mid = (lo + hi) >>> 1;\n\n        if (value >= x[mid]) {\n            lo = -~mid;\n        } else {\n            hi = mid;\n        }\n    }\n\n    return lo;\n}\n\nexport default quantileRankSorted;\n","import quantile from \"./quantile\";\n\n/**\n * The [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range) is\n * a measure of statistical dispersion, or how scattered, spread, or\n * concentrated a distribution is. It's computed as the difference between\n * the third quartile and first quartile.\n *\n * @param {Array<number>} x sample of one or more numbers\n * @returns {number} interquartile range: the span between lower and upper quartile,\n * 0.25 and 0.75\n * @example\n * interquartileRange([0, 1, 2, 3]); // => 2\n */\nfunction interquartileRange(x) {\n    // Interquartile range is the span between the upper quartile,\n    // at `0.75`, and lower quartile, `0.25`\n    const q1 = quantile(x, 0.75);\n    const q2 = quantile(x, 0.25);\n\n    if (typeof q1 === \"number\" && typeof q2 === \"number\") {\n        return q1 - q2;\n    }\n}\n\nexport default interquartileRange;\n","import quantile from \"./quantile\";\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of 'the middle'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn't necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} x input\n * @returns {number} median value\n * @example\n * median([10, 2, 5, 100, 2, 1]); // => 3.5\n */\nfunction median(x) {\n    return +quantile(x, 0.5);\n}\n\nexport default median;\n","import median from \"./median\";\n\n/**\n * The [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation) is\n * a robust measure of statistical\n * dispersion. It is more resilient to outliers than the standard deviation.\n *\n * @param {Array<number>} x input array\n * @returns {number} median absolute deviation\n * @example\n * medianAbsoluteDeviation([1, 1, 2, 2, 4, 6, 9]); // => 1\n */\nfunction medianAbsoluteDeviation(x) {\n    const medianValue = median(x);\n    const medianAbsoluteDeviations = [];\n\n    // Make a list of absolute deviations from the median\n    for (let i = 0; i < x.length; i++) {\n        medianAbsoluteDeviations.push(Math.abs(x[i] - medianValue));\n    }\n\n    // Find the median value of that list\n    return median(medianAbsoluteDeviations);\n}\n\nexport default medianAbsoluteDeviation;\n","/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * in-place - which means that it **will change the order of the original\n * array by reference**.\n *\n * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)\n * of a set.\n *\n * @param {Array} x sample of one or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @returns {Array} x\n * @example\n * var x = [1, 2, 3, 4];\n * shuffleInPlace(x);\n * // x is shuffled to a value like [2, 1, 4, 3]\n */\nfunction shuffleInPlace(x, randomSource) {\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    // store the current length of the x to determine\n    // when no elements remain to shuffle.\n    let length = x.length;\n\n    // temporary is used to hold an item when it is being\n    // swapped between indices.\n    let temporary;\n\n    // The index to swap at each stage.\n    let index;\n\n    // While there are still items to shuffle\n    while (length > 0) {\n        // chose a random index within the subset of the array\n        // that is not yet shuffled\n        index = Math.floor(randomSource() * length--);\n\n        // store the value that we'll move temporarily\n        temporary = x[length];\n\n        // swap the value at `x[length]` with `x[index]`\n        x[length] = x[index];\n        x[index] = temporary;\n    }\n\n    return x;\n}\n\nexport default shuffleInPlace;\n","import shuffleInPlace from \"./shuffle_in_place\";\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * is a fast way to create a random permutation of a finite set. This is\n * a function around `shuffle_in_place` that adds the guarantee that\n * it will not modify its input.\n *\n * @param {Array} x sample of 0 or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} shuffled version of input\n * @example\n * var shuffled = shuffle([1, 2, 3, 4]);\n * shuffled; // = [2, 3, 1, 4] or any other random permutation\n */\nfunction shuffle(x, randomSource) {\n    // slice the original array so that it is not modified\n    const sample = x.slice();\n\n    // and then shuffle that shallow-copied array, in place\n    return shuffleInPlace(sample, randomSource);\n}\n\nexport default shuffle;\n","import shuffle from \"./shuffle\";\n\n/**\n * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)\n * from a given array of `n` elements.\n *\n * The sampled values will be in any order, not necessarily the order\n * they appear in the input.\n *\n * @param {Array<any>} x input array. can contain any type\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} subset of n elements in original array\n *\n * @example\n * var values = [1, 2, 4, 5, 6, 7, 8, 9];\n * sample(values, 3); // returns 3 random values, like [2, 5, 8];\n */\nfunction sample(x, n, randomSource) {\n    // shuffle the original array using a fisher-yates shuffle\n    const shuffled = shuffle(x, randomSource);\n\n    // and then return a subset of it - the first `n` elements.\n    return shuffled.slice(0, n);\n}\n\nexport default sample;\n","/**\n * Create a new column x row matrix.\n *\n * @private\n * @param {number} columns\n * @param {number} rows\n * @return {Array<Array<number>>} matrix\n * @example\n * makeMatrix(10, 10);\n */\nfunction makeMatrix(columns, rows) {\n    const matrix = [];\n    for (let i = 0; i < columns; i++) {\n        const column = [];\n        for (let j = 0; j < rows; j++) {\n            column.push(0);\n        }\n        matrix.push(column);\n    }\n    return matrix;\n}\n\nexport default makeMatrix;\n","/**\n * For a sorted input, counting the number of unique values\n * is possible in constant time and constant memory. This is\n * a simple implementation of the algorithm.\n *\n * Values are compared with `===`, so objects and non-primitive objects\n * are not handled in any special way.\n *\n * @param {Array<*>} x an array of any kind of value\n * @returns {number} count of unique values\n * @example\n * uniqueCountSorted([1, 2, 3]); // => 3\n * uniqueCountSorted([1, 1, 1]); // => 1\n */\nfunction uniqueCountSorted(x) {\n    let uniqueValueCount = 0,\n        lastSeenValue;\n    for (let i = 0; i < x.length; i++) {\n        if (i === 0 || x[i] !== lastSeenValue) {\n            lastSeenValue = x[i];\n            uniqueValueCount++;\n        }\n    }\n    return uniqueValueCount;\n}\n\nexport default uniqueCountSorted;\n","import makeMatrix from \"./make_matrix\";\nimport numericSort from \"./numeric_sort\";\nimport uniqueCountSorted from \"./unique_count_sorted\";\n\n/**\n * Generates incrementally computed values based on the sums and sums of\n * squares for the data array\n *\n * @private\n * @param {number} j\n * @param {number} i\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n * @return {number}\n * @example\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\n */\nfunction ssq(j, i, sums, sumsOfSquares) {\n    let sji; // s(j, i)\n    if (j > 0) {\n        const muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\n        sji =\n            sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\n    } else {\n        sji = sumsOfSquares[i] - (sums[i] * sums[i]) / (i + 1);\n    }\n    if (sji < 0) {\n        return 0;\n    }\n    return sji;\n}\n\n/**\n * Function that recursively divides and conquers computations\n * for cluster j\n *\n * @private\n * @param {number} iMin Minimum index in cluster to be computed\n * @param {number} iMax Maximum index in cluster to be computed\n * @param {number} cluster Index of the cluster currently being computed\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n */\nfunction fillMatrixColumn(\n    iMin,\n    iMax,\n    cluster,\n    matrix,\n    backtrackMatrix,\n    sums,\n    sumsOfSquares\n) {\n    if (iMin > iMax) {\n        return;\n    }\n\n    // Start at midpoint between iMin and iMax\n    const i = Math.floor((iMin + iMax) / 2);\n\n    matrix[cluster][i] = matrix[cluster - 1][i - 1];\n    backtrackMatrix[cluster][i] = i;\n\n    let jlow = cluster; // the lower end for j\n\n    if (iMin > cluster) {\n        jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\n    }\n    jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\n\n    let jhigh = i - 1; // the upper end for j\n    if (iMax < matrix[0].length - 1) {\n        jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\n    }\n\n    let sji;\n    let sjlowi;\n    let ssqjlow;\n    let ssqj;\n    for (let j = jhigh; j >= jlow; --j) {\n        sji = ssq(j, i, sums, sumsOfSquares);\n\n        if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\n            break;\n        }\n\n        // Examine the lower bound of the cluster border\n        sjlowi = ssq(jlow, i, sums, sumsOfSquares);\n\n        ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\n\n        if (ssqjlow < matrix[cluster][i]) {\n            // Shrink the lower bound\n            matrix[cluster][i] = ssqjlow;\n            backtrackMatrix[cluster][i] = jlow;\n        }\n        jlow++;\n\n        ssqj = sji + matrix[cluster - 1][j - 1];\n        if (ssqj < matrix[cluster][i]) {\n            matrix[cluster][i] = ssqj;\n            backtrackMatrix[cluster][i] = j;\n        }\n    }\n\n    fillMatrixColumn(\n        iMin,\n        i - 1,\n        cluster,\n        matrix,\n        backtrackMatrix,\n        sums,\n        sumsOfSquares\n    );\n    fillMatrixColumn(\n        i + 1,\n        iMax,\n        cluster,\n        matrix,\n        backtrackMatrix,\n        sums,\n        sumsOfSquares\n    );\n}\n\n/**\n * Initializes the main matrices used in Ckmeans and kicks\n * off the divide and conquer cluster computation strategy\n *\n * @private\n * @param {Array<number>} data sorted array of values\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n */\nfunction fillMatrices(data, matrix, backtrackMatrix) {\n    const nValues = matrix[0].length;\n\n    // Shift values by the median to improve numeric stability\n    const shift = data[Math.floor(nValues / 2)];\n\n    // Cumulative sum and cumulative sum of squares for all values in data array\n    const sums = [];\n    const sumsOfSquares = [];\n\n    // Initialize first column in matrix & backtrackMatrix\n    for (let i = 0, shiftedValue; i < nValues; ++i) {\n        shiftedValue = data[i] - shift;\n        if (i === 0) {\n            sums.push(shiftedValue);\n            sumsOfSquares.push(shiftedValue * shiftedValue);\n        } else {\n            sums.push(sums[i - 1] + shiftedValue);\n            sumsOfSquares.push(\n                sumsOfSquares[i - 1] + shiftedValue * shiftedValue\n            );\n        }\n\n        // Initialize for cluster = 0\n        matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\n        backtrackMatrix[0][i] = 0;\n    }\n\n    // Initialize the rest of the columns\n    let iMin;\n    for (let cluster = 1; cluster < matrix.length; ++cluster) {\n        if (cluster < matrix.length - 1) {\n            iMin = cluster;\n        } else {\n            // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\n            iMin = nValues - 1;\n        }\n\n        fillMatrixColumn(\n            iMin,\n            nValues - 1,\n            cluster,\n            matrix,\n            backtrackMatrix,\n            sums,\n            sumsOfSquares\n        );\n    }\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like Jenks. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} x input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @throws {Error} if the number of requested clusters is higher than the size of the data\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nfunction ckmeans(x, nClusters) {\n    if (nClusters > x.length) {\n        throw new Error(\n            \"cannot generate more classes than there are data values\"\n        );\n    }\n\n    const sorted = numericSort(x);\n    // we'll use this as the maximum number of clusters\n    const uniqueCount = uniqueCountSorted(sorted);\n\n    // if all of the input values are identical, there's one cluster\n    // with all of the input in it.\n    if (uniqueCount === 1) {\n        return [sorted];\n    }\n\n    // named 'S' originally\n    const matrix = makeMatrix(nClusters, sorted.length);\n    // named 'J' originally\n    const backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n    // This is a dynamic programming way to solve the problem of minimizing\n    // within-cluster sum of squares. It's similar to linear regression\n    // in this way, and this calculation incrementally computes the\n    // sum of squares that are later read.\n    fillMatrices(sorted, matrix, backtrackMatrix);\n\n    // The real work of Ckmeans clustering happens in the matrix generation:\n    // the generated matrices encode all possible clustering combinations, and\n    // once they're generated we can solve for the best clustering groups\n    // very quickly.\n    const clusters = [];\n    let clusterRight = backtrackMatrix[0].length - 1;\n\n    // Backtrack the clusters from the dynamic programming matrix. This\n    // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n    // and moves the cluster target with the loop.\n    for (let cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n        const clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n        // fill the cluster from the sorted input by taking a slice of the\n        // array. the backtrack matrix makes this easy - it stores the\n        // indexes where the cluster should start and end.\n        clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n        if (cluster > 0) {\n            clusterRight = clusterLeft - 1;\n        }\n    }\n\n    return clusters;\n}\n\nexport default ckmeans;\n","import mean from \"./mean\";\n\n/**\n * [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_covariance) of two datasets:\n * how much do the two datasets move together?\n * x and y are two datasets, represented as arrays of numbers.\n *\n * @param {Array<number>} x a sample of two or more data points\n * @param {Array<number>} y a sample of two or more data points\n * @throws {Error} if x and y do not have equal lengths\n * @throws {Error} if x or y have length of one or less\n * @returns {number} sample covariance\n * @example\n * sampleCovariance([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]); // => -3.5\n */\nfunction sampleCovariance(x, y) {\n    // The two datasets must have the same length which must be more than 1\n    if (x.length !== y.length) {\n        throw new Error(\"sampleCovariance requires samples with equal lengths\");\n    }\n\n    if (x.length < 2) {\n        throw new Error(\n            \"sampleCovariance requires at least two data points in each sample\"\n        );\n    }\n\n    // determine the mean of each dataset so that we can judge each\n    // value of the dataset fairly as the difference from the mean. this\n    // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance\n    // does not suffer because of the difference in absolute values\n    const xmean = mean(x);\n    const ymean = mean(y);\n    let sum = 0;\n\n    // for each pair of values, the covariance increases when their\n    // difference from the mean is associated - if both are well above\n    // or if both are well below\n    // the mean, the covariance increases significantly.\n    for (let i = 0; i < x.length; i++) {\n        sum += (x[i] - xmean) * (y[i] - ymean);\n    }\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    const besselsCorrection = x.length - 1;\n\n    // the covariance is weighted by the length of the datasets.\n    return sum / besselsCorrection;\n}\n\nexport default sampleCovariance;\n","import sumNthPowerDeviations from \"./sum_nth_power_deviations\";\n\n/**\n * The [sample variance](https://en.wikipedia.org/wiki/Variance#Sample_variance)\n * is the sum of squared deviations from the mean. The sample variance\n * is distinguished from the variance by the usage of [Bessel's Correction](https://en.wikipedia.org/wiki/Bessel's_correction):\n * instead of dividing the sum of squared deviations by the length of the input,\n * it is divided by the length minus one. This corrects the bias in estimating\n * a value from a set that you don't know if full.\n *\n * References:\n * * [Wolfram MathWorld on Sample Variance](http://mathworld.wolfram.com/SampleVariance.html)\n *\n * @param {Array<number>} x a sample of two or more data points\n * @throws {Error} if the length of x is less than 2\n * @return {number} sample variance\n * @example\n * sampleVariance([1, 2, 3, 4, 5]); // => 2.5\n */\nfunction sampleVariance(x) {\n    if (x.length < 2) {\n        throw new Error(\"sampleVariance requires at least two data points\");\n    }\n\n    const sumSquaredDeviationsValue = sumNthPowerDeviations(x, 2);\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    const besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    return sumSquaredDeviationsValue / besselsCorrection;\n}\n\nexport default sampleVariance;\n","import sampleVariance from \"./sample_variance\";\n\n/**\n * The [sample standard deviation](http://en.wikipedia.org/wiki/Standard_deviation#Sample_standard_deviation)\n * is the square root of the sample variance.\n *\n * @param {Array<number>} x input array\n * @returns {number} sample standard deviation\n * @example\n * sampleStandardDeviation([2, 4, 4, 4, 5, 5, 7, 9]).toFixed(2);\n * // => '2.14'\n */\nfunction sampleStandardDeviation(x) {\n    const sampleVarianceX = sampleVariance(x);\n    return Math.sqrt(sampleVarianceX);\n}\n\nexport default sampleStandardDeviation;\n","/**\n * When combining two lists of values for which one already knows the means,\n * one does not have to necessary recompute the mean of the combined lists in\n * linear time. They can instead use this function to compute the combined\n * mean by providing the mean & number of values of the first list and the mean\n * & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineMeans(5, 3, 4, 3); // => 4.5\n */\nfunction combineMeans(mean1, n1, mean2, n2) {\n    return (mean1 * n1 + mean2 * n2) / (n1 + n2);\n}\n\nexport default combineMeans;\n","import sumSimple from \"./sum_simple\";\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The simple mean uses the successive addition method internally\n * to calculate it's result. Errors in floating-point addition are\n * not accounted for, so if precision is required, the standard {@link mean}\n * method should be used instead.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the the length of x is less than one\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\nfunction meanSimple(x) {\n    if (x.length === 0) {\n        throw new Error(\"meanSimple requires at least one data point\");\n    }\n\n    return sumSimple(x) / x.length;\n}\n\nexport default meanSimple;\n","/**\n * The Root Mean Square (RMS) is\n * a mean function used as a measure of the magnitude of a set\n * of numbers, regardless of their sign.\n * This is the square root of the mean of the squares of the\n * input numbers.\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x a sample of one or more data points\n * @returns {number} root mean square\n * @throws {Error} if x is empty\n * @example\n * rootMeanSquare([-1, 1, -1, 1]); // => 1\n */\nfunction rootMeanSquare(x) {\n    if (x.length === 0) {\n        throw new Error(\"rootMeanSquare requires at least one data point\");\n    }\n\n    let sumOfSquares = 0;\n    for (let i = 0; i < x.length; i++) {\n        sumOfSquares += Math.pow(x[i], 2);\n    }\n\n    return Math.sqrt(sumOfSquares / x.length);\n}\n\nexport default rootMeanSquare;\n","/**\n * [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)\n *\n * This is a naïve bayesian classifier that takes\n * singly-nested objects.\n *\n * @class\n * @example\n * var bayes = new BayesianClassifier();\n * bayes.train({\n *   species: 'Cat'\n * }, 'animal');\n * var result = bayes.score({\n *   species: 'Cat'\n * })\n * // result\n * // {\n * //   animal: 1\n * // }\n */\nclass BayesianClassifier {\n    /*:: totalCount: number */\n    /*:: data: Object */\n    constructor() {\n        // The number of items that are currently\n        // classified in the model\n        this.totalCount = 0;\n        // Every item classified in the model\n        this.data = {};\n    }\n\n    /**\n     * Train the classifier with a new item, which has a single\n     * dimension of Javascript literal keys and values.\n     *\n     * @param {Object} item an object with singly-deep properties\n     * @param {string} category the category this item belongs to\n     * @return {undefined} adds the item to the classifier\n     */\n    train(item, category) {\n        // If the data object doesn't have any values\n        // for this category, create a new object for it.\n        if (!this.data[category]) {\n            this.data[category] = {};\n        }\n\n        // Iterate through each key in the item.\n        for (const k in item) {\n            const v = item[k];\n            // Initialize the nested object `data[category][k][item[k]]`\n            // with an object of keys that equal 0.\n            if (this.data[category][k] === undefined) {\n                this.data[category][k] = {};\n            }\n            if (this.data[category][k][v] === undefined) {\n                this.data[category][k][v] = 0;\n            }\n\n            // And increment the key for this key/value combination.\n            this.data[category][k][v]++;\n        }\n\n        // Increment the number of items classified\n        this.totalCount++;\n    }\n\n    /**\n     * Generate a score of how well this item matches all\n     * possible categories based on its attributes\n     *\n     * @param {Object} item an item in the same format as with train\n     * @returns {Object} of probabilities that this item belongs to a\n     * given category.\n     */\n    score(item) {\n        // Initialize an empty array of odds per category.\n        const odds = {};\n        let category;\n        // Iterate through each key in the item,\n        // then iterate through each category that has been used\n        // in previous calls to `.train()`\n        for (const k in item) {\n            const v = item[k];\n            for (category in this.data) {\n                // Create an empty object for storing key - value combinations\n                // for this category.\n                odds[category] = {};\n\n                // If this item doesn't even have a property, it counts for nothing,\n                // but if it does have the property that we're looking for from\n                // the item to categorize, it counts based on how popular it is\n                // versus the whole population.\n                if (this.data[category][k]) {\n                    odds[category][k + \"_\" + v] =\n                        (this.data[category][k][v] || 0) / this.totalCount;\n                } else {\n                    odds[category][k + \"_\" + v] = 0;\n                }\n            }\n        }\n\n        // Set up a new object that will contain sums of these odds by category\n        const oddsSums = {};\n\n        for (category in odds) {\n            // Tally all of the odds for each category-combination pair -\n            // the non-existence of a category does not add anything to the\n            // score.\n            oddsSums[category] = 0;\n            for (const combination in odds[category]) {\n                oddsSums[category] += odds[category][combination];\n            }\n        }\n\n        return oddsSums;\n    }\n}\n\nexport default BayesianClassifier;\n","/**\n * This is a single-layer [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron) that takes\n * arrays of numbers and predicts whether they should be classified\n * as either 0 or 1 (negative or positive examples).\n * @class\n * @example\n * // Create the model\n * var p = new PerceptronModel();\n * // Train the model with input with a diagonal boundary.\n * for (var i = 0; i < 5; i++) {\n *     p.train([1, 1], 1);\n *     p.train([0, 1], 0);\n *     p.train([1, 0], 0);\n *     p.train([0, 0], 0);\n * }\n * p.predict([0, 0]); // 0\n * p.predict([0, 1]); // 0\n * p.predict([1, 0]); // 0\n * p.predict([1, 1]); // 1\n */\nclass PerceptronModel {\n    /*:: bias: number */\n    /*:: weights: Array<number> */\n    constructor() {\n        // The weights, or coefficients of the model;\n        // weights are only populated when training with data.\n        this.weights = [];\n        // The bias term, or intercept; it is also a weight but\n        // it's stored separately for convenience as it is always\n        // multiplied by one.\n        this.bias = 0;\n    }\n    /**\n     * **Predict**: Use an array of features with the weight array and bias\n     * to predict whether an example is labeled 0 or 1.\n     *\n     * @param {Array<number>} features an array of features as numbers\n     * @returns {number} 1 if the score is over 0, otherwise 0\n     */\n    predict(features) {\n        // Only predict if previously trained\n        // on the same size feature array(s).\n        if (features.length !== this.weights.length) {\n            return null;\n        }\n\n        // Calculate the sum of features times weights,\n        // with the bias added (implicitly times one).\n        let score = 0;\n        for (let i = 0; i < this.weights.length; i++) {\n            score += this.weights[i] * features[i];\n        }\n        score += this.bias;\n\n        // Classify as 1 if the score is over 0, otherwise 0.\n        if (score > 0) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * **Train** the classifier with a new example, which is\n     * a numeric array of features and a 0 or 1 label.\n     *\n     * @param {Array<number>} features an array of features as numbers\n     * @param {number} label either 0 or 1\n     * @returns {PerceptronModel} this\n     */\n    train(features, label) {\n        // Require that only labels of 0 or 1 are considered.\n        if (label !== 0 && label !== 1) {\n            return null;\n        }\n        // The length of the feature array determines\n        // the length of the weight array.\n        // The perceptron will continue learning as long as\n        // it keeps seeing feature arrays of the same length.\n        // When it sees a new data shape, it initializes.\n        if (features.length !== this.weights.length) {\n            this.weights = features;\n            this.bias = 1;\n        }\n        // Make a prediction based on current weights.\n        const prediction = this.predict(features);\n        // Update the weights if the prediction is wrong.\n        if (typeof prediction === \"number\" && prediction !== label) {\n            const gradient = label - prediction;\n            for (let i = 0; i < this.weights.length; i++) {\n                this.weights[i] += gradient * features[i];\n            }\n            this.bias += gradient;\n        }\n        return this;\n    }\n}\n\nexport default PerceptronModel;\n","/**\n * We use `ε`, epsilon, as a stopping criterion when we want to iterate\n * until we're \"close enough\". Epsilon is a very small number: for\n * simple statistics, that number is **0.0001**\n *\n * This is used in calculations like the binomialDistribution, in which\n * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):\n * it progresses until it is close enough.\n *\n * Below is an example of using epsilon in [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent),\n * where we're trying to find a local minimum of a function's derivative,\n * given by the `fDerivative` method.\n *\n * @example\n * // From calculation, we expect that the local minimum occurs at x=9/4\n * var x_old = 0;\n * // The algorithm starts at x=6\n * var x_new = 6;\n * var stepSize = 0.01;\n *\n * function fDerivative(x) {\n *   return 4 * Math.pow(x, 3) - 9 * Math.pow(x, 2);\n * }\n *\n * // The loop runs until the difference between the previous\n * // value and the current value is smaller than epsilon - a rough\n * // meaure of 'close enough'\n * while (Math.abs(x_new - x_old) > ss.epsilon) {\n *   x_old = x_new;\n *   x_new = x_old - stepSize * fDerivative(x_old);\n * }\n *\n * console.log('Local minimum occurs at', x_new);\n */\nconst epsilon = 0.0001;\n\nexport default epsilon;\n","/**\n * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n * integers less than or equal to n. Often factorial is implemented\n * recursively, but this iterative approach is significantly faster\n * and simpler.\n *\n * @param {number} n input, must be an integer number 1 or greater\n * @returns {number} factorial: n!\n * @throws {Error} if n is less than 0 or not an integer\n * @example\n * factorial(5); // => 120\n */\nfunction factorial(n) {\n    // factorial is mathematically undefined for negative numbers\n    if (n < 0) {\n        throw new Error(\"factorial requires a non-negative value\");\n    }\n\n    if (Math.floor(n) !== n) {\n        throw new Error(\"factorial requires an integer input\");\n    }\n\n    // typically you'll expand the factorial function going down, like\n    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n    // counting from 2 up to the number in question, and since anything\n    // multiplied by 1 is itself, the loop only needs to start at 2.\n    let accumulator = 1;\n    for (let i = 2; i <= n; i++) {\n        // for each number up to and including the number `n`, multiply\n        // the accumulator my that number.\n        accumulator *= i;\n    }\n    return accumulator;\n}\n\nexport default factorial;\n","// Define series coefficients\nconst COEFFICIENTS = [\n    0.99999999999999709182,\n    57.156235665862923517,\n    -59.597960355475491248,\n    14.136097974741747174,\n    -0.49191381609762019978,\n    0.33994649984811888699e-4,\n    0.46523628927048575665e-4,\n    -0.98374475304879564677e-4,\n    0.15808870322491248884e-3,\n    -0.21026444172410488319e-3,\n    0.2174396181152126432e-3,\n    -0.16431810653676389022e-3,\n    0.84418223983852743293e-4,\n    -0.2619083840158140867e-4,\n    0.36899182659531622704e-5\n];\n\nconst g = 607 / 128;\nconst LOGSQRT2PI = Math.log(Math.sqrt(2 * Math.PI));\n\n/**\n * Compute the logarithm of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Lanczos' approximation.\n * This function takes as input any real-value n greater than 0.\n * This function is useful for values of n too large for the normal gamma function (n > 165).\n * The code is based on Lanczo's Gamma approximation, defined [here](http://my.fit.edu/~gabdo/gamma.txt).\n *\n * @param {number} n Any real number greater than zero.\n * @returns {number} The logarithm of gamma of the input value.\n *\n * @example\n * gammaln(500); // 2605.1158503617335\n * gammaln(2.4); // 0.21685932244884043\n */\nfunction gammaln(n) {\n    // Return infinity if value not in domain\n    if (n <= 0) {\n        return Infinity;\n    }\n\n    // Decrement n, because approximation is defined for n - 1\n    n--;\n\n    // Create series approximation\n    let a = COEFFICIENTS[0];\n\n    for (let i = 1; i < 15; i++) {\n        a += COEFFICIENTS[i] / (n + i);\n    }\n\n    const tmp = g + 0.5 + n;\n\n    // Return natural logarithm of gamma(n)\n    return LOGSQRT2PI + Math.log(a) - tmp + (n + 0.5) * Math.log(tmp);\n}\n\nexport default gammaln;\n","/**\n * **Percentage Points of the χ2 (Chi-Squared) Distribution**\n *\n * The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common\n * chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two\n * criteria of classification of qualitative data, and in confidence interval estimation for a population standard\n * deviation of a normal distribution from a sample standard deviation.\n *\n * Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, \"Probability and Statistics in\n * Engineering and Management Science\", Wiley (1980).\n */\nconst chiSquaredDistributionTable = {\n    1: {\n        0.995: 0,\n        0.99: 0,\n        0.975: 0,\n        0.95: 0,\n        0.9: 0.02,\n        0.5: 0.45,\n        0.1: 2.71,\n        0.05: 3.84,\n        0.025: 5.02,\n        0.01: 6.63,\n        0.005: 7.88\n    },\n    2: {\n        0.995: 0.01,\n        0.99: 0.02,\n        0.975: 0.05,\n        0.95: 0.1,\n        0.9: 0.21,\n        0.5: 1.39,\n        0.1: 4.61,\n        0.05: 5.99,\n        0.025: 7.38,\n        0.01: 9.21,\n        0.005: 10.6\n    },\n    3: {\n        0.995: 0.07,\n        0.99: 0.11,\n        0.975: 0.22,\n        0.95: 0.35,\n        0.9: 0.58,\n        0.5: 2.37,\n        0.1: 6.25,\n        0.05: 7.81,\n        0.025: 9.35,\n        0.01: 11.34,\n        0.005: 12.84\n    },\n    4: {\n        0.995: 0.21,\n        0.99: 0.3,\n        0.975: 0.48,\n        0.95: 0.71,\n        0.9: 1.06,\n        0.5: 3.36,\n        0.1: 7.78,\n        0.05: 9.49,\n        0.025: 11.14,\n        0.01: 13.28,\n        0.005: 14.86\n    },\n    5: {\n        0.995: 0.41,\n        0.99: 0.55,\n        0.975: 0.83,\n        0.95: 1.15,\n        0.9: 1.61,\n        0.5: 4.35,\n        0.1: 9.24,\n        0.05: 11.07,\n        0.025: 12.83,\n        0.01: 15.09,\n        0.005: 16.75\n    },\n    6: {\n        0.995: 0.68,\n        0.99: 0.87,\n        0.975: 1.24,\n        0.95: 1.64,\n        0.9: 2.2,\n        0.5: 5.35,\n        0.1: 10.65,\n        0.05: 12.59,\n        0.025: 14.45,\n        0.01: 16.81,\n        0.005: 18.55\n    },\n    7: {\n        0.995: 0.99,\n        0.99: 1.25,\n        0.975: 1.69,\n        0.95: 2.17,\n        0.9: 2.83,\n        0.5: 6.35,\n        0.1: 12.02,\n        0.05: 14.07,\n        0.025: 16.01,\n        0.01: 18.48,\n        0.005: 20.28\n    },\n    8: {\n        0.995: 1.34,\n        0.99: 1.65,\n        0.975: 2.18,\n        0.95: 2.73,\n        0.9: 3.49,\n        0.5: 7.34,\n        0.1: 13.36,\n        0.05: 15.51,\n        0.025: 17.53,\n        0.01: 20.09,\n        0.005: 21.96\n    },\n    9: {\n        0.995: 1.73,\n        0.99: 2.09,\n        0.975: 2.7,\n        0.95: 3.33,\n        0.9: 4.17,\n        0.5: 8.34,\n        0.1: 14.68,\n        0.05: 16.92,\n        0.025: 19.02,\n        0.01: 21.67,\n        0.005: 23.59\n    },\n    10: {\n        0.995: 2.16,\n        0.99: 2.56,\n        0.975: 3.25,\n        0.95: 3.94,\n        0.9: 4.87,\n        0.5: 9.34,\n        0.1: 15.99,\n        0.05: 18.31,\n        0.025: 20.48,\n        0.01: 23.21,\n        0.005: 25.19\n    },\n    11: {\n        0.995: 2.6,\n        0.99: 3.05,\n        0.975: 3.82,\n        0.95: 4.57,\n        0.9: 5.58,\n        0.5: 10.34,\n        0.1: 17.28,\n        0.05: 19.68,\n        0.025: 21.92,\n        0.01: 24.72,\n        0.005: 26.76\n    },\n    12: {\n        0.995: 3.07,\n        0.99: 3.57,\n        0.975: 4.4,\n        0.95: 5.23,\n        0.9: 6.3,\n        0.5: 11.34,\n        0.1: 18.55,\n        0.05: 21.03,\n        0.025: 23.34,\n        0.01: 26.22,\n        0.005: 28.3\n    },\n    13: {\n        0.995: 3.57,\n        0.99: 4.11,\n        0.975: 5.01,\n        0.95: 5.89,\n        0.9: 7.04,\n        0.5: 12.34,\n        0.1: 19.81,\n        0.05: 22.36,\n        0.025: 24.74,\n        0.01: 27.69,\n        0.005: 29.82\n    },\n    14: {\n        0.995: 4.07,\n        0.99: 4.66,\n        0.975: 5.63,\n        0.95: 6.57,\n        0.9: 7.79,\n        0.5: 13.34,\n        0.1: 21.06,\n        0.05: 23.68,\n        0.025: 26.12,\n        0.01: 29.14,\n        0.005: 31.32\n    },\n    15: {\n        0.995: 4.6,\n        0.99: 5.23,\n        0.975: 6.27,\n        0.95: 7.26,\n        0.9: 8.55,\n        0.5: 14.34,\n        0.1: 22.31,\n        0.05: 25,\n        0.025: 27.49,\n        0.01: 30.58,\n        0.005: 32.8\n    },\n    16: {\n        0.995: 5.14,\n        0.99: 5.81,\n        0.975: 6.91,\n        0.95: 7.96,\n        0.9: 9.31,\n        0.5: 15.34,\n        0.1: 23.54,\n        0.05: 26.3,\n        0.025: 28.85,\n        0.01: 32,\n        0.005: 34.27\n    },\n    17: {\n        0.995: 5.7,\n        0.99: 6.41,\n        0.975: 7.56,\n        0.95: 8.67,\n        0.9: 10.09,\n        0.5: 16.34,\n        0.1: 24.77,\n        0.05: 27.59,\n        0.025: 30.19,\n        0.01: 33.41,\n        0.005: 35.72\n    },\n    18: {\n        0.995: 6.26,\n        0.99: 7.01,\n        0.975: 8.23,\n        0.95: 9.39,\n        0.9: 10.87,\n        0.5: 17.34,\n        0.1: 25.99,\n        0.05: 28.87,\n        0.025: 31.53,\n        0.01: 34.81,\n        0.005: 37.16\n    },\n    19: {\n        0.995: 6.84,\n        0.99: 7.63,\n        0.975: 8.91,\n        0.95: 10.12,\n        0.9: 11.65,\n        0.5: 18.34,\n        0.1: 27.2,\n        0.05: 30.14,\n        0.025: 32.85,\n        0.01: 36.19,\n        0.005: 38.58\n    },\n    20: {\n        0.995: 7.43,\n        0.99: 8.26,\n        0.975: 9.59,\n        0.95: 10.85,\n        0.9: 12.44,\n        0.5: 19.34,\n        0.1: 28.41,\n        0.05: 31.41,\n        0.025: 34.17,\n        0.01: 37.57,\n        0.005: 40\n    },\n    21: {\n        0.995: 8.03,\n        0.99: 8.9,\n        0.975: 10.28,\n        0.95: 11.59,\n        0.9: 13.24,\n        0.5: 20.34,\n        0.1: 29.62,\n        0.05: 32.67,\n        0.025: 35.48,\n        0.01: 38.93,\n        0.005: 41.4\n    },\n    22: {\n        0.995: 8.64,\n        0.99: 9.54,\n        0.975: 10.98,\n        0.95: 12.34,\n        0.9: 14.04,\n        0.5: 21.34,\n        0.1: 30.81,\n        0.05: 33.92,\n        0.025: 36.78,\n        0.01: 40.29,\n        0.005: 42.8\n    },\n    23: {\n        0.995: 9.26,\n        0.99: 10.2,\n        0.975: 11.69,\n        0.95: 13.09,\n        0.9: 14.85,\n        0.5: 22.34,\n        0.1: 32.01,\n        0.05: 35.17,\n        0.025: 38.08,\n        0.01: 41.64,\n        0.005: 44.18\n    },\n    24: {\n        0.995: 9.89,\n        0.99: 10.86,\n        0.975: 12.4,\n        0.95: 13.85,\n        0.9: 15.66,\n        0.5: 23.34,\n        0.1: 33.2,\n        0.05: 36.42,\n        0.025: 39.36,\n        0.01: 42.98,\n        0.005: 45.56\n    },\n    25: {\n        0.995: 10.52,\n        0.99: 11.52,\n        0.975: 13.12,\n        0.95: 14.61,\n        0.9: 16.47,\n        0.5: 24.34,\n        0.1: 34.28,\n        0.05: 37.65,\n        0.025: 40.65,\n        0.01: 44.31,\n        0.005: 46.93\n    },\n    26: {\n        0.995: 11.16,\n        0.99: 12.2,\n        0.975: 13.84,\n        0.95: 15.38,\n        0.9: 17.29,\n        0.5: 25.34,\n        0.1: 35.56,\n        0.05: 38.89,\n        0.025: 41.92,\n        0.01: 45.64,\n        0.005: 48.29\n    },\n    27: {\n        0.995: 11.81,\n        0.99: 12.88,\n        0.975: 14.57,\n        0.95: 16.15,\n        0.9: 18.11,\n        0.5: 26.34,\n        0.1: 36.74,\n        0.05: 40.11,\n        0.025: 43.19,\n        0.01: 46.96,\n        0.005: 49.65\n    },\n    28: {\n        0.995: 12.46,\n        0.99: 13.57,\n        0.975: 15.31,\n        0.95: 16.93,\n        0.9: 18.94,\n        0.5: 27.34,\n        0.1: 37.92,\n        0.05: 41.34,\n        0.025: 44.46,\n        0.01: 48.28,\n        0.005: 50.99\n    },\n    29: {\n        0.995: 13.12,\n        0.99: 14.26,\n        0.975: 16.05,\n        0.95: 17.71,\n        0.9: 19.77,\n        0.5: 28.34,\n        0.1: 39.09,\n        0.05: 42.56,\n        0.025: 45.72,\n        0.01: 49.59,\n        0.005: 52.34\n    },\n    30: {\n        0.995: 13.79,\n        0.99: 14.95,\n        0.975: 16.79,\n        0.95: 18.49,\n        0.9: 20.6,\n        0.5: 29.34,\n        0.1: 40.26,\n        0.05: 43.77,\n        0.025: 46.98,\n        0.01: 50.89,\n        0.005: 53.67\n    },\n    40: {\n        0.995: 20.71,\n        0.99: 22.16,\n        0.975: 24.43,\n        0.95: 26.51,\n        0.9: 29.05,\n        0.5: 39.34,\n        0.1: 51.81,\n        0.05: 55.76,\n        0.025: 59.34,\n        0.01: 63.69,\n        0.005: 66.77\n    },\n    50: {\n        0.995: 27.99,\n        0.99: 29.71,\n        0.975: 32.36,\n        0.95: 34.76,\n        0.9: 37.69,\n        0.5: 49.33,\n        0.1: 63.17,\n        0.05: 67.5,\n        0.025: 71.42,\n        0.01: 76.15,\n        0.005: 79.49\n    },\n    60: {\n        0.995: 35.53,\n        0.99: 37.48,\n        0.975: 40.48,\n        0.95: 43.19,\n        0.9: 46.46,\n        0.5: 59.33,\n        0.1: 74.4,\n        0.05: 79.08,\n        0.025: 83.3,\n        0.01: 88.38,\n        0.005: 91.95\n    },\n    70: {\n        0.995: 43.28,\n        0.99: 45.44,\n        0.975: 48.76,\n        0.95: 51.74,\n        0.9: 55.33,\n        0.5: 69.33,\n        0.1: 85.53,\n        0.05: 90.53,\n        0.025: 95.02,\n        0.01: 100.42,\n        0.005: 104.22\n    },\n    80: {\n        0.995: 51.17,\n        0.99: 53.54,\n        0.975: 57.15,\n        0.95: 60.39,\n        0.9: 64.28,\n        0.5: 79.33,\n        0.1: 96.58,\n        0.05: 101.88,\n        0.025: 106.63,\n        0.01: 112.33,\n        0.005: 116.32\n    },\n    90: {\n        0.995: 59.2,\n        0.99: 61.75,\n        0.975: 65.65,\n        0.95: 69.13,\n        0.9: 73.29,\n        0.5: 89.33,\n        0.1: 107.57,\n        0.05: 113.14,\n        0.025: 118.14,\n        0.01: 124.12,\n        0.005: 128.3\n    },\n    100: {\n        0.995: 67.33,\n        0.99: 70.06,\n        0.975: 74.22,\n        0.95: 77.93,\n        0.9: 82.36,\n        0.5: 99.33,\n        0.1: 118.5,\n        0.05: 124.34,\n        0.025: 129.56,\n        0.01: 135.81,\n        0.005: 140.17\n    }\n};\n\nexport default chiSquaredDistributionTable;\n","import interquartileRange from \"./interquartile_range\";\nimport stddev from \"./sample_standard_deviation\";\n\nconst SQRT_2PI = Math.sqrt(2 * Math.PI);\n\n/**\n * [Well-known kernels](https://en.wikipedia.org/wiki/Kernel_(statistics)#Kernel_functions_in_common_use)\n * @private\n */\nconst kernels = {\n    /**\n     * The gaussian kernel.\n     * @private\n     */\n    gaussian: function (u) {\n        return Math.exp(-0.5 * u * u) / SQRT_2PI;\n    }\n};\n\n/**\n * Well known bandwidth selection methods\n * @private\n */\nconst bandwidthMethods = {\n    /**\n     * The [\"normal reference distribution\"\n     * rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html),\n     * a commonly used version of [Silverman's\n     * rule-of-thumb](https://en.wikipedia.org/wiki/Kernel_density_estimation#A_rule-of-thumb_bandwidth_estimator).\n     * @private\n     */\n    nrd: function (x) {\n        let s = stddev(x);\n        const iqr = interquartileRange(x);\n        if (typeof iqr === \"number\") {\n            s = Math.min(s, iqr / 1.34);\n        }\n        return 1.06 * s * Math.pow(x.length, -0.2);\n    }\n};\n\n/**\n * [Kernel density estimation](https://en.wikipedia.org/wiki/Kernel_density_estimation)\n * is a useful tool for, among other things, estimating the shape of the\n * underlying probability distribution from a sample.\n *\n * @name kernelDensityEstimation\n * @param X sample values\n * @param kernel The kernel function to use. If a function is provided, it should return non-negative values and integrate to 1. Defaults to 'gaussian'.\n * @param bandwidthMethod The \"bandwidth selection\" method to use, or a fixed bandwidth value. Defaults to \"nrd\", the commonly-used [\"normal reference distribution\" rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html).\n * @returns {Function} An estimated [probability density function](https://en.wikipedia.org/wiki/Probability_density_function) for the given sample. The returned function runs in `O(X.length)`.\n */\nfunction kernelDensityEstimation(X, kernel, bandwidthMethod) {\n    let kernelFn;\n    if (kernel === undefined) {\n        kernelFn = kernels.gaussian;\n    } else if (typeof kernel === \"string\") {\n        if (!kernels[kernel]) {\n            throw new Error('Unknown kernel \"' + kernel + '\"');\n        }\n        kernelFn = kernels[kernel];\n    } else {\n        kernelFn = kernel;\n    }\n\n    let bandwidth;\n    if (typeof bandwidthMethod === \"undefined\") {\n        bandwidth = bandwidthMethods.nrd(X);\n    } else if (typeof bandwidthMethod === \"string\") {\n        if (!bandwidthMethods[bandwidthMethod]) {\n            throw new Error(\n                'Unknown bandwidth method \"' + bandwidthMethod + '\"'\n            );\n        }\n        bandwidth = bandwidthMethods[bandwidthMethod](X);\n    } else {\n        bandwidth = bandwidthMethod;\n    }\n\n    return function (x) {\n        let i = 0;\n        let sum = 0;\n        for (i = 0; i < X.length; i++) {\n            sum += kernelFn((x - X[i]) / bandwidth);\n        }\n        return sum / bandwidth / X.length;\n    };\n}\n\nexport default kernelDensityEstimation;\n","const SQRT_2PI = Math.sqrt(2 * Math.PI);\n\nfunction cumulativeDistribution(z) {\n    let sum = z,\n        tmp = z;\n\n    // 15 iterations are enough for 4-digit precision\n    for (let i = 1; i < 15; i++) {\n        tmp *= (z * z) / (2 * i + 1);\n        sum += tmp;\n    }\n    return (\n        Math.round((0.5 + (sum / SQRT_2PI) * Math.exp((-z * z) / 2)) * 1e4) /\n        1e4\n    );\n}\n\n/**\n * A standard normal table, also called the unit normal table or Z table,\n * is a mathematical table for the values of Φ (phi), which are the values of\n * the cumulative distribution function of the normal distribution.\n * It is used to find the probability that a statistic is observed below,\n * above, or between values on the standard normal distribution, and by\n * extension, any normal distribution.\n *\n * The probabilities are calculated using the\n * [Cumulative distribution function](https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function).\n * The table used is the cumulative, and not cumulative from 0 to mean\n * (even though the latter has 5 digits precision, instead of 4).\n */\nconst standardNormalTable = [];\n\nfor (let z = 0; z <= 3.09; z += 0.01) {\n    standardNormalTable.push(cumulativeDistribution(z));\n}\n\nexport default standardNormalTable;\n","/**\n * **[Gaussian error function](http://en.wikipedia.org/wiki/Error_function)**\n *\n * The `errorFunction(x/(sd * Math.sqrt(2)))` is the probability that a value in a\n * normal distribution with standard deviation sd is within x of the mean.\n *\n * This function returns a numerical approximation to the exact value.\n * It uses Horner's method to evaluate the polynomial of τ (tau).\n *\n * @param {number} x input\n * @return {number} error estimation\n * @example\n * errorFunction(1).toFixed(2); // => '0.84'\n */\nfunction errorFunction(x) {\n    const t = 1 / (1 + 0.5 * Math.abs(x));\n    const tau =\n        t *\n        Math.exp(\n            -x * x +\n                ((((((((0.17087277 * t - 0.82215223) * t + 1.48851587) * t -\n                    1.13520398) *\n                    t +\n                    0.27886807) *\n                    t -\n                    0.18628806) *\n                    t +\n                    0.09678418) *\n                    t +\n                    0.37409196) *\n                    t +\n                    1.00002368) *\n                    t -\n                1.26551223\n        );\n    if (x >= 0) {\n        return 1 - tau;\n    } else {\n        return tau - 1;\n    }\n}\n\nexport default errorFunction;\n","/**\n * The Inverse [Gaussian error function](http://en.wikipedia.org/wiki/Error_function)\n * returns a numerical approximation to the value that would have caused\n * `errorFunction()` to return x.\n *\n * @param {number} x value of error function\n * @returns {number} estimated inverted value\n */\nfunction inverseErrorFunction(x) {\n    const a = (8 * (Math.PI - 3)) / (3 * Math.PI * (4 - Math.PI));\n\n    const inv = Math.sqrt(\n        Math.sqrt(\n            Math.pow(2 / (Math.PI * a) + Math.log(1 - x * x) / 2, 2) -\n                Math.log(1 - x * x) / a\n        ) -\n            (2 / (Math.PI * a) + Math.log(1 - x * x) / 2)\n    );\n\n    if (x >= 0) {\n        return inv;\n    } else {\n        return -inv;\n    }\n}\n\nexport default inverseErrorFunction;\n","/**\n * [Sign](https://en.wikipedia.org/wiki/Sign_function) is a function\n * that extracts the sign of a real number\n *\n * @param {number} x input value\n * @returns {number} sign value either 1, 0 or -1\n * @throws {TypeError} if the input argument x is not a number\n * @private\n *\n * @example\n * sign(2); // => 1\n */\nfunction sign(x) {\n    if (typeof x === \"number\") {\n        if (x < 0) {\n            return -1;\n        } else if (x === 0) {\n            return 0;\n        } else {\n            return 1;\n        }\n    } else {\n        throw new TypeError(\"not a number\");\n    }\n}\n\nexport default sign;\n","/**\n * Calculate Euclidean distance between two points.\n * @param {Array<number>} left First N-dimensional point.\n * @param {Array<number>} right Second N-dimensional point.\n * @returns {number} Distance.\n */\nfunction euclideanDistance(left, right) {\n    let sum = 0;\n    for (let i = 0; i < left.length; i++) {\n        const diff = left[i] - right[i];\n        sum += diff * diff;\n    }\n    return Math.sqrt(sum);\n}\n\nexport default euclideanDistance;\n","import euclideanDistance from \"./euclidean_distance\";\nimport makeMatrix from \"./make_matrix\";\nimport sample from \"./sample\";\n\n/**\n * @typedef {Object} kMeansReturn\n * @property {Array<number>} labels The labels.\n * @property {Array<Array<number>>} centroids The cluster centroids.\n */\n\n/**\n * Perform k-means clustering.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points to be clustered.\n * @param {number} numCluster How many clusters to create.\n * @param {Function} randomSource An optional entropy source that generates uniform values in [0, 1).\n * @return {kMeansReturn} Labels (same length as data) and centroids (same length as numCluster).\n * @throws {Error} If any centroids wind up friendless (i.e., without associated points).\n *\n * @example\n * kMeansCluster([[0.0, 0.5], [1.0, 0.5]], 2); // => {labels: [0, 1], centroids: [[0.0, 0.5], [1.0 0.5]]}\n */\nfunction kMeansCluster(points, numCluster, randomSource = Math.random) {\n    let oldCentroids = null;\n    let newCentroids = sample(points, numCluster, randomSource);\n    let labels = null;\n    let change = Number.MAX_VALUE;\n    while (change !== 0) {\n        labels = labelPoints(points, newCentroids);\n        oldCentroids = newCentroids;\n        newCentroids = calculateCentroids(points, labels, numCluster);\n        change = calculateChange(newCentroids, oldCentroids);\n    }\n    return {\n        labels: labels,\n        centroids: newCentroids\n    };\n}\n\n/**\n * Label each point according to which centroid it is closest to.\n *\n * @private\n * @param {Array<Array<number>>} points Array of XY coordinates.\n * @param {Array<Array<number>>} centroids Current centroids.\n * @return {Array<number>} Group labels.\n */\nfunction labelPoints(points, centroids) {\n    return points.map((p) => {\n        let minDist = Number.MAX_VALUE;\n        let label = -1;\n        for (let i = 0; i < centroids.length; i++) {\n            const dist = euclideanDistance(p, centroids[i]);\n            if (dist < minDist) {\n                minDist = dist;\n                label = i;\n            }\n        }\n        return label;\n    });\n}\n\n/**\n * Calculate centroids for points given labels.\n *\n * @private\n * @param {Array<Array<number>>} points Array of XY coordinates.\n * @param {Array<number>} labels Which groups points belong to.\n * @param {number} numCluster Number of clusters being created.\n * @return {Array<Array<number>>} Centroid for each group.\n * @throws {Error} If any centroids wind up friendless (i.e., without associated points).\n */\nfunction calculateCentroids(points, labels, numCluster) {\n    // Initialize accumulators.\n    const dimension = points[0].length;\n    const centroids = makeMatrix(numCluster, dimension);\n    const counts = Array(numCluster).fill(0);\n\n    // Add points to centroids' accumulators and count points per centroid.\n    const numPoints = points.length;\n    for (let i = 0; i < numPoints; i++) {\n        const point = points[i];\n        const label = labels[i];\n        const current = centroids[label];\n        for (let j = 0; j < dimension; j++) {\n            current[j] += point[j];\n        }\n        counts[label] += 1;\n    }\n\n    // Rescale centroids, checking for any that have no points.\n    for (let i = 0; i < numCluster; i++) {\n        if (counts[i] === 0) {\n            throw new Error(`Centroid ${i} has no friends`);\n        }\n        const centroid = centroids[i];\n        for (let j = 0; j < dimension; j++) {\n            centroid[j] /= counts[i];\n        }\n    }\n\n    return centroids;\n}\n\n/**\n * Calculate the difference between old centroids and new centroids.\n *\n * @private\n * @param {Array<Array<number>>} left One list of centroids.\n * @param {Array<Array<number>>} right Another list of centroids.\n * @return {number} Distance between centroids.\n */\nfunction calculateChange(left, right) {\n    let total = 0;\n    for (let i = 0; i < left.length; i++) {\n        total += euclideanDistance(left[i], right[i]);\n    }\n    return total;\n}\n\nexport default kMeansCluster;\n","import euclideanDistance from \"./euclidean_distance\";\nimport makeMatrix from \"./make_matrix\";\nimport max from \"./max\";\n\n/**\n * Calculate the [silhouette values](https://en.wikipedia.org/wiki/Silhouette_(clustering))\n * for clustered data.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {Array<number>} The silhouette value for each point.\n *\n * @example\n * silhouette([[0.25], [0.75]], [0, 0]); // => [1.0, 1.0]\n */\nfunction silhouette(points, labels) {\n    if (points.length !== labels.length) {\n        throw new Error(\"must have exactly as many labels as points\");\n    }\n    const groupings = createGroups(labels);\n    const distances = calculateAllDistances(points);\n    const result = [];\n    for (let i = 0; i < points.length; i++) {\n        let s = 0;\n        if (groupings[labels[i]].length > 1) {\n            const a = meanDistanceFromPointToGroup(\n                i,\n                groupings[labels[i]],\n                distances\n            );\n            const b = meanDistanceToNearestGroup(\n                i,\n                labels,\n                groupings,\n                distances\n            );\n            s = (b - a) / Math.max(a, b);\n        }\n        result.push(s);\n    }\n    return result;\n}\n\n/**\n * Create a lookup table mapping group IDs to point IDs.\n *\n * @private\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {Array<Array<number>>} An array of length G, each of whose entries is an array\n * containing the indices of the points in that group.\n */\nfunction createGroups(labels) {\n    const numGroups = 1 + max(labels);\n    const result = Array(numGroups);\n    for (let i = 0; i < labels.length; i++) {\n        const label = labels[i];\n        if (result[label] === undefined) {\n            result[label] = [];\n        }\n        result[label].push(i);\n    }\n    return result;\n}\n\n/**\n * Create a lookup table of all inter-point distances.\n *\n * @private\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @return {Array<Array<number>>} A symmetric square array of inter-point distances\n * (zero on the diagonal).\n */\nfunction calculateAllDistances(points) {\n    const numPoints = points.length;\n    const result = makeMatrix(numPoints, numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        for (let j = 0; j < i; j++) {\n            result[i][j] = euclideanDistance(points[i], points[j]);\n            result[j][i] = result[i][j];\n        }\n    }\n    return result;\n}\n\n/**\n * Calculate the mean distance between this point and all the points in the\n * nearest group (as determined by which point in another group is closest).\n *\n * @private\n * @param {number} which The index of this point.\n * @param {Array<number>} labels Labels of points.\n * @param {Array<Array<number>>} groupings An array whose entries are arrays\n * containing the indices of the points in that group.\n * @param {Array<Array<number>>} distances A symmetric square array of inter-point\n * distances.\n * @return {number} The mean distance from this point to others in the nearest\n * group.\n */\nfunction meanDistanceToNearestGroup(which, labels, groupings, distances) {\n    const label = labels[which];\n    let result = Number.MAX_VALUE;\n    for (let i = 0; i < groupings.length; i++) {\n        if (i !== label) {\n            const d = meanDistanceFromPointToGroup(\n                which,\n                groupings[i],\n                distances\n            );\n            if (d < result) {\n                result = d;\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Calculate the mean distance between a point and all the points in a group\n * (possibly its own).\n *\n * @private\n * @param {number} which The index of this point.\n * @param {Array<number>} group The indices of all the points in the group in\n * question.\n * @param {Array<Array<number>>} distances A symmetric square array of inter-point\n * distances.\n * @return {number} The mean distance from this point to others in the\n * specified group.\n */\nfunction meanDistanceFromPointToGroup(which, group, distances) {\n    let total = 0;\n    for (let i = 0; i < group.length; i++) {\n        total += distances[which][group[i]];\n    }\n    return total / group.length;\n}\n\nexport default silhouette;\n","/**\n * Relative error.\n *\n * This is more difficult to calculate than it first appears [1,2].  The usual\n * formula for the relative error between an actual value A and an expected\n * value E is `|(A-E)/E|`, but:\n *\n * 1. If the expected value is 0, any other value has infinite relative error,\n *    which is counter-intuitive: if the expected voltage is 0, getting 1/10th\n *    of a volt doesn't feel like an infinitely large error.\n *\n * 2. This formula does not satisfy the mathematical definition of a metric [3].\n *    [4] solved this problem by defining the relative error as `|ln(|A/E|)|`,\n *    but that formula only works if all values are positive: for example, it\n *    reports the relative error of -10 and 10 as 0.\n *\n * Our implementation sticks with convention and returns:\n *\n * - 0 if the actual and expected values are both zero\n * - Infinity if the actual value is non-zero and the expected value is zero\n * - `|(A-E)/E|` in all other cases\n *\n * [1] https://math.stackexchange.com/questions/677852/how-to-calculate-relative-error-when-true-value-is-zero\n * [2] https://en.wikipedia.org/wiki/Relative_change_and_difference\n * [3] https://en.wikipedia.org/wiki/Metric_(mathematics)#Definition\n * [4] F.W.J. Olver: \"A New Approach to Error Arithmetic.\" SIAM Journal on\n *     Numerical Analysis, 15(2), 1978, 10.1137/0715024.\n *\n * @param {number} actual The actual value.\n * @param {number} expected The expected value.\n * @return {number} The relative error.\n */\nfunction relativeError(actual, expected) {\n    if (actual === 0 && expected === 0) {\n        return 0;\n    }\n    return Math.abs((actual - expected) / expected);\n}\n\nexport default relativeError;\n","/**\n * When adding a new value to a list, one does not have to necessary\n * recompute the mean of the list in linear time. They can instead use\n * this function to compute the new mean by providing the current mean,\n * the number of elements in the list that produced it and the new\n * value to add.\n *\n * @since 2.5.0\n * @param {number} mean current mean\n * @param {number} n number of items in the list\n * @param {number} newValue the added value\n * @returns {number} the new mean\n *\n * @example\n * addToMean(14, 5, 53); // => 20.5\n */\nfunction addToMean(mean, n, newValue) {\n    return mean + (newValue - mean) / (n + 1);\n}\n\nexport default addToMean;\n","import epsilon from \"./epsilon\";\nimport relativeError from \"./relative_error\";\n\n/**\n * Approximate equality.\n *\n * @param {number} actual The value to be tested.\n * @param {number} expected The reference value.\n * @param {number} tolerance The acceptable relative difference.\n * @return {boolean} Whether numbers are within tolerance.\n */\nfunction approxEqual(actual, expected, tolerance = epsilon) {\n    return relativeError(actual, expected) <= tolerance;\n}\n\nexport default approxEqual;\n","/**\n * The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)\n * is the probability discrete\n * distribution of a random variable which takes value 1 with success\n * probability `p` and value 0 with failure\n * probability `q` = 1 - `p`. It can be used, for example, to represent the\n * toss of a coin, where \"1\" is defined to mean \"heads\" and \"0\" is defined\n * to mean \"tails\" (or vice versa). It is\n * a special case of a Binomial Distribution\n * where `n` = 1.\n *\n * @param {number} p input value, between 0 and 1 inclusive\n * @returns {number[]} values of bernoulli distribution at this point\n * @throws {Error} if p is outside 0 and 1\n * @example\n * bernoulliDistribution(0.3); // => [0.7, 0.3]\n */\nfunction bernoulliDistribution(p) /*: number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1)\n    if (p < 0 || p > 1) {\n        throw new Error(\n            \"bernoulliDistribution requires probability to be between 0 and 1 inclusive\"\n        );\n    }\n\n    return [1 - p, p];\n}\n\nexport default bernoulliDistribution;\n","import epsilon from \"./epsilon\";\n\n/**\n * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n *\n * @param {number} trials number of trials to simulate\n * @param {number} probability\n * @returns {number[]} output\n */\nfunction binomialDistribution(trials, probability) /*: ?number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n    // that `n` is an integer, strictly positive.\n    if (probability < 0 || probability > 1 || trials <= 0 || trials % 1 !== 0) {\n        return undefined;\n    }\n\n    // We initialize `x`, the random variable, and `accumulator`, an accumulator\n    // for the cumulative distribution function to 0. `distribution_functions`\n    // is the object we'll return with the `probability_of_x` and the\n    // `cumulativeProbability_of_x`, as well as the calculated mean &\n    // variance. We iterate until the `cumulativeProbability_of_x` is\n    // within `epsilon` of 1.0.\n    let x = 0;\n    let cumulativeProbability = 0;\n    const cells = [];\n    let binomialCoefficient = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] =\n            binomialCoefficient *\n            Math.pow(probability, x) *\n            Math.pow(1 - probability, trials - x);\n        cumulativeProbability += cells[x];\n        x++;\n        binomialCoefficient = (binomialCoefficient * (trials - x + 1)) / x;\n        // when the cumulativeProbability is nearly 1, we've calculated\n        // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nexport default binomialDistribution;\n","import sign from \"./sign\";\n\n/**\n * [Bisection method](https://en.wikipedia.org/wiki/Bisection_method) is a root-finding\n * method that repeatedly bisects an interval to find the root.\n *\n * This function returns a numerical approximation to the exact value.\n *\n * @param {Function} func input function\n * @param {number} start - start of interval\n * @param {number} end - end of interval\n * @param {number} maxIterations - the maximum number of iterations\n * @param {number} errorTolerance - the error tolerance\n * @returns {number} estimated root value\n * @throws {TypeError} Argument func must be a function\n *\n * @example\n * bisect(Math.cos,0,4,100,0.003); // => 1.572265625\n */\nfunction bisect(func, start, end, maxIterations, errorTolerance) {\n    if (typeof func !== \"function\")\n        throw new TypeError(\"func must be a function\");\n\n    for (let i = 0; i < maxIterations; i++) {\n        const output = (start + end) / 2;\n\n        if (\n            func(output) === 0 ||\n            Math.abs((end - start) / 2) < errorTolerance\n        ) {\n            return output;\n        }\n\n        if (sign(func(output)) === sign(func(start))) {\n            start = output;\n        } else {\n            end = output;\n        }\n    }\n\n    throw new Error(\"maximum number of iterations exceeded\");\n}\n\nexport default bisect;\n","import chiSquaredDistributionTable from \"./chi_squared_distribution_table\";\nimport mean from \"./mean\";\n\n/**\n * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n * (that is, counts of observations), each squared and divided by the number of observations expected given the\n * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n * cells and `c` is the number of estimated parameters for the distribution.\n *\n * @param {Array<number>} data\n * @param {Function} distributionType a function that returns a point in a distribution:\n * for instance, binomial, bernoulli, or poisson\n * @param {number} significance\n * @returns {number} chi squared goodness of fit\n * @example\n * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n * // \"Probability and Statistics in Engineering and Management Science\", Wiley (1980).\n * var data1019 = [\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n *     3, 3, 3, 3\n * ];\n * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05); //= false\n */\nfunction chiSquaredGoodnessOfFit(data, distributionType, significance) {\n    // Estimate from the sample data, a weighted mean.\n    const inputMean = mean(data);\n    // Calculated value of the χ2 statistic.\n    let chiSquared = 0;\n    // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n    // Lose one degree of freedom for estimating `lambda` from the sample data.\n    const c = 1;\n    // The hypothesized distribution.\n    // Generate the hypothesized distribution.\n    const hypothesizedDistribution = distributionType(inputMean);\n    const observedFrequencies = [];\n    const expectedFrequencies = [];\n\n    // Create an array holding a histogram from the sample data, of\n    // the form `{ value: numberOfOcurrences }`\n    for (let i = 0; i < data.length; i++) {\n        if (observedFrequencies[data[i]] === undefined) {\n            observedFrequencies[data[i]] = 0;\n        }\n        observedFrequencies[data[i]]++;\n    }\n\n    // The histogram we created might be sparse - there might be gaps\n    // between values. So we iterate through the histogram, making\n    // sure that instead of undefined, gaps have 0 values.\n    for (let i = 0; i < observedFrequencies.length; i++) {\n        if (observedFrequencies[i] === undefined) {\n            observedFrequencies[i] = 0;\n        }\n    }\n\n    // Create an array holding a histogram of expected data given the\n    // sample size and hypothesized distribution.\n    for (const k in hypothesizedDistribution) {\n        if (k in observedFrequencies) {\n            expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;\n        }\n    }\n\n    // Working backward through the expected frequencies, collapse classes\n    // if less than three observations are expected for a class.\n    // This transformation is applied to the observed frequencies as well.\n    for (let k = expectedFrequencies.length - 1; k >= 0; k--) {\n        if (expectedFrequencies[k] < 3) {\n            expectedFrequencies[k - 1] += expectedFrequencies[k];\n            expectedFrequencies.pop();\n\n            observedFrequencies[k - 1] += observedFrequencies[k];\n            observedFrequencies.pop();\n        }\n    }\n\n    // Iterate through the squared differences between observed & expected\n    // frequencies, accumulating the `chiSquared` statistic.\n    for (let k = 0; k < observedFrequencies.length; k++) {\n        chiSquared +=\n            Math.pow(observedFrequencies[k] - expectedFrequencies[k], 2) /\n            expectedFrequencies[k];\n    }\n\n    // Calculate degrees of freedom for this test and look it up in the\n    // `chiSquaredDistributionTable` in order to\n    // accept or reject the goodness-of-fit of the hypothesized distribution.\n    // Degrees of freedom, calculated as (number of class intervals -\n    // number of hypothesized distribution parameters estimated - 1)\n    const degreesOfFreedom = observedFrequencies.length - c - 1;\n    return (\n        chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared\n    );\n}\n\nexport default chiSquaredGoodnessOfFit;\n","/**\n * Split an array into chunks of a specified size. This function\n * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n * function, and thus will insert smaller-sized chunks at the end if\n * the input size is not divisible by the chunk size.\n *\n * `x` is expected to be an array, and `chunkSize` a number.\n * The `x` array can contain any kind of data.\n *\n * @param {Array} x a sample\n * @param {number} chunkSize size of each output array. must be a positive integer\n * @returns {Array<Array>} a chunked array\n * @throws {Error} if chunk size is less than 1 or not an integer\n * @example\n * chunk([1, 2, 3, 4, 5, 6], 2);\n * // => [[1, 2], [3, 4], [5, 6]]\n */\nfunction chunk(x, chunkSize) {\n    // a list of result chunks, as arrays in an array\n    const output = [];\n\n    // `chunkSize` must be zero or higher - otherwise the loop below,\n    // in which we call `start += chunkSize`, will loop infinitely.\n    // So, we'll detect and throw in that case to indicate\n    // invalid input.\n    if (chunkSize < 1) {\n        throw new Error(\"chunk size must be a positive number\");\n    }\n\n    if (Math.floor(chunkSize) !== chunkSize) {\n        throw new Error(\"chunk size must be an integer\");\n    }\n\n    // `start` is the index at which `.slice` will start selecting\n    // new array elements\n    for (let start = 0; start < x.length; start += chunkSize) {\n        // for each chunk, slice that part of the array and add it\n        // to the output. The `.slice` function does not change\n        // the original array.\n        output.push(x.slice(start, start + chunkSize));\n    }\n    return output;\n}\n\nexport default chunk;\n","/**\n * Implementation of Combinations\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * https://en.wikipedia.org/wiki/Combination\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]\n */\n\nfunction combinations(x, k) {\n    let i;\n    let subI;\n    const combinationList = [];\n    let subsetCombinations;\n    let next;\n\n    for (i = 0; i < x.length; i++) {\n        if (k === 1) {\n            combinationList.push([x[i]]);\n        } else {\n            subsetCombinations = combinations(x.slice(i + 1, x.length), k - 1);\n            for (subI = 0; subI < subsetCombinations.length; subI++) {\n                next = subsetCombinations[subI];\n                next.unshift(x[i]);\n                combinationList.push(next);\n            }\n        }\n    }\n    return combinationList;\n}\n\nexport default combinations;\n","/**\n * Implementation of [Combinations](https://en.wikipedia.org/wiki/Combination) with replacement\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * 'With replacement' means that a given element can be chosen multiple times.\n * Unlike permutation, order doesn't matter for combinations.\n *\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinationsReplacement([1, 2], 2); // => [[1, 1], [1, 2], [2, 2]]\n */\nfunction combinationsReplacement(x, k) {\n    const combinationList = [];\n\n    for (let i = 0; i < x.length; i++) {\n        if (k === 1) {\n            // If we're requested to find only one element, we don't need\n            // to recurse: just push `x[i]` onto the list of combinations.\n            combinationList.push([x[i]]);\n        } else {\n            // Otherwise, recursively find combinations, given `k - 1`. Note that\n            // we request `k - 1`, so if you were looking for k=3 combinations, we're\n            // requesting k=2. This -1 gets reversed in the for loop right after this\n            // code, since we concatenate `x[i]` onto the selected combinations,\n            // bringing `k` back up to your requested level.\n            // This recursion may go many levels deep, since it only stops once\n            // k=1.\n            const subsetCombinations = combinationsReplacement(\n                x.slice(i, x.length),\n                k - 1\n            );\n\n            for (let j = 0; j < subsetCombinations.length; j++) {\n                combinationList.push([x[i]].concat(subsetCombinations[j]));\n            }\n        }\n    }\n\n    return combinationList;\n}\n\nexport default combinationsReplacement;\n","import combineMeans from \"./combine_means\";\n\n/**\n * When combining two lists of values for which one already knows the variances,\n * one does not have to necessary recompute the variance of the combined lists\n * in linear time. They can instead use this function to compute the combined\n * variance by providing the variance, mean & number of values of the first list\n * and the variance, mean & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} variance1 variance of the first list\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} variance2 variance of the second list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineVariances(14 / 3, 5, 3, 8 / 3, 4, 3); // => 47 / 12\n */\nfunction combineVariances(variance1, mean1, n1, variance2, mean2, n2) {\n    const newMean = combineMeans(mean1, n1, mean2, n2);\n\n    return (\n        (n1 * (variance1 + Math.pow(mean1 - newMean, 2)) +\n            n2 * (variance2 + Math.pow(mean2 - newMean, 2))) /\n        (n1 + n2)\n    );\n}\n\nexport default combineVariances;\n","import standardNormalTable from \"./standard_normal_table\";\n\n/**\n * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**\n *\n * Since probability tables cannot be\n * printed for every normal distribution, as there are an infinite variety\n * of normal distributions, it is common practice to convert a normal to a\n * standard normal and then use the standard normal table to find probabilities.\n *\n * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability\n * instead of looking it up in a table.\n *\n * @param {number} z\n * @returns {number} cumulative standard normal probability\n */\nfunction cumulativeStdNormalProbability(z) {\n    // Calculate the position of this value.\n    const absZ = Math.abs(z);\n    // Each row begins with a different\n    // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table\n    // corresponds to a range of 0.01 in the input values, so the value is\n    // multiplied by 100.\n    const index = Math.min(\n        Math.round(absZ * 100),\n        standardNormalTable.length - 1\n    );\n\n    // The index we calculate must be in the table as a positive value,\n    // but we still pay attention to whether the input is positive\n    // or negative, and flip the output value as a last step.\n    if (z >= 0) {\n        return standardNormalTable[index];\n    } else {\n        // due to floating-point arithmetic, values in the table with\n        // 4 significant figures can nevertheless end up as repeating\n        // fractions when they're computed here.\n        return +(1 - standardNormalTable[index]).toFixed(4);\n    }\n}\n\nexport default cumulativeStdNormalProbability;\n","import max from \"./max\";\nimport min from \"./min\";\n\n/**\n * Given an array of x, this will find the extent of the\n * x and return an array of breaks that can be used\n * to categorize the x into a number of classes. The\n * returned array will always be 1 longer than the number of\n * classes because it includes the minimum value.\n *\n * @param {Array<number>} x an array of number values\n * @param {number} nClasses number of desired classes\n * @returns {Array<number>} array of class break positions\n * @example\n * equalIntervalBreaks([1, 2, 3, 4, 5, 6], 4); // => [1, 2.25, 3.5, 4.75, 6]\n */\nfunction equalIntervalBreaks(x, nClasses) {\n    if (x.length < 2) {\n        return x;\n    }\n\n    const theMin = min(x);\n    const theMax = max(x);\n\n    // the first break will always be the minimum value\n    // in the xset\n    const breaks = [theMin];\n\n    // The size of each break is the full range of the x\n    // divided by the number of classes requested\n    const breakSize = (theMax - theMin) / nClasses;\n\n    // In the case of nClasses = 1, this loop won't run\n    // and the returned breaks will be [min, max]\n    for (let i = 1; i < nClasses; i++) {\n        breaks.push(breaks[0] + breakSize * i);\n    }\n\n    // the last break will always be the\n    // maximum.\n    breaks.push(theMax);\n\n    return breaks;\n}\n\nexport default equalIntervalBreaks;\n","/**\n * This computes the minimum & maximum number in an array.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {Array<number>} minimum & maximum value\n * @throws {Error} if the the length of x is less than one\n * @example\n * extent([1, 2, 3, 4]);\n * // => [1, 4]\n */\nfunction extent(x) {\n    if (x.length === 0) {\n        throw new Error(\"extent requires at least one data point\");\n    }\n\n    let min = x[0];\n    let max = x[0];\n    for (let i = 1; i < x.length; i++) {\n        if (x[i] > max) {\n            max = x[i];\n        }\n        if (x[i] < min) {\n            min = x[i];\n        }\n    }\n    return [min, max];\n}\n\nexport default extent;\n","/**\n * The extent is the lowest & highest number in the array. With a sorted array,\n * the first element in the array is always the lowest while the last element is always the largest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {Array<number>} minimum & maximum value\n * @example\n * extentSorted([-100, -10, 1, 2, 5]); // => [-100, 5]\n */\nfunction extentSorted(x) {\n    return [x[0], x[x.length - 1]];\n}\n\nexport default extentSorted;\n","import factorial from \"./factorial\";\n\n/**\n * Compute the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Nemes' approximation.\n * The gamma of n is equivalent to (n-1)!, but unlike the factorial function, gamma is defined for all real n except zero\n * and negative integers (where NaN is returned). Note, the gamma function is also well-defined for complex numbers,\n * though this implementation currently does not handle complex numbers as input values.\n * Nemes' approximation is defined [here](https://arxiv.org/abs/1003.6020) as Theorem 2.2.\n * Negative values use [Euler's reflection formula](https://en.wikipedia.org/wiki/Gamma_function#Properties) for computation.\n *\n * @param {number} n Any real number except for zero and negative integers.\n * @returns {number} The gamma of the input value.\n *\n * @example\n * gamma(11.5); // 11899423.084037038\n * gamma(-11.5); // 2.29575810481609e-8\n * gamma(5); // 24\n */\nfunction gamma(n) {\n    if (Number.isInteger(n)) {\n        if (n <= 0) {\n            // gamma not defined for zero or negative integers\n            return NaN;\n        } else {\n            // use factorial for integer inputs\n            return factorial(n - 1);\n        }\n    }\n\n    // Decrement n, because approximation is defined for n - 1\n    n--;\n\n    if (n < 0) {\n        // Use Euler's reflection formula for negative inputs\n        // see:  https://en.wikipedia.org/wiki/Gamma_function#Properties\n        return Math.PI / (Math.sin(Math.PI * -n) * gamma(-n));\n    } else {\n        // Nemes' expansion approximation\n        const seriesCoefficient =\n            Math.pow(n / Math.E, n) * Math.sqrt(2 * Math.PI * (n + 1 / 6));\n\n        const seriesDenom = n + 1 / 4;\n\n        const seriesExpansion =\n            1 +\n            1 / 144 / Math.pow(seriesDenom, 2) -\n            1 / 12960 / Math.pow(seriesDenom, 3) -\n            257 / 207360 / Math.pow(seriesDenom, 4) -\n            52 / 2612736 / Math.pow(seriesDenom, 5) +\n            5741173 / 9405849600 / Math.pow(seriesDenom, 6) +\n            37529 / 18811699200 / Math.pow(seriesDenom, 7);\n\n        return seriesCoefficient * seriesExpansion;\n    }\n}\n\nexport default gamma;\n","/**\n * The [Geometric Mean](https://en.wikipedia.org/wiki/Geometric_mean) is\n * a mean function that is more useful for numbers in different\n * ranges.\n *\n * This is the nth root of the input numbers multiplied by each other.\n *\n * The geometric mean is often useful for\n * **[proportional growth](https://en.wikipedia.org/wiki/Geometric_mean#Proportional_growth)**: given\n * growth rates for multiple years, like _80%, 16.66% and 42.85%_, a simple\n * mean will incorrectly estimate an average growth rate, whereas a geometric\n * mean will correctly estimate a growth rate that, over those years,\n * will yield the same end value.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} geometric mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n * @example\n * var growthRates = [1.80, 1.166666, 1.428571];\n * var averageGrowth = ss.geometricMean(growthRates);\n * var averageGrowthRates = [averageGrowth, averageGrowth, averageGrowth];\n * var startingValue = 10;\n * var startingValueMean = 10;\n * growthRates.forEach(function(rate) {\n *   startingValue *= rate;\n * });\n * averageGrowthRates.forEach(function(rate) {\n *   startingValueMean *= rate;\n * });\n * startingValueMean === startingValue;\n */\nfunction geometricMean(x) {\n    if (x.length === 0) {\n        throw new Error(\"geometricMean requires at least one data point\");\n    }\n\n    // the starting value.\n    let value = 1;\n\n    for (let i = 0; i < x.length; i++) {\n        // the geometric mean is only valid for positive numbers\n        if (x[i] <= 0) {\n            throw new Error(\n                \"geometricMean requires only positive numbers as input\"\n            );\n        }\n\n        // repeatedly multiply the value by each number\n        value *= x[i];\n    }\n\n    return Math.pow(value, 1 / x.length);\n}\n\nexport default geometricMean;\n","/**\n * The [Harmonic Mean](https://en.wikipedia.org/wiki/Harmonic_mean) is\n * a mean function typically used to find the average of rates.\n * This mean is calculated by taking the reciprocal of the arithmetic mean\n * of the reciprocals of the input numbers.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} harmonic mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n * @example\n * harmonicMean([2, 3]).toFixed(2) // => '2.40'\n */\nfunction harmonicMean(x) {\n    if (x.length === 0) {\n        throw new Error(\"harmonicMean requires at least one data point\");\n    }\n\n    let reciprocalSum = 0;\n\n    for (let i = 0; i < x.length; i++) {\n        // the harmonic mean is only valid for positive numbers\n        if (x[i] <= 0) {\n            throw new Error(\n                \"harmonicMean requires only positive numbers as input\"\n            );\n        }\n\n        reciprocalSum += 1 / x[i];\n    }\n\n    // divide n by the the reciprocal sum\n    return x.length / reciprocalSum;\n}\n\nexport default harmonicMean;\n","/**\n * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n * is a simple way to find a fitted line\n * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line\n * using the least sum of squares.\n *\n * @param {Array<Array<number>>} data an array of two-element of arrays,\n * like `[[0, 1], [2, 3]]`\n * @returns {Object} object containing slope and intersect of regression line\n * @example\n * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }\n */\nfunction linearRegression(data) {\n    let m, b;\n\n    // Store data length in a local variable to reduce\n    // repeated object property lookups\n    const dataLength = data.length;\n\n    //if there's only one point, arbitrarily choose a slope of 0\n    //and a y-intercept of whatever the y of the initial point is\n    if (dataLength === 1) {\n        m = 0;\n        b = data[0][1];\n    } else {\n        // Initialize our sums and scope the `m` and `b`\n        // variables that define the line.\n        let sumX = 0,\n            sumY = 0,\n            sumXX = 0,\n            sumXY = 0;\n\n        // Use local variables to grab point values\n        // with minimal object property lookups\n        let point, x, y;\n\n        // Gather the sum of all x values, the sum of all\n        // y values, and the sum of x^2 and (x*y) for each\n        // value.\n        //\n        // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n        for (let i = 0; i < dataLength; i++) {\n            point = data[i];\n            x = point[0];\n            y = point[1];\n\n            sumX += x;\n            sumY += y;\n\n            sumXX += x * x;\n            sumXY += x * y;\n        }\n\n        // `m` is the slope of the regression line\n        m =\n            (dataLength * sumXY - sumX * sumY) /\n            (dataLength * sumXX - sumX * sumX);\n\n        // `b` is the y-intercept of the line.\n        b = sumY / dataLength - (m * sumX) / dataLength;\n    }\n\n    // Return both values as an object.\n    return {\n        m: m,\n        b: b\n    };\n}\n\nexport default linearRegression;\n","/**\n * Given the output of `linearRegression`: an object\n * with `m` and `b` values indicating slope and intercept,\n * respectively, generate a line function that translates\n * x values into y values.\n *\n * @param {Object} mb object with `m` and `b` members, representing\n * slope and intersect of desired line\n * @returns {Function} method that computes y-value at any given\n * x-value on the line.\n * @example\n * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));\n * l(0) // = 0\n * l(2) // = 2\n * linearRegressionLine({ b: 0, m: 1 })(1); // => 1\n * linearRegressionLine({ b: 1, m: 1 })(1); // => 2\n */\nfunction linearRegressionLine(mb /*: { b: number, m: number }*/) {\n    // Return a function that computes a `y` value for each\n    // x value it is given, based on the values of `b` and `a`\n    // that we just computed.\n    return function (x) {\n        return mb.b + mb.m * x;\n    };\n}\n\nexport default linearRegressionLine;\n","/**\n * The maximum is the highest number in the array. With a sorted array,\n * the last element in the array is always the largest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} maximum value\n * @example\n * maxSorted([-100, -10, 1, 2, 5]); // => 5\n */\nfunction maxSorted(x) {\n    return x[x.length - 1];\n}\n\nexport default maxSorted;\n","import quantileSorted from \"./quantile_sorted\";\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of 'the middle'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn't necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} sorted input\n * @returns {number} median value\n * @example\n * medianSorted([10, 2, 5, 100, 2, 1]); // => 52.5\n */\nfunction medianSorted(sorted) {\n    return quantileSorted(sorted, 0.5);\n}\n\nexport default medianSorted;\n","/**\n * The minimum is the lowest number in the array. With a sorted array,\n * the first element in the array is always the smallest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} minimum value\n * @example\n * minSorted([-100, -10, 1, 2, 5]); // => -100\n */\nfunction minSorted(x) {\n    return x[0];\n}\n\nexport default minSorted;\n","import modeSorted from \"./mode_sorted\";\nimport numericSort from \"./numeric_sort\";\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n log(n))` because it needs to sort the array internally\n * before running an `O(n)` search to find the mode.\n *\n * @param {Array<number>} x input\n * @returns {number} mode\n * @example\n * mode([0, 0, 1]); // => 0\n */\nfunction mode(x) {\n    // Sorting the array lets us iterate through it below and be sure\n    // that every time we see a new number it's new and we'll never\n    // see the same number twice\n    return modeSorted(numericSort(x));\n}\n\nexport default mode;\n","/* globals Map: false */\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * modeFast uses a Map object to keep track of the mode, instead of the approach\n * used with `mode`, a sorted array. As a result, it is faster\n * than `mode` and supports any data type that can be compared with `==`.\n * It also requires a\n * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),\n * and will throw an error if Map is not available.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * @param {Array<*>} x a sample of one or more data points\n * @returns {?*} mode\n * @throws {ReferenceError} if the JavaScript environment doesn't support Map\n * @throws {Error} if x is empty\n * @example\n * modeFast(['rabbits', 'rabbits', 'squirrels']); // => 'rabbits'\n */\nfunction modeFast(x) {\n    // This index will reflect the incidence of different values, indexing\n    // them like\n    // { value: count }\n    const index = new Map();\n\n    // A running `mode` and the number of times it has been encountered.\n    let mode;\n    let modeCount = 0;\n\n    for (let i = 0; i < x.length; i++) {\n        let newCount = index.get(x[i]);\n        if (newCount === undefined) {\n            newCount = 1;\n        } else {\n            newCount++;\n        }\n        if (newCount > modeCount) {\n            mode = x[i];\n            modeCount = newCount;\n        }\n        index.set(x[i], newCount);\n    }\n\n    if (modeCount === 0) {\n        throw new Error(\"mode requires at last one data point\");\n    }\n\n    return mode;\n}\n\nexport default modeFast;\n","import mean from \"./mean\";\nimport shuffleInPlace from \"./shuffle_in_place\";\n\n/**\n * Conducts a [permutation test](https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests)\n * to determine if two data sets are *significantly* different from each other, using\n * the difference of means between the groups as the test statistic.\n * The function allows for the following hypotheses:\n * - two_tail = Null hypothesis: the two distributions are equal.\n * - greater = Null hypothesis: observations from sampleX tend to be smaller than those from sampleY.\n * - less = Null hypothesis: observations from sampleX tend to be greater than those from sampleY.\n * [Learn more about one-tail vs two-tail tests.](https://en.wikipedia.org/wiki/One-_and_two-tailed_tests)\n *\n * @param {Array<number>} sampleX first dataset (e.g. treatment data)\n * @param {Array<number>} sampleY second dataset (e.g. control data)\n * @param {string} alternative alternative hypothesis, either 'two_sided' (default), 'greater', or 'less'\n * @param {number} k number of values in permutation distribution.\n * @param {Function} [randomSource=Math.random] an optional entropy source\n * @returns {number} p-value The probability of observing the difference between groups (as or more extreme than what we did), assuming the null hypothesis.\n *\n * @example\n * var control = [2, 5, 3, 6, 7, 2, 5];\n * var treatment = [20, 5, 13, 12, 7, 2, 2];\n * permutationTest(control, treatment); // ~0.1324\n */\nfunction permutationTest(sampleX, sampleY, alternative, k, randomSource) {\n    // Set default arguments\n    if (k === undefined) {\n        k = 10000;\n    }\n    if (alternative === undefined) {\n        alternative = \"two_side\";\n    }\n    if (\n        alternative !== \"two_side\" &&\n        alternative !== \"greater\" &&\n        alternative !== \"less\"\n    ) {\n        throw new Error(\n            \"`alternative` must be either 'two_side', 'greater', or 'less'\"\n        );\n    }\n\n    // get means for each sample\n    const meanX = mean(sampleX);\n    const meanY = mean(sampleY);\n\n    // calculate initial test statistic. This will be our point of comparison with\n    // the generated test statistics.\n    const testStatistic = meanX - meanY;\n\n    // create test-statistic distribution\n    const testStatDsn = new Array(k);\n\n    // combine datsets so we can easily shuffle later\n    const allData = sampleX.concat(sampleY);\n    const midIndex = Math.floor(allData.length / 2);\n\n    for (let i = 0; i < k; i++) {\n        // 1. shuffle data assignments\n        shuffleInPlace(allData, randomSource);\n        const permLeft = allData.slice(0, midIndex);\n        const permRight = allData.slice(midIndex, allData.length);\n\n        // 2.re-calculate test statistic\n        const permTestStatistic = mean(permLeft) - mean(permRight);\n\n        // 3. store test statistic to build test statistic distribution\n        testStatDsn[i] = permTestStatistic;\n    }\n\n    // Calculate p-value depending on alternative\n    // For this test, we calculate the percentage of 'extreme' test statistics (subject to our hypothesis)\n    // more info on permutation test p-value calculations: https://onlinecourses.science.psu.edu/stat464/node/35\n    let numExtremeTStats = 0;\n    if (alternative === \"two_side\") {\n        for (let i = 0; i <= k; i++) {\n            if (Math.abs(testStatDsn[i]) >= Math.abs(testStatistic)) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else if (alternative === \"greater\") {\n        for (let i = 0; i <= k; i++) {\n            if (testStatDsn[i] >= testStatistic) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else {\n        // alternative === 'less'\n        for (let i = 0; i <= k; i++) {\n            if (testStatDsn[i] <= testStatistic) {\n                numExtremeTStats += 1;\n            }\n        }\n    }\n\n    return numExtremeTStats / k;\n}\n\nexport default permutationTest;\n","/**\n * Implementation of [Heap's Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)\n * for generating permutations.\n *\n * @param {Array} elements any type of data\n * @returns {Array<Array>} array of permutations\n */\nfunction permutationsHeap(elements) {\n    const indexes = new Array(elements.length);\n    const permutations = [elements.slice()];\n\n    for (let i = 0; i < elements.length; i++) {\n        indexes[i] = 0;\n    }\n\n    for (let i = 0; i < elements.length; ) {\n        if (indexes[i] < i) {\n            // At odd indexes, swap from indexes[i] instead\n            // of from the beginning of the array\n            let swapFrom = 0;\n            if (i % 2 !== 0) {\n                swapFrom = indexes[i];\n            }\n\n            // swap between swapFrom and i, using\n            // a temporary variable as storage.\n            const temp = elements[swapFrom];\n            elements[swapFrom] = elements[i];\n            elements[i] = temp;\n\n            permutations.push(elements.slice());\n            indexes[i]++;\n            i = 0;\n        } else {\n            indexes[i] = 0;\n            i++;\n        }\n    }\n\n    return permutations;\n}\n\nexport default permutationsHeap;\n","import epsilon from \"./epsilon\";\n\n/**\n * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)\n * is a discrete probability distribution that expresses the probability\n * of a given number of events occurring in a fixed interval of time\n * and/or space if these events occur with a known average rate and\n * independently of the time since the last event.\n *\n * The Poisson Distribution is characterized by the strictly positive\n * mean arrival or occurrence rate, `λ`.\n *\n * @param {number} lambda location poisson distribution\n * @returns {number[]} values of poisson distribution at that point\n */\nfunction poissonDistribution(lambda) /*: ?number[] */ {\n    // Check that lambda is strictly positive\n    if (lambda <= 0) {\n        return undefined;\n    }\n\n    // our current place in the distribution\n    let x = 0;\n    // and we keep track of the current cumulative probability, in\n    // order to know when to stop calculating chances.\n    let cumulativeProbability = 0;\n    // the calculated cells to be returned\n    const cells = [];\n    let factorialX = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] = (Math.exp(-lambda) * Math.pow(lambda, x)) / factorialX;\n        cumulativeProbability += cells[x];\n        x++;\n        factorialX *= x;\n        // when the cumulativeProbability is nearly 1, we've calculated\n        // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nexport default poissonDistribution;\n","import epsilon from \"./epsilon\";\nimport inverseErrorFunction from \"./inverse_error_function\";\n\n/**\n * The [Probit](http://en.wikipedia.org/wiki/Probit)\n * is the inverse of cumulativeStdNormalProbability(),\n * and is also known as the normal quantile function.\n *\n * It returns the number of standard deviations from the mean\n * where the p'th quantile of values can be found in a normal distribution.\n * So, for example, probit(0.5 + 0.6827/2) ≈ 1 because 68.27% of values are\n * normally found within 1 standard deviation above or below the mean.\n *\n * @param {number} p\n * @returns {number} probit\n */\nfunction probit(p) {\n    if (p === 0) {\n        p = epsilon;\n    } else if (p >= 1) {\n        p = 1 - epsilon;\n    }\n    return Math.sqrt(2) * inverseErrorFunction(2 * p - 1);\n}\n\nexport default probit;\n","/**\n * The [product](https://en.wikipedia.org/wiki/Product_(mathematics)) of an array\n * is the result of multiplying all numbers together, starting using one as the multiplicative identity.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} product of all input numbers\n * @example\n * product([1, 2, 3, 4]); // => 24\n */\nfunction product(x) {\n    let value = 1;\n    for (let i = 0; i < x.length; i++) {\n        value *= x[i];\n    }\n    return value;\n}\n\nexport default product;\n","import numericSort from \"./numeric_sort\";\nimport quantileRankSorted from \"./quantile_rank_sorted\";\n\n/**\n * This function returns the quantile in which one would find the given value in\n * the given array. It will copy and sort your array before each run, so\n * if you know your array is already sorted, you should use `quantileRankSorted`\n * instead.\n *\n * @param {Array<number>} x input\n * @returns {number} value value\n * @example\n * quantileRank([4, 3, 1, 2], 3); // => 0.75\n * quantileRank([4, 3, 2, 3, 1], 3); // => 0.7\n * quantileRank([2, 4, 1, 3], 6); // => 1\n * quantileRank([5, 3, 1, 2, 3], 4); // => 0.8\n */\nfunction quantileRank(x, value) {\n    // Cloning and sorting the array\n    const sortedCopy = numericSort(x);\n\n    return quantileRankSorted(sortedCopy, value);\n}\n\nexport default quantileRank;\n","/**\n * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)\n * value of data compared with a function `f`\n * is the sum of the squared differences between the prediction\n * and the actual value.\n *\n * @param {Array<Array<number>>} x input data: this should be doubly-nested\n * @param {Function} func function called on `[i][0]` values within the dataset\n * @returns {number} r-squared value\n * @example\n * var samples = [[0, 0], [1, 1]];\n * var regressionLine = linearRegressionLine(linearRegression(samples));\n * rSquared(samples, regressionLine); // = 1 this line is a perfect fit\n */\nfunction rSquared(x, func) {\n    if (x.length < 2) {\n        return 1;\n    }\n\n    // Compute the average y value for the actual\n    // data set in order to compute the\n    // _total sum of squares_\n    let sum = 0;\n    for (let i = 0; i < x.length; i++) {\n        sum += x[i][1];\n    }\n    const average = sum / x.length;\n\n    // Compute the total sum of squares - the\n    // squared difference between each point\n    // and the average of all points.\n    let sumOfSquares = 0;\n    for (let j = 0; j < x.length; j++) {\n        sumOfSquares += Math.pow(average - x[j][1], 2);\n    }\n\n    // Finally estimate the error: the squared\n    // difference between the estimate and the actual data\n    // value at each point.\n    let err = 0;\n    for (let k = 0; k < x.length; k++) {\n        err += Math.pow(x[k][1] - func(x[k][0]), 2);\n    }\n\n    // As the error grows larger, its ratio to the\n    // sum of squares increases and the r squared\n    // value grows lower.\n    return 1 - err / sumOfSquares;\n}\n\nexport default rSquared;\n","import sampleCovariance from \"./sample_covariance\";\nimport sampleStandardDeviation from \"./sample_standard_deviation\";\n\n/**\n * The [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence) is\n * a measure of how correlated two datasets are, between -1 and 1\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample correlation\n * @example\n * sampleCorrelation([1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5, 60]).toFixed(2);\n * // => '0.69'\n */\nfunction sampleCorrelation(x, y) {\n    const cov = sampleCovariance(x, y);\n    const xstd = sampleStandardDeviation(x);\n    const ystd = sampleStandardDeviation(y);\n\n    return cov / xstd / ystd;\n}\n\nexport default sampleCorrelation;\n","import mean from \"./mean\";\n\n/**\n * [Kurtosis](http://en.wikipedia.org/wiki/Kurtosis) is\n * a measure of the heaviness of a distribution's tails relative to its\n * variance. The kurtosis value can be positive or negative, or even undefined.\n *\n * Implementation is based on Fisher's excess kurtosis definition and uses\n * unbiased moment estimators. This is the version found in Excel and available\n * in several statistical packages, including SAS and SciPy.\n *\n * @param {Array<number>} x a sample of 4 or more data points\n * @returns {number} sample kurtosis\n * @throws {Error} if x has length less than 4\n * @example\n * sampleKurtosis([1, 2, 2, 3, 5]); // => 1.4555765595463122\n */\nfunction sampleKurtosis(x) {\n    const n = x.length;\n\n    if (n < 4) {\n        throw new Error(\"sampleKurtosis requires at least four data points\");\n    }\n\n    const meanValue = mean(x);\n    let tempValue;\n    let secondCentralMoment = 0;\n    let fourthCentralMoment = 0;\n\n    for (let i = 0; i < n; i++) {\n        tempValue = x[i] - meanValue;\n        secondCentralMoment += tempValue * tempValue;\n        fourthCentralMoment += tempValue * tempValue * tempValue * tempValue;\n    }\n\n    return (\n        ((n - 1) / ((n - 2) * (n - 3))) *\n        ((n * (n + 1) * fourthCentralMoment) /\n            (secondCentralMoment * secondCentralMoment) -\n            3 * (n - 1))\n    );\n}\n\nexport default sampleKurtosis;\n","import mean from \"./mean\";\n\n/**\n * [Skewness](http://en.wikipedia.org/wiki/Skewness) is\n * a measure of the extent to which a probability distribution of a\n * real-valued random variable \"leans\" to one side of the mean.\n * The skewness value can be positive or negative, or even undefined.\n *\n * Implementation is based on the adjusted Fisher-Pearson standardized\n * moment coefficient, which is the version found in Excel and several\n * statistical packages including Minitab, SAS and SPSS.\n *\n * @since 4.1.0\n * @param {Array<number>} x a sample of 3 or more data points\n * @returns {number} sample skewness\n * @throws {Error} if x has length less than 3\n * @example\n * sampleSkewness([2, 4, 6, 3, 1]); // => 0.590128656384365\n */\nfunction sampleSkewness(x) {\n    if (x.length < 3) {\n        throw new Error(\"sampleSkewness requires at least three data points\");\n    }\n\n    const meanValue = mean(x);\n    let tempValue;\n    let sumSquaredDeviations = 0;\n    let sumCubedDeviations = 0;\n\n    for (let i = 0; i < x.length; i++) {\n        tempValue = x[i] - meanValue;\n        sumSquaredDeviations += tempValue * tempValue;\n        sumCubedDeviations += tempValue * tempValue * tempValue;\n    }\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    const besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    const theSampleStandardDeviation = Math.sqrt(\n        sumSquaredDeviations / besselsCorrection\n    );\n\n    const n = x.length;\n    const cubedS = Math.pow(theSampleStandardDeviation, 3);\n\n    return (n * sumCubedDeviations) / ((n - 1) * (n - 2) * cubedS);\n}\n\nexport default sampleSkewness;\n","/**\n * Sampling with replacement is a type of sampling that allows the same\n * item to be picked out of a population more than once.\n *\n * @param {Array<*>} x an array of any kind of value\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} n sampled items from the population\n * @example\n * var values = [1, 2, 3, 4];\n * sampleWithReplacement(values, 2); // returns 2 random values, like [2, 4];\n */\nfunction sampleWithReplacement(x, n, randomSource) {\n    if (x.length === 0) {\n        return [];\n    }\n\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    const length = x.length;\n    const sample = [];\n\n    for (let i = 0; i < n; i++) {\n        const index = Math.floor(randomSource() * length);\n\n        sample.push(x[index]);\n    }\n\n    return sample;\n}\n\nexport default sampleWithReplacement;\n","import max from \"./max\";\nimport silhouette from \"./silhouette\";\n\n/**\n * Calculate the [silhouette metric](https://en.wikipedia.org/wiki/Silhouette_(clustering))\n * for a set of N-dimensional points arranged in groups. The metric is the largest\n * individual silhouette value for the data.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {number} The silhouette metric for the groupings.\n *\n * @example\n * silhouetteMetric([[0.25], [0.75]], [0, 0]); // => 1.0\n */\nfunction silhouetteMetric(points, labels) {\n    const values = silhouette(points, labels);\n    return max(values);\n}\n\nexport default silhouetteMetric;\n","/**\n * When removing a value from a list, one does not have to necessary\n * recompute the mean of the list in linear time. They can instead use\n * this function to compute the new mean by providing the current mean,\n * the number of elements in the list that produced it and the value to remove.\n *\n * @since 3.0.0\n * @param {number} mean current mean\n * @param {number} n number of items in the list\n * @param {number} value the value to remove\n * @returns {number} the new mean\n *\n * @example\n * subtractFromMean(20.5, 6, 53); // => 14\n */\nfunction subtractFromMean(mean, n, value) {\n    return (mean * n - value) / (n - 1);\n}\n\nexport default subtractFromMean;\n","import mean from \"./mean\";\nimport standardDeviation from \"./standard_deviation\";\n\n/**\n * This is to compute [a one-sample t-test](https://en.wikipedia.org/wiki/Student%27s_t-test#One-sample_t-test), comparing the mean\n * of a sample to a known value, x.\n *\n * in this case, we're trying to determine whether the\n * population mean is equal to the value that we know, which is `x`\n * here. usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {number} expectedValue expected value of the population mean\n * @returns {number} value\n * @example\n * tTest([1, 2, 3, 4, 5, 6], 3.385).toFixed(2); // => '0.16'\n */\nfunction tTest(x, expectedValue) {\n    // The mean of the sample\n    const sampleMean = mean(x);\n\n    // The standard deviation of the sample\n    const sd = standardDeviation(x);\n\n    // Square root the length of the sample\n    const rootN = Math.sqrt(x.length);\n\n    // returning the t value\n    return (sampleMean - expectedValue) / (sd / rootN);\n}\n\nexport default tTest;\n","import mean from \"./mean\";\nimport sampleVariance from \"./sample_variance\";\n\n/**\n * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test).\n * Tests whether \"mean(X)-mean(Y) = difference\", (\n * in the most common case, we often have `difference == 0` to test if two samples\n * are likely to be taken from populations with the same mean value) with\n * no prior knowledge on standard deviations of both samples\n * other than the fact that they have the same standard deviation.\n *\n * Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * `diff` can be omitted if it equals 0.\n *\n * [This is used to confirm or deny](http://www.monarchlab.org/Lab/Research/Stats/2SampleT.aspx)\n * a null hypothesis that the two populations that have been sampled into\n * `sampleX` and `sampleY` are equal to each other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @param {number} [difference=0]\n * @returns {number|null} test result\n *\n * @example\n * tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); // => -2.1908902300206643\n */\nfunction tTestTwoSample(sampleX, sampleY, difference) {\n    const n = sampleX.length;\n    const m = sampleY.length;\n\n    // If either sample doesn't actually have any values, we can't\n    // compute this at all, so we return `null`.\n    if (!n || !m) {\n        return null;\n    }\n\n    // default difference (mu) is zero\n    if (!difference) {\n        difference = 0;\n    }\n\n    const meanX = mean(sampleX);\n    const meanY = mean(sampleY);\n    const sampleVarianceX = sampleVariance(sampleX);\n    const sampleVarianceY = sampleVariance(sampleY);\n\n    if (\n        typeof meanX === \"number\" &&\n        typeof meanY === \"number\" &&\n        typeof sampleVarianceX === \"number\" &&\n        typeof sampleVarianceY === \"number\"\n    ) {\n        const weightedVariance =\n            ((n - 1) * sampleVarianceX + (m - 1) * sampleVarianceY) /\n            (n + m - 2);\n\n        return (\n            (meanX - meanY - difference) /\n            Math.sqrt(weightedVariance * (1 / n + 1 / m))\n        );\n    }\n}\n\nexport default tTestTwoSample;\n","/**\n * The [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score).\n *\n * The standard score is the number of standard deviations an observation\n * or datum is above or below the mean. Thus, a positive standard score\n * represents a datum above the mean, while a negative standard score\n * represents a datum below the mean. It is a dimensionless quantity\n * obtained by subtracting the population mean from an individual raw\n * score and then dividing the difference by the population standard\n * deviation.\n *\n * The z-score is only defined if one knows the population parameters;\n * if one only has a sample set, then the analogous computation with\n * sample mean and sample standard deviation yields the\n * Student's t-statistic.\n *\n * @param {number} x\n * @param {number} mean\n * @param {number} standardDeviation\n * @return {number} z score\n * @example\n * zScore(78, 80, 5); // => -0.4\n */\nfunction zScore(x, mean, standardDeviation) {\n    return (x - mean) / standardDeviation;\n}\n\nexport default zScore;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sum_unsafe = function (subset, measures) {\n    var sums = {};\n    measures.forEach(function (mea) {\n        sums[mea] = 0;\n    });\n    var _loop_1 = function (i, len) {\n        measures.forEach(function (mea) {\n            sums[mea] += subset[i][mea];\n        });\n    };\n    for (var i = 0, len = subset.length; i < len; i++) {\n        _loop_1(i, len);\n    }\n    return sums;\n};\nexports.sum = function (subset, measures) {\n    var sums = {};\n    measures.forEach(function (mea) {\n        sums[mea] = 0;\n    });\n    var _loop_2 = function (i, len) {\n        measures.forEach(function (mea) {\n            sums[mea] += Number(subset[i][mea]) || 0;\n        });\n    };\n    for (var i = 0, len = subset.length; i < len; i++) {\n        _loop_2(i, len);\n    }\n    return sums;\n};\nexports.count = function (subset, MEASURES) {\n    var cnts = {};\n    MEASURES.forEach(function (mea) {\n        cnts[mea] = 0;\n    });\n    for (var i = 0, len = subset.length; i < len; i++) {\n        MEASURES.forEach(function (mea) {\n            cnts[mea]++;\n        });\n    }\n    return cnts;\n};\nexports.mean = function (subset, measures) {\n    var sums = {};\n    measures.forEach(function (mea) {\n        sums[mea] = 0;\n    });\n    var _loop_3 = function (i, len) {\n        measures.forEach(function (mea) {\n            sums[mea] += Number(subset[i][mea]) || 0;\n        });\n    };\n    for (var i = 0, len = subset.length; i < len; i++) {\n        _loop_3(i, len);\n    }\n    measures.forEach(function (mea) {\n        sums[mea] /= subset.length;\n    });\n    return sums;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar periodCube_1 = require(\"./periodCube\");\nexports.periodCube = periodCube_1.default;\nvar momentCube_1 = require(\"./momentCube\");\nexports.momentCube = momentCube_1.default;\n","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node = /** @class */ (function () {\n    function Node(aggFunc) {\n        this.children = new Map();\n        this._rawData = [];\n        this.aggFunc = aggFunc;\n        this.cache = false;\n    }\n    Node.prototype.push = function () {\n        var _a;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        (_a = this._rawData).push.apply(_a, __spread(params));\n    };\n    Node.prototype.aggData = function (measures) {\n        if (measures === void 0) { measures = []; }\n        if (!this.cache) {\n            this._aggData = this.aggFunc(this.rawData, measures);\n            this.cache = true;\n        }\n        return this._aggData;\n    };\n    Node.prototype.clearCache = function () {\n        this.cache = false;\n    };\n    Object.defineProperty(Node.prototype, \"rawData\", {\n        get: function () {\n            var e_1, _a;\n            if (!this.cache) {\n                if (this.children.size !== 0) {\n                    var children = this.children.values();\n                    var rawData = [];\n                    try {\n                        for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n                            var child = children_1_1.value;\n                            var i = void 0;\n                            var data = child.rawData;\n                            var len = data.length;\n                            for (i = 0; i < len; i++) {\n                                rawData.push(data[i]);\n                            }\n                        }\n                    }\n                    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                    finally {\n                        try {\n                            if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                    }\n                    this._rawData = rawData;\n                }\n                this.cache = true;\n            }\n            return this._rawData;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Node.prototype.getNode = function (dimensions) {\n        var search = function (node, level) {\n            var e_2, _a;\n            if (level === dimensions.length) {\n                return node;\n            }\n            var children = node.children.entries();\n            try {\n                for (var children_2 = __values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {\n                    var _b = __read(children_2_1.value, 2), childName = _b[0], child = _b[1];\n                    if (childName === dimensions[level]) {\n                        return search(child, level + 1);\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (children_2_1 && !children_2_1.done && (_a = children_2.return)) _a.call(children_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            return null;\n        };\n        return search(this, 0);\n    };\n    return Node;\n}());\nvar periodCube = /** @class */ (function () {\n    function periodCube(props) {\n        this.aggFunc = props.aggFunc;\n        this.factTable = props.factTable;\n        this.dimensions = props.dimensions;\n        this.measures = props.measures;\n    }\n    periodCube.prototype.get = function (dimensions) {\n        var _a = this, tree = _a.tree, aggFunc = _a.aggFunc, measures = _a.measures;\n        var search = function (node, level) {\n            var e_3, _a;\n            if (level === dimensions.length) {\n                return node.aggData(measures);\n            }\n            var children = node.children.entries();\n            try {\n                for (var children_3 = __values(children), children_3_1 = children_3.next(); !children_3_1.done; children_3_1 = children_3.next()) {\n                    var _b = __read(children_3_1.value, 2), childName = _b[0], child = _b[1];\n                    if (childName === dimensions[level]) {\n                        return search(child, level + 1);\n                    }\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (children_3_1 && !children_3_1.done && (_a = children_3.return)) _a.call(children_3);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n            return false;\n        };\n        return search(tree, 0);\n    };\n    periodCube.prototype.getNode = function (dimensions) {\n        var tree = this.tree;\n        return tree.getNode(dimensions);\n    };\n    periodCube.prototype.buildTree = function () {\n        var tree = new Node(this.aggFunc);\n        var len = this.factTable.length, i;\n        for (i = 0; i < len; i++) {\n            this.insertNode(this.factTable[i], tree, 0);\n        }\n        this.tree = tree;\n        return tree;\n    };\n    periodCube.prototype.insertNode = function (record, node, level) {\n        node.push(record);\n        node.cache = false;\n        if (level < this.dimensions.length) {\n            var member = record[this.dimensions[level]];\n            if (!node.children.has(member)) {\n                node.children.set(member, new Node(this.aggFunc));\n            }\n            this.insertNode(record, node.children.get(member), level + 1);\n        }\n    };\n    periodCube.prototype.aggTree = function (node) {\n        var e_4, _a;\n        if (node === void 0) { node = this.tree; }\n        var children = node.children.values();\n        try {\n            for (var children_4 = __values(children), children_4_1 = children_4.next(); !children_4_1.done; children_4_1 = children_4.next()) {\n                var child = children_4_1.value;\n                this.aggTree(child);\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (children_4_1 && !children_4_1.done && (_a = children_4.return)) _a.call(children_4);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        node.aggData(this.measures);\n        return node;\n    };\n    periodCube.prototype.aggNode = function (node) {\n        var e_5, _a;\n        if (node === void 0) { node = this.tree; }\n        var children = node.children.values();\n        try {\n            for (var children_5 = __values(children), children_5_1 = children_5.next(); !children_5_1.done; children_5_1 = children_5.next()) {\n                var child = children_5_1.value;\n                this.aggTree(child);\n            }\n        }\n        catch (e_5_1) { e_5 = { error: e_5_1 }; }\n        finally {\n            try {\n                if (children_5_1 && !children_5_1.done && (_a = children_5.return)) _a.call(children_5);\n            }\n            finally { if (e_5) throw e_5.error; }\n        }\n        node.aggData(this.measures);\n        return node;\n    };\n    return periodCube;\n}());\nexports.default = periodCube;\n","\"use strict\";\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node = /** @class */ (function () {\n    function Node() {\n        this.children = new Map();\n        this.rawData = [];\n    }\n    Node.prototype.push = function () {\n        var _a;\n        var params = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            params[_i] = arguments[_i];\n        }\n        (_a = this.rawData).push.apply(_a, __spread(params));\n    };\n    Node.prototype.aggData = function (aggFunc, measures) {\n        if (measures === void 0) { measures = []; }\n        this._aggData = aggFunc(this.rawData, measures);\n        return this._aggData;\n    };\n    Node.prototype.getNode = function (dimensions) {\n        var search = function (node, level) {\n            var e_1, _a;\n            if (level === dimensions.length) {\n                return node;\n            }\n            var children = node.children.entries();\n            try {\n                for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {\n                    var _b = __read(children_1_1.value, 2), childName = _b[0], child = _b[1];\n                    if (childName === dimensions[level]) {\n                        return search(child, level + 1);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return null;\n        };\n        return search(this, 0);\n    };\n    return Node;\n}());\nexports.Node = Node;\nvar momentCube = /** @class */ (function () {\n    function momentCube(props) {\n        this.aggFunc = props.aggFunc;\n        this.factTable = props.factTable;\n        this.dimensions = props.dimensions;\n        this.measures = props.measures;\n        this.buildTree();\n        this.aggTree();\n    }\n    momentCube.prototype.get = function (dimensions) {\n        var _a = this, tree = _a.tree, aggFunc = _a.aggFunc, measures = _a.measures;\n        var search = function (node, level) {\n            var e_2, _a;\n            if (level === dimensions.length) {\n                return node.aggData(aggFunc, measures);\n            }\n            var children = node.children.entries();\n            try {\n                for (var children_2 = __values(children), children_2_1 = children_2.next(); !children_2_1.done; children_2_1 = children_2.next()) {\n                    var _b = __read(children_2_1.value, 2), childName = _b[0], child = _b[1];\n                    if (childName === dimensions[level]) {\n                        return search(child, level + 1);\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (children_2_1 && !children_2_1.done && (_a = children_2.return)) _a.call(children_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            return false;\n        };\n        return search(tree, 0);\n    };\n    momentCube.prototype.getNode = function (dimensions) {\n        var tree = this.tree;\n        return tree.getNode(dimensions);\n    };\n    momentCube.prototype.setData = function (props) {\n        var _a = props.aggFunc, aggFunc = _a === void 0 ? this.aggFunc : _a, _b = props.factTable, factTable = _b === void 0 ? this.factTable : _b, _c = props.dimensions, dimensions = _c === void 0 ? this.dimensions : _c, _d = props.measures, measures = _d === void 0 ? this.measures : _d;\n        if (dimensions !== this.dimensions || factTable !== this.factTable) {\n            this.dimensions = dimensions;\n            this.factTable = factTable;\n            this.measures = measures;\n            this.aggFunc = aggFunc;\n            this.buildTree();\n            this.aggTree();\n        }\n        else if (measures !== this.measures || aggFunc !== this.aggFunc) {\n            this.measures = measures;\n            this.aggFunc = aggFunc;\n            this.aggTree();\n        }\n    };\n    momentCube.prototype.buildTree = function () {\n        var tree = new Node();\n        var len = this.factTable.length, i;\n        for (i = 0; i < len; i++) {\n            this.insertNode(this.factTable[i], tree, 0);\n        }\n        this.tree = tree;\n        return tree;\n    };\n    momentCube.prototype.insertNode = function (record, node, level) {\n        if (level === this.dimensions.length) {\n            node.push(record);\n        }\n        else {\n            var member = record[this.dimensions[level]];\n            if (!node.children.has(member)) {\n                node.children.set(member, new Node());\n            }\n            this.insertNode(record, node.children.get(member), level + 1);\n        }\n    };\n    momentCube.prototype.aggTree = function (node) {\n        var e_3, _a;\n        if (node === void 0) { node = this.tree; }\n        if (node.children.size > 0) {\n            node.rawData = [];\n            var children = node.children.values();\n            try {\n                for (var children_3 = __values(children), children_3_1 = children_3.next(); !children_3_1.done; children_3_1 = children_3.next()) {\n                    var child = children_3_1.value;\n                    var i = void 0;\n                    var data = this.aggTree(child).rawData;\n                    var len = data.length;\n                    for (i = 0; i < len; i++) {\n                        node.rawData.push(data[i]);\n                    }\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (children_3_1 && !children_3_1.done && (_a = children_3.return)) _a.call(children_3);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        }\n        node.aggData(this.aggFunc, this.measures);\n        return node;\n    };\n    return momentCube;\n}());\nexports.default = momentCube;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction tree2Table(props) {\n    var dimensions = props.dimensions, measures = props.measures, cube = props.cube;\n    var aggFunc = cube.aggFunc;\n    var table = [];\n    function dfs(node, record, level) {\n        var e_1, _a, _b;\n        if (node.children.size === 0) {\n            var values = node._aggData;\n            table.push(__assign(__assign({}, record), values));\n            return;\n        }\n        try {\n            for (var _c = __values(node.children.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var _e = __read(_d.value, 2), childName = _e[0], child = _e[1];\n                var r = __assign(__assign({}, record), (_b = {}, _b[dimensions[level]] = childName, _b));\n                dfs(child, r, level + 1);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    }\n    dfs(cube.tree, {}, 0);\n    return table;\n}\nexports.tree2Table = tree2Table;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","/**\n * chiSquared implementation using adjacency list(spare graph), which is ableto handle fields with large cardinality.\n * @param nestTree hash tree with depth = 2, represents the relationship between var x and var y.\n * @param xSet value set of var x.\n * @param ySet value set of var y.\n */\nexport function chiSquared(nestTree, xSet, ySet) {\n    if (typeof nestTree === 'undefined' || typeof xSet === 'undefined' || typeof ySet === 'undefined') {\n        return 0;\n    }\n    let rowSums = new Map();\n    let colSums = new Map();\n    let totalSum = 0;\n    for (let x of xSet) {\n        rowSums.set(x, 0);\n    }\n    for (let y of ySet) {\n        colSums.set(y, 0);\n    }\n    for (let [x, node] of nestTree) {\n        for (let [y, counter] of node) {\n            rowSums.set(x, rowSums.get(x) + counter);\n            colSums.set(y, colSums.get(y) + counter);\n            totalSum += counter;\n        }\n    }\n    let chis = 0;\n    for (let [x, node] of nestTree) {\n        for (let [y, observed] of node) {\n            let expected = rowSums.get(x) * colSums.get(y) / totalSum;\n            chis += (observed - expected) ** 2 / expected;\n        }\n    }\n    return chis;\n}\n/**\n * crammersV implementation using adjacency list(spare graph), which is ableto handle fields with large cardinality.\n * @param dataSource array of records.\n * @param fieldX field key of var X.\n * @param fieldY field key of varY.\n */\nexport const crammersV = (dataSource, fieldX, fieldY) => {\n    const xSet = new Set();\n    const ySet = new Set();\n    const nestTree = new Map();\n    let len = dataSource.length;\n    for (let i = 0; i < len; i++) {\n        let record = dataSource[i];\n        xSet.add(record[fieldX]);\n        ySet.add(record[fieldY]);\n        if (!nestTree.has(record[fieldX])) {\n            nestTree.set(record[fieldX], new Map());\n        }\n        let node = nestTree.get(record[fieldX]);\n        if (!node.has(record[fieldY])) {\n            node.set(record[fieldY], 0);\n        }\n        node.set(record[fieldY], node.get(record[fieldY]) + 1);\n    }\n    const chis = chiSquared(nestTree, xSet, ySet);\n    const V = Math.sqrt(chis / (dataSource.length * Math.min(xSet.size - 1, ySet.size - 1)));\n    return V;\n};\n/**\n * Pearson correlation coefficient\n * @param dataSource array of records\n * @param fieldX field key of var X.\n * @param fieldY field key of var Y.\n */\nexport const pearsonCC = (dataSource, fieldX, fieldY) => {\n    let r = 0;\n    let xBar = sum(dataSource.map(row => row[fieldX])) / dataSource.length;\n    let yBar = sum(dataSource.map(row => row[fieldY])) / dataSource.length;\n    r = sum(dataSource.map(row => (row[fieldX] - xBar) * (row[fieldY] - yBar))) /\n        Math.sqrt(sum(dataSource.map(row => Math.pow(row[fieldX] - xBar, 2))) * sum(dataSource.map(row => Math.pow(row[fieldY] - yBar, 2))));\n    return r;\n};\nfunction sum(arr) {\n    let s = 0;\n    for (let i = 0, len = arr.length; i < len; i++) {\n        // if (typeof dataSource[i][field])\n        s += arr[i];\n    }\n    return s;\n}\n// can be used for test. do not delete these code. it is implementation with adj matrix. can be faster in dense graph cases.\n// export function crammersV(dataSource: DataSource, fieldX: string, fieldY: string): number {\n//   const xSet = new Set(dataSource.map(d => d[fieldX]))\n//   const ySet = new Set(dataSource.map(d => d[fieldY]))\n//   const xMembers = [...xSet];\n//   const yMembers = [...ySet];\n//   let xDict = {};\n//   let yDict = {};\n//   for (let i = 0; i < xMembers.length; i++) {\n//     xDict[xMembers[i]] = i;\n//   }\n//   for (let i = 0; i < yMembers.length; i++) {\n//     yDict[yMembers[i]] = i;\n//   }\n//   // let matrix: number[][] = xMembers.map(x => yMembers.map(y => 0));\n//   let matrix: number[][] = [];\n//   for (let  i = 0; i < xMembers.length; i++) {\n//     matrix.push([]);\n//     for (let j = 0; j < yMembers.length; j++) {\n//       matrix[i].push(0);\n//     }\n//   }\n//   for (let record of dataSource) {\n//     matrix[xDict[record[fieldX]]][yDict[record[fieldY]]]++;\n//   }\n//   const chis = chiSquared(matrix);\n//   const V = Math.sqrt(chis / (dataSource.length * Math.min(xMembers.length - 1, yMembers.length - 1)))\n//   return V;\n// }\n// export function chiSquared(matrix: number[][] = [[]]): number {\n//   let rowSums = matrix.map(m => 0);\n//   let colSums = matrix[0].map(m => 0);\n//   let totalSum = 0;\n//   for (let i = 0; i < matrix.length; i++) {\n//     for (let j = 0; j < matrix[i].length; j++) {\n//       rowSums[i] += matrix[i][j];\n//       colSums[j] += matrix[i][j];\n//       totalSum += matrix[i][j];\n//     }\n//   }\n//   let chis = 0;\n//   for (let i = 0; i < matrix.length; i++) {\n//     for (let j = 0; j < matrix[i].length; j++) {\n//       let observed = matrix[i][j];\n//       let expected = rowSums[i] * colSums[j] / totalSum;\n//       chis += (observed - expected) ** 2 / expected;\n//     }\n//   }\n//   return chis;\n// }\n","export function linearMapPositive(arr) {\n    let min = Math.min(...arr);\n    return arr.map(a => a - min + 1);\n}\nexport function getCombination(elements, start = 1, end = elements.length) {\n    let ans = [];\n    const combine = (step, set, size) => {\n        if (set.length === size) {\n            ans.push([...set]);\n            return;\n        }\n        if (step >= elements.length) {\n            return;\n        }\n        combine(step + 1, [...set, elements[step]], size);\n        combine(step + 1, set, size);\n    };\n    for (let i = start; i <= end; i++) {\n        combine(0, [], i);\n    }\n    return ans;\n}\nexport function normalize(frequencyList) {\n    let sum = 0;\n    for (let f of frequencyList) {\n        sum += f;\n    }\n    return frequencyList.map(f => f / sum);\n}\nexport const entropy = (probabilityList) => {\n    let sum = 0;\n    for (let p of probabilityList) {\n        sum += p * Math.log2(p);\n    }\n    return -sum;\n};\nexport const gini = (probabilityList) => {\n    let sum = 0;\n    for (let p of probabilityList) {\n        sum += p * (1 - p);\n    }\n    return sum;\n};\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export class oneDLinearRegression {\n    constructor(dataSource, X, Y) {\n        this.dataSource = dataSource;\n        this.X = X;\n        this.Y = Y;\n        this.normalizedDataSource = dataSource;\n    }\n    normalizeDimensions(dimensions) {\n        this.normalizedDataSource = [];\n        this.valueSets = [];\n        dimensions.forEach(() => {\n            this.valueSets.push(new Map());\n        });\n        this.dataSource.forEach(record => {\n            dimensions.forEach((dim, index) => {\n                let value = (record[dim] || 'others').toString();\n                if (!this.valueSets[index].has(value)) {\n                    this.valueSets[index].set(value, this.valueSets[index].size);\n                }\n            });\n        });\n        this.dataSource.forEach(record => {\n            let normalizedRecord = this.normalizeRecord(record, dimensions);\n            this.normalizedDataSource.push(normalizedRecord);\n        });\n        return this.normalizedDataSource;\n    }\n    normalizeRecord(record, dimensions) {\n        let normalizedRecord = {};\n        Object.keys(record).forEach(mea => {\n            normalizedRecord[mea] = record[mea];\n        });\n        dimensions.forEach((dim, index) => {\n            let value = (record[dim] || 'others').toString();\n            normalizedRecord[dim] = this.valueSets[index].get(value);\n        });\n        return normalizedRecord;\n    }\n    mean() {\n        let meanX = 0;\n        let meanY = 0;\n        if (this.normalizedDataSource.length === 0)\n            return [meanX, meanY];\n        this.normalizedDataSource.forEach((record, index) => {\n            meanX += record[this.X];\n            meanY += record[this.Y];\n        });\n        meanX /= this.normalizedDataSource.length;\n        meanY /= this.normalizedDataSource.length;\n        return [meanX, meanY];\n    }\n    getRegressionEquation() {\n        if (this.normalizedDataSource.length === 0)\n            return [0, 0];\n        const [meanX, meanY] = this.mean();\n        let beta = 0;\n        let alpha = 0;\n        let numerator = 0;\n        let denominator = 0;\n        this.normalizedDataSource.forEach(record => {\n            numerator += (record[this.X] - meanX) * (record[this.Y] - meanY);\n            denominator += (record[this.X] - meanX) ** 2;\n        });\n        beta = numerator / denominator;\n        alpha = meanY - meanX * beta;\n        return [alpha, beta];\n    }\n    r_squared() {\n        const [, meanY] = this.mean();\n        const [alpha, beta] = this.getRegressionEquation();\n        let SSR = 0;\n        let SST = 0;\n        this.normalizedDataSource.forEach(record => {\n            let x = record[this.X];\n            let y = record[this.Y];\n            let yHat = x * beta + alpha;\n            SSR += (yHat - meanY) ** 2;\n            SST += (y - meanY) ** 2;\n        });\n        return SSR / SST;\n    }\n    cumulativeLogisticDistribution(x) {\n        const lambda = 2;\n        const mu = 0.2;\n        return 1 / (1 + Math.pow(Math.E, -(x - mu) / lambda));\n    }\n    pValue() {\n        const [, beta] = this.getRegressionEquation();\n        const value = this.cumulativeLogisticDistribution(Math.abs(beta));\n        if (value > 0.5) {\n            return 2 * (1 - value);\n        }\n        else {\n            return 2 * value;\n        }\n    }\n    significance() {\n        let r_squared = this.r_squared();\n        let p_value = this.pValue();\n        return r_squared * (1 - p_value);\n    }\n}\n","import { min, max, sum, mean } from 'simple-statistics';\nconst SPLITOR = '_join_';\nconst count = function (x) {\n    return x.length;\n};\nexport const SFMapper = {\n    sum,\n    max,\n    mean,\n    min,\n    count\n};\nexport function getAggregator(op) {\n    const func = SFMapper[op] || sum;\n    return func;\n}\nexport function simpleAggregate(props) {\n    const { dataSource, dimensions, measures, ops } = props;\n    const groups = new Map();\n    for (let record of dataSource) {\n        const key = dimensions.map(d => record[d]).join(SPLITOR);\n        if (!groups.has(key)) {\n            groups.set(key, []);\n        }\n        groups.get(key).push(record);\n    }\n    const result = [];\n    for (let [key, group] of groups) {\n        const aggs = {};\n        measures.forEach((mea, meaIndex) => {\n            const opFunc = getAggregator(ops[meaIndex]);\n            aggs[mea] = opFunc(group.map(r => r[mea]));\n        });\n        const dimValues = key.split(SPLITOR);\n        dimensions.forEach((dim, dimIndex) => {\n            aggs[dim] = dimValues[dimIndex];\n        });\n        result.push(aggs);\n    }\n    return result;\n}\nexport function stdAggregate(props) {\n    const { dataSource, dimensions, measures, ops } = props;\n    const groups = new Map();\n    for (let record of dataSource) {\n        const key = dimensions.map((d) => record[d]).join(SPLITOR);\n        if (!groups.has(key)) {\n            groups.set(key, []);\n        }\n        groups.get(key).push(record);\n    }\n    const result = [];\n    for (let [key, group] of groups) {\n        const aggs = {};\n        measures.forEach((mea, meaIndex) => {\n            aggs[mea] = {};\n            ops.forEach(op => {\n                const opFunc = getAggregator(op);\n                aggs[mea][op] = opFunc(group.map((r) => r[mea]));\n            });\n        });\n        const dimValues = key.split(SPLITOR);\n        dimensions.forEach((dim, dimIndex) => {\n            aggs[dim] = dimValues[dimIndex];\n        });\n        result.push(aggs);\n    }\n    return result;\n}\nexport function stdAggregateFromCuboid(props) {\n    const { dataSource, dimensions, measures, ops } = props;\n    const groups = new Map();\n    for (let record of dataSource) {\n        const key = dimensions.map((d) => record[d]).join(SPLITOR);\n        if (!groups.has(key)) {\n            groups.set(key, []);\n        }\n        groups.get(key).push(record);\n    }\n    const result = [];\n    for (let [key, group] of groups) {\n        const aggs = {};\n        measures.forEach((mea, meaIndex) => {\n            aggs[mea] = {};\n            // TODO: need a formal solution for distributive\\algebraic\\holistic aggregators.\n            ops.filter(op => !(['sum', 'count', 'mean'].includes(op))).forEach((op) => {\n                const opFunc = getAggregator(op);\n                aggs[mea][op] = opFunc(group.map((r) => r[mea][op]));\n            });\n            aggs[mea][\"sum\"] = getAggregator(\"sum\")(group.map((r) => r[mea][\"sum\"]));\n            aggs[mea][\"count\"] = getAggregator(\"sum\")(group.map((r) => r[mea]['count']));\n            aggs[mea][\"mean\"] = aggs[mea]['sum'] / aggs[mea]['count'];\n        });\n        const dimValues = key.split(SPLITOR);\n        dimensions.forEach((dim, dimIndex) => {\n            aggs[dim] = dimValues[dimIndex];\n        });\n        result.push(aggs);\n    }\n    return result;\n}\n","export const TopKSingleField = 6;\nexport const TopKView = 15;\nexport const Depth = 4;\nexport const VisualLimit = 8;\nexport const TopKPercentField = 0.8;\nexport const CrammersVThreshold = 0.3;\nexport const PearsonCorrelation = {\n    strong: 0.5,\n    weak: 0.3\n};\n","/**\n *\n * @param matrix adjmatrix\n */\nfunction turnAdjMatrix2List(matrix) {\n    // only for the special matrix here(corelational matrix)\n    let edges = [];\n    for (let i = 0; i < matrix.length; i++) {\n        for (let j = i + 1; j < matrix[i].length; j++) {\n            edges.push([[i, j], Math.abs(matrix[i][j])]);\n        }\n    }\n    return edges;\n}\nfunction find(parents, n) {\n    return parents[n] === n ? n : parents[n] = find(parents, parents[n]);\n}\nfunction union(parents, n1, n2) {\n    let p1 = find(parents, n1);\n    let p2 = find(parents, n2);\n    parents[p1] = p2;\n    // I'm too tired. this is just a tmp lazy solution.... will be fixed later.\n    // may check and prove whether it's necessary.\n    find(parents, n1);\n    find(parents, n2);\n}\nfunction findWithEffect(parents, sizes, n) {\n    if (parents[n] === n) {\n        return n;\n    }\n    parents[n] = findWithEffect(parents, sizes, parents[n]);\n    sizes[n] = sizes[parents[n]];\n    return parents[n];\n}\nfunction unionWithEffect(parents, sizes, n1, n2) {\n    let p1 = findWithEffect(parents, sizes, n1);\n    let p2 = findWithEffect(parents, sizes, n2);\n    let size1 = sizes[p1];\n    let size2 = sizes[p2];\n    parents[p1] = p2;\n    sizes[p1] = sizes[p2] = size1 + size2;\n    findWithEffect(parents, sizes, n1);\n    findWithEffect(parents, sizes, n2);\n}\n/**\n * maxiumn spanning tree\n * @param matrix adjmatrix\n * @param groupNumber number of group generated by clustering\n */\nfunction kruskal(matrix, groupNumber, threshold = 0) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const parents = matrix.map((m, i) => i);\n    for (let edge of edges) {\n        if (find(parents, edge[0][0]) !== find(parents, edge[0][1])) {\n            union(parents, edge[0][0], edge[0][1]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = find(parents, i);\n        }\n        let set = new Set(parents);\n        if (set.size <= groupNumber || edge[1] < threshold) {\n            break;\n        }\n    }\n    let groups = new Map();\n    for (let i = 0; i < parents.length; i++) {\n        if (!groups.has(parents[i])) {\n            groups.set(parents[i], []);\n        }\n        groups.get(parents[i]).push(i);\n    }\n    return groups;\n}\n// todo: delete kruskal with limit size, use largest size to limit it(uncontrolled group number but better), need discuss.\n/**\n *\n * @param matrix\n * @param limitSize max size of each group\n */\nfunction kruskalWithLimitSize(matrix, limitSize) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const parents = matrix.map((m, i) => i);\n    const sizes = matrix.map(() => 1);\n    for (let edge of edges) {\n        if (findWithEffect(parents, sizes, edge[0][0]) !== findWithEffect(parents, sizes, edge[0][1])) {\n            if (sizes[edge[0][0]] + sizes[edge[0][1]] > limitSize) {\n                continue;\n            }\n            unionWithEffect(parents, sizes, edge[0][0], edge[0][1]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = findWithEffect(parents, sizes, i);\n        }\n        let set = new Set(parents);\n        if (set.size === 1) {\n            break;\n        }\n    }\n    let groups = new Map();\n    for (let i = 0; i < parents.length; i++) {\n        if (!groups.has(parents[i])) {\n            groups.set(parents[i], []);\n        }\n        groups.get(parents[i]).push(i);\n    }\n    return groups;\n}\nexport function kruskalMSTWithLimitSize(matrix, limitSize = 4) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const edgesInMST = [];\n    const parents = matrix.map((m, i) => i);\n    const cloneParents = matrix.map((m, i) => i);\n    const sizes = matrix.map(() => 1);\n    for (let edge of edges) {\n        if (findWithEffect(parents, sizes, edge[0][0]) !== findWithEffect(parents, sizes, edge[0][1])) {\n            if (sizes[edge[0][0]] + sizes[edge[0][1]] > limitSize) {\n                if (find(cloneParents, edge[0][0]) !== find(cloneParents, edge[0][1])) {\n                    edgesInMST.push([edge[0], edge[1], true]);\n                    union(cloneParents, edge[0][0], edge[0][1]);\n                }\n                continue;\n            }\n            unionWithEffect(parents, sizes, edge[0][0], edge[0][1]);\n            // fuck typescript\n            // edgesInMST.push([...edge, inCutEdge]);\n            edgesInMST.push([edge[0], edge[1], false]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = findWithEffect(parents, sizes, i);\n            cloneParents[i] = find(cloneParents, i);\n        }\n        let set = new Set(parents);\n        if (set.size === 1) {\n            break;\n        }\n    }\n    return { edgesInMST, groups: parents };\n}\n/**\n *\n * @param matrix\n * @param groupNumber number of group generated by clustering\n */\nexport function kruskalMST(matrix, groupNumber = 4, threshold = 0) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const edgesInMST = [];\n    const parents = matrix.map((m, i) => i);\n    let groups = [...parents];\n    let inCutEdge = false;\n    for (let edge of edges) {\n        if (find(parents, edge[0][0]) !== find(parents, edge[0][1])) {\n            union(parents, edge[0][0], edge[0][1]);\n            // fuck typescript\n            // edgesInMST.push([...edge, inCutEdge]);\n            edgesInMST.push([edge[0], edge[1], inCutEdge]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = find(parents, i);\n        }\n        let set = new Set(parents);\n        // TODO:\n        // + use kruskalMST instead of kruskal.\n        if (set.size <= groupNumber || edge[1] < threshold) {\n            inCutEdge = true;\n        }\n        else {\n            groups = [...parents];\n        }\n        if (set.size === 1) {\n            break;\n        }\n    }\n    return { edgesInMST, groups };\n}\nfunction cluster({ matrix, measures, method = 'kruskal', groupMaxSize = 4, limitSize = false, threshold = 0 }) {\n    // const groups = kruskal({ matrix, groupMaxSize });\n    let groups;\n    if (limitSize) {\n        groups = kruskalWithLimitSize(matrix, groupMaxSize);\n    }\n    else {\n        groups = kruskal(matrix, groupMaxSize, threshold);\n    }\n    let ans = [];\n    for (let meas of groups.values()) {\n        ans.push(meas.map(meaIndex => measures[meaIndex]));\n    }\n    return ans;\n}\nexport default cluster;\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"@babel/runtime/helpers/esm/setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","import getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport isNativeReflectConstruct from \"@babel/runtime/helpers/esm/isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","class Base {\n    constructor(props) {\n        const { dataSource, dimensions, measures } = props;\n        this.dataSource = dataSource;\n        this.dimensions = dimensions;\n        this.measures = measures;\n    }\n    normalize() {\n        this.normalizedDataSource = [];\n        this.valueSets = [];\n        this.valueParser = [];\n        this.ranges = [];\n        this.dimensions.forEach(dim => {\n            this.valueSets.push(new Map());\n            this.valueParser.push([]);\n        });\n        this.measures.forEach(() => {\n            this.ranges.push([Infinity, -Infinity]);\n        });\n        this.dataSource.forEach(record => {\n            this.dimensions.forEach((dim, index) => {\n                let value = (record[dim] || 'others').toString();\n                if (!this.valueSets[index].has(value)) {\n                    this.valueSets[index].set(value, this.valueSets[index].size);\n                    this.valueParser[index].push(value);\n                }\n            });\n            this.measures.forEach((mea, index) => {\n                let value = record[mea];\n                if (typeof value === 'number') {\n                    this.ranges[index][0] = Math.min(this.ranges[index][0], value);\n                    this.ranges[index][1] = Math.max(this.ranges[index][1], value);\n                }\n            });\n        });\n        this.dataSource.forEach(record => {\n            let normalizedRecord = this.normalizeRecord(record);\n            this.normalizedDataSource.push(normalizedRecord);\n        });\n        return this.normalizedDataSource;\n    }\n    normalizeRecord(record) {\n        let normalizedRecord = {};\n        this.measures.forEach((mea, index) => {\n            normalizedRecord[mea] = (record[mea] - this.ranges[index][0]) / (this.ranges[index][1] - this.ranges[index][0]);\n        });\n        this.dimensions.forEach((dim, index) => {\n            let value = (record[dim] || 'others').toString();\n            normalizedRecord[dim] = this.valueSets[index].get(value);\n        });\n        return normalizedRecord;\n    }\n}\nexport class KNN extends Base {\n    constructor(props) {\n        super(props);\n        const { K } = props;\n        this.K = K;\n        this.normalize();\n    }\n    getNeighbors(targetRecord, features, weights = []) {\n        if (weights.length !== features.length) {\n            features.forEach(f => {\n                weights.push(1);\n            });\n        }\n        // let normalizedRecord = this.normalizeRecord(targetRecord);\n        let dimFeatures = [];\n        let meaFeatures = [];\n        let dimWeights = [];\n        let meaWeights = [];\n        let dimSets = new Set(this.dimensions);\n        for (let i = 0; i < features.length; i++) {\n            if (dimSets.has(features[i])) {\n                dimFeatures.push(features[i]);\n                dimWeights.push(weights[i]);\n            }\n            else {\n                meaFeatures.push(features[i]);\n                meaWeights.push(weights[i]);\n            }\n        }\n        // let legalFeatures = features.filter(f => this.measures.includes(f));\n        let distances = [];\n        this.normalizedDataSource.forEach((record, rIndex) => {\n            let dis = 0;\n            meaFeatures.forEach((feature, index) => {\n                dis += ((record[feature] - targetRecord[feature]) * meaWeights[index]) ** 2;\n            });\n            dimFeatures.forEach((feature, index) => {\n                if (record[feature] !== targetRecord[feature]) {\n                    dis += dimWeights[index] ** 2;\n                }\n            });\n            distances.push({\n                dis,\n                index: rIndex\n            });\n        });\n        distances.sort((a, b) => {\n            return a.dis - b.dis;\n        });\n        let ans = [];\n        let len = Math.min(this.K, distances.length);\n        for (let i = 0; i < len; i++) {\n            ans.push(this.normalizedDataSource[distances[i].index]);\n        }\n        return ans;\n    }\n    getTargetValue(targets, neighbors) {\n        let ans = [];\n        targets.forEach(tar => {\n            let votes = new Map();\n            neighbors.forEach(nei => {\n                if (!votes.has(nei[tar])) {\n                    votes.set(nei[tar], 0);\n                }\n                votes.set(nei[tar], votes.get(nei[tar]) + 1);\n            });\n            let mostCount = 0;\n            let mostFeature = 0;\n            for (let vote of votes) {\n                if (vote[1] > mostCount) {\n                    mostCount = vote[1];\n                    mostFeature = vote[0];\n                }\n            }\n            let dimIndex = this.dimensions.indexOf(tar);\n            if (dimIndex > -1) {\n                ans.push(this.valueParser[dimIndex][mostFeature]);\n            }\n            else {\n                ans.push(mostFeature);\n            }\n        });\n        return ans;\n    }\n}\n","/**\n * todo reservoir sampling is better to support stream data\n * Algorithm R:\n * Vitter, Jeffrey S. (1 March 1985). \"Random sampling with a reservoir\" (PDF). ACM Transactions on Mathematical Software. 11 (1): 37–57. CiteSeerX 10.1.1.138.784. doi:10.1145/3147.3165.\n */\nexport function reservoirSampling(dataSource, size = 500) {\n    if (dataSource.length <= size)\n        return dataSource;\n    let sampleSpace = dataSource.slice(0, size);\n    let len = dataSource.length;\n    for (let i = size + 1; i < len; i++) {\n        let pos = Math.round(Math.random() * i);\n        if (pos < size) {\n            sampleSpace[pos] = dataSource[i];\n        }\n    }\n    return sampleSpace;\n}\nfunction linearCongruentialGenerator(size, seed) {\n    if (size === 0)\n        return [];\n    const m = 2147483647;\n    const a = 1103515245;\n    const c = 12345;\n    let ans = [seed];\n    for (let i = 1; i < size; i++) {\n        ans.push(((ans[i - 1] * a + c) % m));\n    }\n    return ans.map(v => v / m);\n}\nexport function uniformSampling(dataSource, size) {\n    let sampleIndexes = linearCongruentialGenerator(size, Math.random() * 2147483647);\n    let ans = [];\n    for (let i = 0; i < size; i++) {\n        let index = Math.floor(sampleIndexes[i] * size) % size;\n        ans.push(dataSource[index]);\n    }\n    return ans;\n}\n","export const CHANNEL = {\n    maxDimensionNumber: 8,\n    maxMeasureNumber: 6\n};\nexport const EULER = 0.5772156649;\n","import * as Cluster from './cluster/index';\nimport { KNN } from './classification/knn';\nimport { IsolationForest } from './outlier/isolationForest';\nconst Outier = {\n    IsolationForest\n};\nconst Classification = {\n    KNN\n};\nexport { Cluster, Outier, Classification };\n","import { uniformSampling } from \"../../sampling\";\nimport { EULER } from \"../../constant\";\nexport class IsolationForest {\n    constructor(dimensions, measures, dataSource, treeNumber = 100, Psi = 256) {\n        this.dimensions = dimensions;\n        this.measures = measures;\n        this.dataSource = dataSource;\n        if (dataSource.length < Psi) {\n            this.treeNumber = Math.max(1, Math.ceil(Psi / 50));\n            this.sampleSize = Math.max(2, Math.floor(dataSource.length / 2));\n        }\n        else {\n            this.treeNumber = treeNumber;\n            this.sampleSize = Psi;\n        }\n        this.limitHeight = Math.ceil(Math.log2(this.sampleSize));\n        this.iForest = [];\n        this.normalizeDimensions();\n    }\n    normalizeDimensions() {\n        this.normalizedDataSource = [];\n        this.valueSets = [];\n        this.ranges = [];\n        this.dimensions.forEach(() => {\n            this.valueSets.push(new Map());\n        });\n        this.measures.forEach(() => {\n            this.ranges.push([Infinity, -Infinity]);\n        });\n        this.dataSource.forEach(record => {\n            this.dimensions.forEach((dim, index) => {\n                let value = (record[dim] || 'others').toString();\n                if (!this.valueSets[index].has(value)) {\n                    this.valueSets[index].set(value, this.valueSets[index].size);\n                }\n            });\n            this.measures.forEach((mea, index) => {\n                let value = record[mea];\n                if (typeof value === 'number') {\n                    this.ranges[index][0] = Math.min(this.ranges[index][0], value);\n                    this.ranges[index][1] = Math.max(this.ranges[index][1], value);\n                }\n            });\n        });\n        this.dataSource.forEach(record => {\n            let normalizedRecord = this.normalizeRecord(record);\n            this.normalizedDataSource.push(normalizedRecord);\n        });\n        return this.normalizedDataSource;\n    }\n    normalizeRecord(record) {\n        let normalizedRecord = {};\n        this.measures.forEach(mea => {\n            normalizedRecord[mea] = record[mea];\n        });\n        this.dimensions.forEach((dim, index) => {\n            let value = (record[dim] || 'others').toString();\n            normalizedRecord[dim] = this.valueSets[index].get(value);\n        });\n        return normalizedRecord;\n    }\n    buildIsolationTree(normalizedSampleData, depth) {\n        if (depth >= this.limitHeight || normalizedSampleData.length <= 1) {\n            return null;\n        }\n        else {\n            let rand = Math.random();\n            let randField = this.measures[0] || this.dimensions[0];\n            let dimLength = this.dimensions.length;\n            let meaLength = this.measures.length;\n            let randValue = 0;\n            if (rand >= dimLength / (dimLength + meaLength)) {\n                let index = Math.floor(Math.random() * meaLength) % meaLength;\n                randField = this.measures[index];\n                randValue = this.ranges[index][0] + (this.ranges[index][1] - this.ranges[index][0]) * Math.random();\n            }\n            else {\n                let index = Math.floor(Math.random() * dimLength) % dimLength;\n                randField = this.dimensions[index];\n                randValue = Math.floor(this.valueSets[index].size * Math.random()) % this.valueSets[index].size;\n            }\n            // random in range not in distribution.\n            // let randValue = normalizedSampleData[Math.floor(Math.random() * normalizedSampleData.length) % normalizedSampleData.length][randField];\n            let leftSubData = [];\n            let rightSubData = [];\n            for (let record of normalizedSampleData) {\n                if (record[randField] < randValue) {\n                    leftSubData.push(record);\n                }\n                else {\n                    rightSubData.push(record);\n                }\n            }\n            let node = {\n                field: randField,\n                value: randValue,\n                size: normalizedSampleData.length\n            };\n            node.left = this.buildIsolationTree(leftSubData, depth + 1);\n            node.right = this.buildIsolationTree(rightSubData, depth + 1);\n            return node;\n        }\n    }\n    /**\n     * average unsuccessful searches in BST (Preiss, 1999)\n     * @param Psi\n     */\n    AFS(Psi) {\n        if (Psi > 2)\n            return 2 * (Math.log(Psi - 1) + EULER) - 2 * (Psi - 1) / Psi;\n        if (Psi === 2)\n            return 1;\n        return 0;\n    }\n    getPathLength(record, iTree, pathLength, nodeSize) {\n        if (iTree === null) {\n            return pathLength + this.AFS(nodeSize);\n        }\n        let value = record[iTree.field];\n        if (value < iTree.value) {\n            return this.getPathLength(record, iTree.left, pathLength + 1, iTree.size);\n        }\n        else {\n            return this.getPathLength(record, iTree.right, pathLength + 1, iTree.size);\n        }\n    }\n    buildIsolationForest() {\n        this.iForest = [];\n        for (let i = 0; i < this.treeNumber; i++) {\n            let samples = uniformSampling(this.normalizedDataSource, this.sampleSize);\n            let iTree = this.buildIsolationTree(samples, 0);\n            this.iForest.push(iTree);\n        }\n        return this.iForest;\n    }\n    // public evaluate (record: Record): number {\n    // }\n    estimateOutierScore() {\n        this.recordScoreList = [];\n        this.normalizedDataSource.forEach(record => {\n            let recordScore = 0;\n            let avgPathLength = 0;\n            this.iForest.forEach(iTree => {\n                avgPathLength += this.getPathLength(record, iTree, 0, this.sampleSize);\n            });\n            avgPathLength /= this.iForest.length;\n            recordScore = Math.pow(2, -(avgPathLength / this.AFS(this.sampleSize)));\n            this.recordScoreList.push(recordScore);\n        });\n        return this.recordScoreList;\n    }\n}\n","import { crammersV, getCombination, pearsonCC } from '../statistics/index';\nimport { CrammersVThreshold, PearsonCorrelation } from './config';\nimport { Cluster } from '../ml/index';\nimport { CHANNEL } from '../constant';\n// insights like outlier and trend both request high impurity of dimension.\nexport function getDimCorrelationMatrix(dataSource, dimensions) {\n    let matrix = dimensions.map(d => dimensions.map(d => 0));\n    for (let i = 0; i < dimensions.length; i++) {\n        matrix[i][i] = 1;\n        for (let j = i + 1; j < dimensions.length; j++) {\n            matrix[i][j] = matrix[j][i] = crammersV(dataSource, dimensions[i], dimensions[j]);\n        }\n    }\n    return matrix;\n}\nexport function getMeaCorrelationMatrix(dataSource, measures) {\n    let matrix = measures.map(i => measures.map(j => 0));\n    for (let i = 0; i < measures.length; i++) {\n        matrix[i][i] = 1;\n        for (let j = i + 1; j < measures.length; j++) {\n            let r = pearsonCC(dataSource, measures[i], measures[j]);\n            matrix[j][i] = matrix[i][j] = r;\n        }\n    }\n    return matrix;\n}\nexport function getDimClusterGroups(dataSource, dimensions, threshold = CrammersVThreshold, max_number_of_group) {\n    const maxDimNumberInView = 4;\n    let dimCorrelationMatrix = getDimCorrelationMatrix(dataSource, dimensions);\n    // groupMaxSize here means group number.\n    let groups = Cluster.kruskal({\n        matrix: dimCorrelationMatrix,\n        measures: dimensions,\n        groupMaxSize: max_number_of_group ? max_number_of_group : Math.round(dimensions.length / maxDimNumberInView),\n        threshold,\n    });\n    return groups;\n}\nexport function getDimSetsBasedOnClusterGroups(dataSource, dimensions, correlation_threshold, max_dimensions_in_space) {\n    let dimSets = [];\n    let groups = getDimClusterGroups(dataSource, dimensions, correlation_threshold);\n    for (let group of groups) {\n        let combineDimSet = getCombination(group, 1, max_dimensions_in_space ? max_dimensions_in_space : CHANNEL.maxDimensionNumber);\n        dimSets.push(...combineDimSet);\n    }\n    return dimSets;\n}\n/**\n *\n * @param dataSource\n * @param measures\n * @param correlation_threshold a threshold of correlation used to define min correlation value in a cluster of measure.\n * @param max_measure_in_view\n */\nexport function getMeaSetsBasedOnClusterGroups(dataSource, measures, correlation_threshold, max_number_of_group = 3) {\n    const soft_max_measures_in_view = 3;\n    let correlationMatrix = getMeaCorrelationMatrix(dataSource, measures);\n    let groups = Cluster.kruskal({\n        matrix: correlationMatrix,\n        measures: measures,\n        groupMaxSize: max_number_of_group ? max_number_of_group : Math.round(measures.length / soft_max_measures_in_view),\n        threshold: correlation_threshold ? correlation_threshold : PearsonCorrelation.strong\n    });\n    return groups;\n}\nexport function subspaceSearching(dataSource, dimensions, should_dimensions_correlated = true) {\n    if (should_dimensions_correlated) {\n        return getDimSetsBasedOnClusterGroups(dataSource, dimensions);\n    }\n    else {\n        return getCombination(dimensions);\n    }\n}\nexport function getRelatedVertices(adjMatrix, vertices, verticesInGraph, topK) {\n    let verStatus = vertices.map(v => verticesInGraph.includes(v));\n    let edges = [];\n    let ans = [];\n    for (let i = 0; i < adjMatrix.length; i++) {\n        // if vertex in graph, then check all the edges from this vertex\n        if (verStatus[i]) {\n            for (let j = 0; j < adjMatrix[i].length; j++) {\n                if (!verStatus[j]) {\n                    edges.push([adjMatrix[i][j], [i, j]]);\n                }\n            }\n        }\n    }\n    edges.sort((a, b) => {\n        return b[0] - a[0];\n    });\n    for (let i = 0; i < edges.length; i++) {\n        let targetVertexIndex = edges[i][1][1];\n        if (!verStatus[targetVertexIndex]) {\n            verStatus[targetVertexIndex] = true;\n            ans.push({\n                field: vertices[targetVertexIndex],\n                corValue: edges[i][0]\n            });\n        }\n    }\n    return ans.slice(0, topK ? topK : ans.length);\n}\n","// import { aggregate } from '../utils';\nimport aggregate from 'cube-core';\nimport { entropy, normalize } from '../statistics/index';\nimport { crammersV, getCombination, pearsonCC, linearMapPositive } from '../statistics/index';\nimport { CrammersVThreshold } from './config';\nimport { Cluster } from '../ml/index';\nimport { CHANNEL } from '../constant';\n// insights like outlier and trend both request high impurity of dimension.\nfunction getDimCorrelationMatrix(dataSource, dimensions) {\n    let matrix = dimensions.map(d => dimensions.map(d => 0));\n    for (let i = 0; i < dimensions.length; i++) {\n        matrix[i][i] = 1;\n        for (let j = i + 1; j < dimensions.length; j++) {\n            matrix[i][j] = matrix[j][i] = crammersV(dataSource, dimensions[i], dimensions[j]);\n        }\n    }\n    return matrix;\n}\nexport function getDimSetsBasedOnClusterGroups(dataSource, dimensions) {\n    const maxDimNumberInView = 4;\n    let dimSets = [];\n    let dimCorrelationMatrix = getDimCorrelationMatrix(dataSource, dimensions);\n    // groupMaxSize here means group number.\n    let groups = Cluster.kruskal({\n        matrix: dimCorrelationMatrix,\n        measures: dimensions,\n        groupMaxSize: Math.round(dimensions.length / maxDimNumberInView),\n        threshold: CrammersVThreshold\n    });\n    // todo: maybe a threhold would be better ?\n    for (let group of groups) {\n        let combineDimSet = getCombination(group, 1, CHANNEL.maxDimensionNumber);\n        dimSets.push(...combineDimSet);\n    }\n    return dimSets;\n}\nexport function subspaceSearching(dataSource, dimensions, shouldDimensionsCorrelated = true) {\n    if (shouldDimensionsCorrelated) {\n        return getDimSetsBasedOnClusterGroups(dataSource, dimensions);\n    }\n    else {\n        return getCombination(dimensions);\n    }\n}\nexport function insightExtraction(dataSource, dimensions, measures, operator = 'sum') {\n    let impurityList = [];\n    let dimSet = subspaceSearching(dataSource, dimensions, true);\n    for (let dset of dimSet) {\n        let impurity = {};\n        let aggData = aggregate({\n            dataSource,\n            dimensions: dset,\n            measures,\n            asFields: measures,\n            operator: operator || 'sum' //: operator as \n        });\n        // let fList = aggData.map(r => r)\n        for (let mea of measures) {\n            // fl = frequency list, pL = probability list\n            let fL = aggData.map(r => r[mea]);\n            let pL = normalize(linearMapPositive(fL));\n            let value = entropy(pL);\n            impurity[mea] = value;\n        }\n        let correlationMatrix = measures.map(i => measures.map(j => 0));\n        for (let i = 0; i < measures.length; i++) {\n            correlationMatrix[i][i] = 1;\n            for (let j = i + 1; j < measures.length; j++) {\n                let r = pearsonCC(aggData, measures[i], measures[j]);\n                correlationMatrix[j][i] = correlationMatrix[i][j] = r;\n            }\n        }\n        impurityList.push([dset, impurity, correlationMatrix]);\n    }\n    return impurityList;\n}\n// interface InsightSpace {\n//   dimensions: string[];\n//   type: 'entropy' | 'trend' | 'outlier';\n//   order: 'desc' | 'asc';\n//   score: {\n//     [meaName: string]: number;\n//   };\n//   correlationMatrix: number[][];\n// }\n// export function multiInsightExtraction(dataSource: DataSource, dimensions: string[], measures: string[]): InsightSpace[] {\n//   let impurityList: FieldsFeature[] = [];\n//   let dimSet = subspaceSearching(dataSource, dimensions, true);\n//   let correlationMatrix = measures.map(i => measures.map(j => 0));\n//   for (let i = 0; i < measures.length; i++) {\n//     correlationMatrix[i][i] = 1;\n//     for (let j = i + 1; j < measures.length; j++) {\n//       let r = pearsonCC(dataSource, measures[i], measures[j]);\n//       correlationMatrix[j][i] = correlationMatrix[i][j] = r;\n//     }\n//   }\n//   for (let dset of dimSet) {\n//     let impurity = {};\n//     let trend = {};\n//     let outlier = {};\n//     let aggData = aggregate({\n//       dataSource,\n//       dimensions: dset,\n//       measures,\n//       asFields: measures,\n//       operator: operator || 'sum'//: operator as \n//     });\n//     // let fList = aggData.map(r => r)\n//     for (let mea of measures) {\n//       // fl = frequency list, pL = probability list\n//       let fL = aggData.map(r => r[mea]);\n//       let pL = normalize(linearMapPositive(fL));\n//       let value = entropy(pL);\n//       impurity[mea] = value;\n//     }\n//     for (let mea of measures) {\n//     }\n//     impurityList.push([dset, impurity, correlationMatrix]);\n//   }\n//   return impurityList\n// }\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { KNN } from \"../../ml/classification/knn\";\nexport class GroupIntention extends KNN {\n    getTargetValuePercent(targets, targetRecord, neighbors) {\n        let ans = [];\n        targets.forEach((target, index) => {\n            let sameCount = 0;\n            neighbors.forEach(nei => {\n                if (nei[target] === targetRecord[target]) {\n                    sameCount++;\n                }\n            });\n            ans.push(sameCount / neighbors.length);\n        });\n        return ans;\n    }\n    getSignificance(features, targets) {\n        let ans = 0;\n        this.normalizedDataSource.forEach(record => {\n            let neighbors = this.getNeighbors(record, features);\n            let percents = this.getTargetValuePercent(targets, record, neighbors);\n            let sig = 0;\n            percents.forEach(per => {\n                sig += per;\n            });\n            sig /= percents.length;\n            ans += sig;\n        });\n        ans /= this.normalizedDataSource.length;\n        return ans;\n    }\n}\n","import { getMeaSetsBasedOnClusterGroups, getDimClusterGroups } from './subspaces';\nimport { CrammersVThreshold, PearsonCorrelation } from './config';\nimport { Outier } from '../ml/index';\nimport { getCombination, linearMapPositive } from '../statistics/index';\nimport { CHANNEL } from '../constant';\nimport { entropy, normalize } from '../statistics/index';\nimport aggregate from 'cube-core';\nimport { oneDLinearRegression } from '../statistics/index';\nimport { GroupIntention } from \"./intention/groups\";\nconst SPLITER = '=;=';\nfunction crossGroups(dimensionGroups, measureGroups) {\n    let viewSpaces = [];\n    for (let dimensions of dimensionGroups) {\n        for (let measures of measureGroups) {\n            viewSpaces.push({\n                dimensions,\n                measures\n            });\n        }\n    }\n    return viewSpaces;\n}\nfunction getDimSetsFromClusterGroups(groups) {\n    let dimSets = [];\n    for (let group of groups) {\n        let combineDimSet = getCombination(group, 1, CHANNEL.maxDimensionNumber);\n        dimSets.push(...combineDimSet);\n    }\n    return dimSets;\n}\nfunction getCombinationFromClusterGroups(groups, limitSize = CHANNEL.maxDimensionNumber) {\n    let fieldSets = [];\n    for (let group of groups) {\n        let combineFieldSet = getCombination(group, 1, limitSize);\n        fieldSets.push(...combineFieldSet);\n    }\n    return fieldSets;\n}\nexport const getGeneralIntentionSpace = async function (aggData, dimensions, measures) {\n    let score = 0;\n    let significance = 0;\n    for (let mea of measures) {\n        let fL = aggData.map(r => r[mea]);\n        let pL = normalize(linearMapPositive(fL));\n        let value = entropy(pL);\n        score += value;\n        significance += value / Math.log2(fL.length);\n    }\n    score /= measures.length;\n    significance /= measures.length;\n    significance = 1 - significance;\n    return {\n        dimensions,\n        measures,\n        type: 'default_general',\n        score,\n        impurity: score,\n        significance,\n        order: 'asc'\n    };\n};\nexport const getOutlierIntentionSpace = async function getOutlierIntentionSpace(aggData, dimensions, measures) {\n    let iForest = new Outier.IsolationForest([], measures, aggData);\n    iForest.buildIsolationForest();\n    let scoreList = iForest.estimateOutierScore();\n    let maxIndex = 0;\n    let score = 0;\n    for (let i = 0; i < scoreList.length; i++) {\n        if (scoreList[i] > score) {\n            score = scoreList[i];\n            maxIndex = i;\n        }\n    }\n    let des = {};\n    dimensions.concat(measures).forEach(mea => { des[mea] = aggData[maxIndex][mea]; });\n    return {\n        dimensions,\n        measures,\n        score,\n        significance: score,\n        order: 'desc',\n        description: des\n    };\n};\nexport const getTrendIntentionSpace = async function (aggData, dimensions, measures) {\n    if (dimensions.length !== 1)\n        return null;\n    let orderedData = [...aggData];\n    orderedData.sort((a, b) => {\n        if (a[dimensions[0]] > b[dimensions[0]])\n            return 1;\n        if (a[dimensions[0]] === b[dimensions[0]])\n            return 0;\n        if (a[dimensions[0]] < b[dimensions[0]])\n            return -1;\n    });\n    let score = 0;\n    for (let mea of measures) {\n        let linearModel = new oneDLinearRegression(orderedData, dimensions[0], mea);\n        linearModel.normalizeDimensions(dimensions);\n        score += linearModel.significance();\n    }\n    score /= measures.length;\n    return {\n        dimensions,\n        measures,\n        score,\n        significance: score,\n        order: 'desc'\n    };\n};\nexport const getGroupIntentionSpace = async function (aggData, dimensions, measures) {\n    if (dimensions.length < 2)\n        return null;\n    let score = 0;\n    let groupIntention = new GroupIntention({\n        dataSource: aggData,\n        dimensions,\n        measures,\n        K: 8\n    });\n    score = groupIntention.getSignificance(measures.concat(dimensions.slice(0, -1)), dimensions.slice(-1));\n    return {\n        dimensions,\n        measures,\n        score,\n        significance: score,\n        order: 'desc'\n    };\n};\n// export const IntentionWorkerCollection: Map<string, IntentionWorker> = new Map();\nexport var DefaultIWorker;\n(function (DefaultIWorker) {\n    DefaultIWorker[\"outlier\"] = \"default_outlier\";\n    DefaultIWorker[\"cluster\"] = \"default_group\";\n    DefaultIWorker[\"trend\"] = \"default_trend\";\n})(DefaultIWorker || (DefaultIWorker = {}));\nexport class IntentionWorkerCollection {\n    constructor() {\n        this.workers = new Map();\n    }\n    register(name, iWorker) {\n        if (this.workers.has(name)) {\n            throw new Error(`There has been a worker named: ${name} already.`);\n        }\n        else {\n            this.workers.set(name, [true, iWorker]);\n        }\n    }\n    enable(name, status) {\n        if (!this.workers.has(name)) {\n            throw new Error(`Intention Worker \"${name}\" does not exist.`);\n        }\n        else {\n            let iWorkerWithStatus = this.workers.get(name);\n            iWorkerWithStatus[0] = status;\n            this.workers.set(name, iWorkerWithStatus);\n        }\n    }\n    each(func) {\n        for (let [name, iWorker] of this.workers) {\n            if (iWorker[0]) {\n                func(iWorker[1], name);\n            }\n        }\n    }\n    static init(props = { withDefaultIWorkers: true }) {\n        const { withDefaultIWorkers = true } = props;\n        if (!IntentionWorkerCollection.colletion) {\n            IntentionWorkerCollection.colletion = new IntentionWorkerCollection();\n            if (withDefaultIWorkers) {\n                IntentionWorkerCollection.colletion.register(DefaultIWorker.outlier, getOutlierIntentionSpace);\n                IntentionWorkerCollection.colletion.register(DefaultIWorker.cluster, getGroupIntentionSpace);\n                IntentionWorkerCollection.colletion.register(DefaultIWorker.trend, getTrendIntentionSpace);\n            }\n        }\n        for (let key in DefaultIWorker) {\n            IntentionWorkerCollection.colletion.enable(DefaultIWorker[key], withDefaultIWorkers);\n        }\n        return IntentionWorkerCollection.colletion;\n    }\n}\nexport async function getIntentionSpaces(cubePool, viewSpaces, Collection) {\n    let ansSpace = [];\n    for (let space of viewSpaces) {\n        const { dimensions, measures } = space;\n        let key = dimensions.join(SPLITER);\n        if (cubePool.has(key)) {\n            let aggData = cubePool.get(key);\n            let generalSpace = await getGeneralIntentionSpace(aggData, dimensions, measures);\n            Collection.each(async (iWorker, name) => {\n                try {\n                    let iSpace = await iWorker(aggData, dimensions, measures);\n                    if (iSpace !== null) {\n                        iSpace.type = name;\n                        iSpace.impurity = generalSpace.impurity;\n                        ansSpace.push(iSpace);\n                    }\n                }\n                catch (error) {\n                    console.error('worker failed', { dimensions, measures, aggData }, error);\n                }\n            });\n        }\n    }\n    return ansSpace;\n}\nexport async function getVisSpaces(props) {\n    const { dataSource, dimensions, measures, collection, dimension_correlation_threshold = CrammersVThreshold, measure_correlation_threshold = PearsonCorrelation.strong, max_dimension_num_in_view = 3, max_measure_num_in_view = 3, } = props;\n    // 1. get dimension cluster groups.\n    // 2. get measure cluster groups.\n    // 3. get dimension groups * measure groups = subspaces + aggregate\n    // 4. calculate each subspace intention score (entropy, outlier, trend for temporal & oridinal field)\n    // 5. filter each intend subspaces with threadshold\n    // 6.manage those spaces / order them.\n    let visableDimensions = dimensions; //.filter(dim => !isFieldUnique(dataSource, dim));\n    let dimensionGroups = getDimClusterGroups(dataSource, visableDimensions, dimension_correlation_threshold);\n    // let dimensionSets = getDimSetsFromClusterGroups(dimensionGroups);\n    let dimensionSets = getCombinationFromClusterGroups(dimensionGroups, max_dimension_num_in_view);\n    let measureGroups = getMeaSetsBasedOnClusterGroups(dataSource, measures, measure_correlation_threshold);\n    let measureSets = getCombinationFromClusterGroups(measureGroups, max_measure_num_in_view);\n    let viewSpaces = crossGroups(dimensionSets, measureSets);\n    let cubePool = new Map();\n    // for (let group of dimensionGroups) {\n    // todo: similar cuboids computation using cube-core\n    let t0 = new Date().getTime();\n    for (let group of dimensionSets) {\n        let key = group.join(SPLITER);\n        let aggData = aggregate({\n            dataSource,\n            dimensions: group,\n            measures,\n            asFields: measures,\n            operator: 'sum'\n        });\n        cubePool.set(key, aggData);\n    }\n    let t1 = new Date().getTime();\n    console.log('cube cost', t1 - t0);\n    cubePool.set('*', dataSource);\n    const usedCollection = collection || IntentionWorkerCollection.init();\n    ;\n    // usedCollection.enable(DefaultIWorker.cluster, false);\n    let ansSpace = await getIntentionSpaces(cubePool, viewSpaces, usedCollection);\n    return ansSpace;\n}\n","import { isFieldTime, isFieldContinous, memberCount, isFieldCategory, deepcopy, groupContinousField, groupCategoryField } from '../utils/index';\nimport { normalize, entropy } from '../statistics/index';\nimport { isUniformDistribution } from '../distribution';\nconst MIN_QUAN_MEMBER_SIZE = 25;\n/**\n *\n * @param dataSource\n * @param field\n * todo: should accept BIField type and calculate the semantic type basic on it.\n */\nexport function getFieldType(dataSource, field) {\n    if (isFieldTime(dataSource, field)) {\n        return 'temporal';\n    }\n    else if (isFieldContinous(dataSource, field)) {\n        // Todo:\n        // here is only a tmp solution. we still hope to divided ordinal type and quantitative type.\n        // if (memberCount(dataSource, field).length > MIN_QUAN_MEMBER_SIZE) {\n        //   return 'quantitative'\n        // } else {\n        //   return 'ordinal';\n        // }\n        return 'quantitative';\n    }\n    else if (isFieldCategory(dataSource, field)) {\n        // isFieldCategory is a safety checking here, for sometimes dirty data value can be object.\n        return 'nominal';\n    }\n    else {\n        // todo do something(like cleaning)\n        return 'nominal';\n    }\n}\nexport function getAllFieldTypes(dataSource, fields) {\n    let fieldsWithType = [];\n    for (let field of fields) {\n        fieldsWithType.push({\n            name: field,\n            type: getFieldType(dataSource, field)\n        });\n    }\n    return fieldsWithType;\n}\nexport function getFieldDistribution(dataSource, field) {\n    let members = memberCount(dataSource, field);\n    // members.sort((a, b) => a[1] - b[1]);\n    return members.map(m => {\n        return { memberName: m[0], count: m[1] };\n    });\n}\nexport function getAllFieldsDistribution(dataSource, fields) {\n    let fieldsDistribution = [];\n    for (let field of fields) {\n        fieldsDistribution.push({\n            fieldName: field,\n            distribution: getFieldDistribution(dataSource, field)\n        });\n    }\n    return fieldsDistribution;\n}\nexport function getFieldEntropy(dataSource, field) {\n    const members = memberCount(dataSource, field);\n    const frequencyList = members.map(m => m[1]);\n    const probabilityList = normalize(frequencyList);\n    const fieldEntropy = entropy(probabilityList);\n    const maxEntropy = Math.log2(members.length);\n    return {\n        fieldName: field,\n        entropy: fieldEntropy,\n        maxEntropy\n    };\n}\nexport function getAllFieldsEntropy(dataSource, fields) {\n    let fieldEntropyList = [];\n    for (let field of fields) {\n        fieldEntropyList.push(getFieldEntropy(dataSource, field));\n    }\n    return fieldEntropyList;\n}\nexport function groupFields(dataSource, fields) {\n    let groupedData = deepcopy(dataSource);\n    let newFields = [];\n    for (let field of fields) {\n        let newFieldName = `${field.name}(group)`;\n        if (field.type === 'quantitative' && memberCount(dataSource, field.name).length > MIN_QUAN_MEMBER_SIZE * 2) {\n            if (!isUniformDistribution(dataSource, field.name)) {\n                groupedData = groupContinousField({\n                    dataSource: groupedData,\n                    field: field.name,\n                    newField: newFieldName,\n                    groupNumber: 8\n                });\n                newFields.push({\n                    name: newFieldName,\n                    type: 'ordinal'\n                });\n            }\n        }\n        else if ((field.type === 'ordinal' || field.type === 'nominal') && memberCount(dataSource, field.name).length > MIN_QUAN_MEMBER_SIZE) {\n            if (!isUniformDistribution(dataSource, field.name)) {\n                groupedData = groupCategoryField({\n                    dataSource: groupedData,\n                    field: field.name,\n                    newField: newFieldName,\n                    groupNumber: 8\n                });\n                newFields.push({\n                    name: newFieldName,\n                    type: field.type\n                });\n            }\n        }\n    }\n    return {\n        groupedData,\n        fields,\n        newFields\n    };\n}\n","const JOIN_SYMBOL = '_';\nconst MAGIC_NUMBER = 5;\nfunction deepcopy(data) {\n    return JSON.parse(JSON.stringify(data));\n}\nfunction isFieldCategory(dataSource, fieldName) {\n    return dataSource.every(record => {\n        return typeof record[fieldName] === 'string'\n            || typeof record[fieldName] === 'undefined'\n            || record[fieldName] === null;\n    });\n}\nfunction isFieldContinous(dataSource, fieldName) {\n    return dataSource.every(record => {\n        return typeof record[fieldName] === 'number'\n            || typeof record[fieldName] === 'undefined'\n            || record[fieldName] === null;\n    });\n}\nfunction isFieldNumeric(dataSource, fieldName) {\n    return dataSource.every(record => {\n        return !isNaN(record[fieldName])\n            || typeof record[fieldName] === 'undefined'\n            || record[fieldName] === null;\n    });\n}\nfunction isFieldTime(dataSource, fieldName) {\n    return dataSource.every(record => {\n        // todo: tmp solotion here.\n        if (Number(record[fieldName]) >= 1800 && Number(record[fieldName]) <= 2200) {\n            return true;\n        }\n        return (!isNaN(Date.parse(record[fieldName]))\n            && typeof record[fieldName] === 'string'\n            && /^[0-9]{0,4}[-/][0-9]{0,2}([-/][0-9]{0,2}$)?/.test(record[fieldName]))\n            || typeof record[fieldName] === 'undefined'\n            || record[fieldName] === null;\n    });\n}\nfunction aggregate({ dataSource, fields, bys, method = 'sum' }) {\n    let tmp = [];\n    for (let by of bys) {\n        let map = new Map();\n        for (let record of dataSource) {\n            let key = JSON.stringify(fields.map(field => record[field]));\n            if (!map.has(key)) {\n                map.set(key, 0);\n            }\n            map.set(key, map.get(key) + record[by]);\n        }\n        for (let [key, value] of map) {\n            let row = {\n                index: key,\n                [by]: value\n            };\n            let dims = JSON.parse(key);\n            for (let i = 0; i < fields.length; i++) {\n                row[fields[i]] = dims[i];\n            }\n            tmp.push(row);\n        }\n    }\n    let ans = new Map();\n    for (let record of tmp) {\n        if (!ans.has(record.index)) {\n            ans.set(record.index, {});\n        }\n        ans.set(record.index, { ...ans.get(record.index), ...record });\n    }\n    return [...ans.values()];\n}\nfunction memberCount(dataSource, field) {\n    const counter = new Map();\n    for (let row of dataSource) {\n        let member = row[field];\n        if (!counter.has(member)) {\n            counter.set(member, 0);\n        }\n        counter.set(member, counter.get(member) + 1);\n    }\n    return [...counter.entries()];\n}\nfunction groupContinousField({ dataSource, field, newField = `${field}(con-group)`, groupNumber }) {\n    // const members = memberCount(dataSource, field);\n    // todo: outlier detection\n    const values = dataSource.map(item => item[field]);\n    const max = Math.max(...values); // Number.EPSILON * ;\n    const min = Math.min(...values);\n    const segWidth = (max - min) / groupNumber;\n    let ranges = [];\n    for (let i = 0; i < groupNumber; i++) {\n        let left = min + i * segWidth;\n        let right = min + (i + 1) * segWidth;\n        ranges.push([left, right]);\n    }\n    ranges[0][0] = -Infinity;\n    ranges[ranges.length - 1][1] = Infinity;\n    let precision = Math.max(1, Math.log10(Math.abs(min)) - Math.log10(segWidth)) + 1;\n    for (let i = 0; i < dataSource.length; i++) {\n        let record = dataSource[i];\n        let rangeIndex = ranges.findIndex(r => (r[0] <= record[field] && record[field] < r[1]));\n        let range = ranges[rangeIndex];\n        if (typeof range !== 'undefined') {\n            record[newField] = `${rangeIndex + 1}:[${Number(range[0].toPrecision(precision))}, ${Number(range[1].toPrecision(precision))})`;\n        }\n        else {\n            record[newField] = 'null';\n        }\n    }\n    return dataSource;\n}\nfunction groupCategoryField({ dataSource, field, newField = `${field}(cat-group)`, groupNumber }) {\n    // auto category should obey Power law distrubution.\n    let members = memberCount(dataSource, field);\n    members.sort((a, b) => b[1] - a[1]);\n    let sum = members.map(v => v[1]);\n    groupNumber = members.length;\n    for (let i = sum.length - 2; i >= 0; i--) {\n        sum[i] = sum[i + 1] + sum[i];\n    }\n    for (let i = 0; i < members.length - 2; i++) {\n        // strict mode\n        // if (members[i][1] >= sum[i + 1] && members[i + 1][1] < sum[i + 2]) {\n        if (members[i][1] * MAGIC_NUMBER >= sum[i + 1] && members[i + 1][1] / MAGIC_NUMBER < sum[i + 2]) {\n            groupNumber = i + 2;\n            break;\n        }\n    }\n    // groupNumber = Math.max(Math.round(Math.sqrt(members.length)), groupNumber)\n    if (groupNumber === members.length) {\n        return dataSource.map(record => {\n            return {\n                ...record,\n                [newField]: record[field]\n            };\n        });\n    }\n    let set = new Set();\n    for (let i = groupNumber - 1; i < members.length; i++) {\n        set.add(members[i][0]);\n    }\n    for (let record of dataSource) {\n        if (set.has(record[field])) {\n            record[newField] = 'others';\n        }\n        else {\n            record[newField] = record[field];\n        }\n    }\n    return dataSource;\n}\n/**\n * Kullback–Leibler divergence\n * @param p1List\n * @param p2List\n *\n */\nfunction DKL(p1List, p2List) {\n    let sum = 0;\n    const len = Math.max(p1List.length, p2List.length);\n    for (let i = 0; i < len; i++) {\n        let p1 = p1List[i] || 0;\n        let p2 = p2List[i] || 0;\n        sum += p1 * Math.log2(p1 / p2);\n    }\n    return sum;\n}\nfunction isFieldUnique(dataSource, field) {\n    let set = new Set();\n    let validCount = 0;\n    let len = dataSource.length;\n    for (let i = 0; i < len; i++) {\n        if (dataSource[i][field] !== undefined && dataSource[i][field] !== null && dataSource[i][field] !== '') {\n            validCount++;\n            set.add(dataSource[i][field]);\n        }\n    }\n    if (set.size === validCount)\n        return true;\n    return false;\n}\nexport { deepcopy, memberCount, groupCategoryField, groupContinousField, aggregate, isFieldCategory, isFieldContinous, isFieldTime, isFieldNumeric, JOIN_SYMBOL, DKL, isFieldUnique };\n","import { getFieldType } from '../../univariateSummary';\nconst TESTS = {\n    boolean(x) {\n        return x === 'true' || x === 'false' || x === true || x === false;\n    },\n    integer(x) {\n        return TESTS.number(x) && (x = +x) === ~~x;\n    },\n    number(x) {\n        return !isNaN(+x);\n    },\n    date(x) {\n        return !isNaN(Date.parse(x));\n    },\n};\nfunction isValid(obj) {\n    return obj != null && obj === obj;\n}\nexport function inferDataType(values) {\n    // types to test for, in precedence order\n    const types = ['boolean', 'integer', 'number', 'date'];\n    for (let value of values) {\n        // test value against remaining types\n        for (let j = 0; j < types.length; ++j) {\n            if (isValid(value) && !TESTS[types[j]](value)) {\n                types.splice(j, 1);\n                j -= 1;\n            }\n        }\n        // if no types left, return 'string'\n        if (types.length === 0)\n            return 'string';\n    }\n    return types[0];\n}\nexport function getFieldsSummary(fieldKeys, dataSource) {\n    const fields = [];\n    const dictonary = new Map();\n    for (let f of fieldKeys) {\n        const valueMap = new Map();\n        dataSource.forEach(row => {\n            if (!valueMap.has(row[f])) {\n                valueMap.set(row[f], 0);\n            }\n            valueMap.set(row[f], valueMap.get(row[f]) + 1);\n        });\n        const dataType = inferDataType([...valueMap.keys()]);\n        const semanticType = getFieldType(dataSource, f);\n        let analyticType = 'dimension';\n        if (dataType === 'integer' || dataType === 'number')\n            analyticType = 'measure';\n        let field = {\n            key: f,\n            analyticType,\n            semanticType,\n            dataType,\n            domain: valueMap\n        };\n        fields.push(field);\n        dictonary.set(field.key, field);\n    }\n    return {\n        fields,\n        dictonary\n    };\n}\n","import { crammersV, pearsonCC } from \"../../statistics\";\nimport { getDimClusterGroups, getMeaSetsBasedOnClusterGroups } from \"../subspaces\";\nimport { CrammersVThreshold, PearsonCorrelation } from \"../config\";\nexport class DataGraph {\n    constructor(dataSource, dimensions, measures) {\n        this.DIMENSION_CORRELATION_THRESHOLD = CrammersVThreshold;\n        this.MEASURE_CORRELATION_THRESHOLD = PearsonCorrelation.strong;\n        this.dimensions = dimensions;\n        this.measures = measures;\n        this.computeDGraph(dataSource);\n        this.computeMGraph(dataSource);\n    }\n    computeGraph(dataSource, fields, cc) {\n        let matrix = fields.map((f) => fields.map(() => 0));\n        for (let i = 0; i < fields.length; i++) {\n            matrix[i][i] = 1;\n            for (let j = i + 1; j < fields.length; j++) {\n                matrix[i][j] = matrix[j][i] = cc(dataSource, fields[i], fields[j]);\n            }\n        }\n        return matrix;\n    }\n    computeDGraph(dataSource, cc = crammersV) {\n        this.DG = this.computeGraph(dataSource, this.dimensions, cc);\n        return this.DG;\n    }\n    computeMGraph(dataSource, cc = pearsonCC) {\n        this.MG = this.computeGraph(dataSource, this.measures, cc);\n        return this.MG;\n    }\n    clusterDGraph(dataSource, CORRELATION_THRESHOLD) {\n        const { dimensions, DIMENSION_CORRELATION_THRESHOLD } = this;\n        this.DClusters = getDimClusterGroups(dataSource, dimensions, CORRELATION_THRESHOLD || DIMENSION_CORRELATION_THRESHOLD);\n        return this.DClusters;\n    }\n    clusterMGraph(dataSource, CORRELATION_THRESHOLD) {\n        const { measures, MEASURE_CORRELATION_THRESHOLD } = this;\n        this.MClusters = getMeaSetsBasedOnClusterGroups(dataSource, measures, CORRELATION_THRESHOLD || MEASURE_CORRELATION_THRESHOLD);\n        return this.MClusters;\n    }\n}\n","import { IForestOutlierWorker } from '../workers/IForestOutlier';\nimport { LRTrendWorker } from '../workers/LRTrend';\nexport var DefaultIWorker;\n(function (DefaultIWorker) {\n    DefaultIWorker[\"outlier\"] = \"default_outlier\";\n    // cluster = 'default_group',\n    DefaultIWorker[\"trend\"] = \"default_trend\";\n})(DefaultIWorker || (DefaultIWorker = {}));\n/**\n * collection of insight workers. it helps to manage all the workers in a centralized way.\n */\nexport class InsightWorkerCollection {\n    constructor() {\n        this.workers = new Map();\n    }\n    register(name, iWorker) {\n        if (this.workers.has(name)) {\n            throw new Error(`There has been a worker named: ${name} already.`);\n        }\n        else {\n            this.workers.set(name, [true, iWorker]);\n        }\n    }\n    /**\n     * set a existed worker's status.\n     * @param name insight worker's name used for register.\n     * @param status whether the worker should be used.\n     */\n    enable(name, status) {\n        if (!this.workers.has(name)) {\n            throw new Error(`Intention Worker \"${name}\" does not exist.`);\n        }\n        else {\n            let iWorkerWithStatus = this.workers.get(name);\n            iWorkerWithStatus[0] = status;\n            this.workers.set(name, iWorkerWithStatus);\n        }\n    }\n    /**\n     * enumerate all enabled insight workers.\n     * @param func (what is going to be done with the given worker)\n     */\n    each(func) {\n        for (let [name, iWorker] of this.workers) {\n            if (iWorker[0]) {\n                func(iWorker[1], name);\n            }\n        }\n    }\n    static init(props = { withDefaultIWorkers: true }) {\n        const { withDefaultIWorkers = true } = props;\n        if (!InsightWorkerCollection.colletion) {\n            InsightWorkerCollection.colletion = new InsightWorkerCollection();\n            if (withDefaultIWorkers) {\n                InsightWorkerCollection.colletion.register(DefaultIWorker.outlier, IForestOutlierWorker);\n                // InsightWorkerCollection.colletion.register(DefaultIWorker.cluster, KNNClusterWorker)\n                InsightWorkerCollection.colletion.register(DefaultIWorker.trend, LRTrendWorker);\n            }\n        }\n        Object.values(DefaultIWorker).forEach(workerName => {\n            InsightWorkerCollection.colletion.enable(workerName, withDefaultIWorkers);\n        });\n        return InsightWorkerCollection.colletion;\n    }\n}\n","import { stdAggregate, stdAggregateFromCuboid } from \"../statistics\";\nconst DEFAULT_OPS = ['max', 'min', 'sum', 'mean', 'count'];\nexport class Cuboid {\n    constructor(props) {\n        const { dimensions, measures, ops = DEFAULT_OPS } = props;\n        this.dimensions = dimensions;\n        this.measures = measures;\n        this.ops = ops;\n        this.state = [];\n    }\n    setData(dataSource) {\n        this.state = stdAggregate({\n            dimensions: this.dimensions,\n            measures: this.measures,\n            ops: this.ops,\n            dataSource\n        });\n        return this.state;\n    }\n    computeFromCuboid(cuboid) {\n        const { ops, measures, dimensions } = this;\n        this.state = stdAggregateFromCuboid({\n            dimensions,\n            measures,\n            ops,\n            dataSource: cuboid.getRawState()\n        });\n        return this.state;\n    }\n    get size() {\n        return this.state.length;\n    }\n    getState(measures, operatorOfMeasures) {\n        let data = [];\n        const { state, dimensions } = this;\n        for (let row of state) {\n            let newRow = {};\n            for (let dim of dimensions) {\n                newRow[dim] = row[dim];\n            }\n            for (let i = 0; i < measures.length; i++) {\n                const mea = measures[i];\n                const op = operatorOfMeasures[i];\n                newRow[mea] = row[mea][op];\n            }\n            data.push(newRow);\n        }\n        return data;\n    }\n    getRawState() {\n        return this.state;\n    }\n}\n","// import { DataSource, Record} from \"../commonTypes\";\n// import { Cuboid } from \"./cuboid\";\nimport { Cuboid } from \"./cuboid\";\n// interface QueryNode {\n//   dimCode: string;\n//   dimValue: string\n// }\n// export type QueryPath = QueryNode[];\n// interface CuboidNode extends Map<string, CuboidNode | Record> {}\n// function contains (arr1: any[], arr2: any[]): boolean {\n//   if (arr1.length < arr2.length) return false;\n//   let sets = new Set(arr1);\n//   for (let ele of arr2) {\n//     if (!sets.has(ele)) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n// // todo query path support array\n// export class Cube {\n//   private computeCuboid: (\n//     path: QueryPath,\n//     measures: string[]\n//   ) => Promise<DataSource>;\n//   private cuboids: Map<string, Cuboid>;\n//   private inferableDistance: number;\n//   public readonly holistic: boolean;\n//   constructor(props: {\n//     computeCuboid: (path: QueryPath, measures: string[]) => Promise<DataSource>;\n//     inferableDistance?: number;\n//     holistic?\n//   }) {\n//     this.computeCuboid = props.computeCuboid;\n//     this.cuboids = new Map();\n//     this.inferableDistance = props.inferableDistance ? props.inferableDistance : Infinity;\n//     this.holistic = props.holistic || false;\n//   }\n//   /**\n//    * check whether the cuboid made of given dimensions can be infered by current diemnsions.\n//    * @param dimensions \n//    */\n//   private isCuboidInferable (dimensions: string[]): Cuboid | null {\n//     for (let cuboid of this.cuboids.values()) {\n//       let distance = cuboid.dimensions.length - dimensions.length;\n//       if (distance < this.inferableDistance && contains(cuboid.dimensions, dimensions)) {\n//         return cuboid;\n//       }\n//     }\n//     return null;\n//   }\n//   private getClosestCuboid (dimensions: string[]): Cuboid | null {\n//     let minDis = Infinity;\n//     let targetCuboid: Cuboid | null = null;\n//     for (let cuboid of this.cuboids.values()) {\n//       let distance = cuboid.dimensions.length - dimensions.length;\n//       if (distance < this.inferableDistance && contains(cuboid.dimensions, dimensions)) {\n//         if (distance < minDis) {\n//           minDis = distance;\n//           targetCuboid = cuboid;\n//         }\n//       }\n//     }\n//     return targetCuboid;\n//   }\n//   public async getCuboid(\n//     dimSet: string[],\n//     measures: string[]\n//   ): Promise<Cuboid> {\n//     const key = dimSet.join(\";\");\n//     if (this.holistic) {\n//       if (this.cuboids.has(key)) {\n//         return this.cuboids.get(key);\n//       }\n//     } else {\n//       let inferedCuboid = this.isCuboidInferable(dimSet);\n//       if (inferedCuboid) {\n//         return inferedCuboid;\n//       }\n//     }\n//     const path: QueryPath = dimSet.map((d) => {\n//       return {\n//         dimCode: d,\n//         dimValue: \"*\",\n//       };\n//     });\n//     const cuboidDataSource = await this.computeCuboid(path, measures);\n//     const cuboid = new Cuboid({\n//       dimensions: dimSet,\n//       dataSource: cuboidDataSource,\n//     });\n//     this.cuboids.set(key, cuboid);\n//     return cuboid;\n//   }\n// }\n// // todo\n// // 至少返回的因该是一个DataFrame，而不应该是当前cuboid粒度的明细。\n// // case: 第一个请求的cuboid是明细粒度，则\nconst CUBOID_KEY_SPLITOR = '_join_';\nconst DEFAULT_OPS = [\"max\", \"min\", \"sum\", \"mean\", \"count\"];\nexport class Cube {\n    constructor(props) {\n        const { dimensions, measures, dataSource, ops = DEFAULT_OPS } = props;\n        this.dimensions = dimensions;\n        this.measures = measures;\n        this.dataSource = dataSource;\n        this.ops = ops;\n        this.dimOrder = new Map();\n        dimensions.forEach((dim, i) => {\n            this.dimOrder.set(dim, i);\n        });\n        this.cuboids = new Map();\n    }\n    // public contains(dimensions: string[]): boolean {\n    //     if (dimensions.length > )\n    // }\n    sortDimension(dimensions) {\n        const orderedDims = [...dimensions];\n        orderedDims.sort((d1, d2) => {\n            return this.dimOrder.get(d1) - this.dimOrder.get(d2);\n        });\n        return orderedDims;\n    }\n    getCuboid(dimensions) {\n        const orderedDims = this.sortDimension(dimensions);\n        const dimKey = orderedDims.join(CUBOID_KEY_SPLITOR);\n        // this.cuboids.get(dimKey)\n        if (this.cuboids.has(dimKey)) {\n            // console.log('target cached!!!')\n            return this.cuboids.get(dimKey);\n        }\n        // does not get cuboid\n        let currDimSet = new Set(dimensions);\n        const existingParentKeys = [];\n        const nullParentKeys = [];\n        for (let dim of this.dimensions) {\n            if (!currDimSet.has(dim)) {\n                // use insert O(n) instead of sort O(nlogn)\n                const parentDimensions = this.sortDimension([...orderedDims, dim]);\n                const parentKey = parentDimensions.join(CUBOID_KEY_SPLITOR);\n                if (this.cuboids.has(parentKey))\n                    existingParentKeys.push(parentKey);\n                else {\n                    nullParentKeys.push(parentKey);\n                }\n            }\n        }\n        let minCost = Infinity;\n        let minCuboidKey = this.dimensions.join(CUBOID_KEY_SPLITOR);\n        if (existingParentKeys.length > 0) {\n            for (let key of existingParentKeys) {\n                const pCuboid = this.cuboids.get(key);\n                if (pCuboid.size < minCost) {\n                    minCost = pCuboid.size;\n                    minCuboidKey = key;\n                }\n            }\n        }\n        else if (nullParentKeys.length > 0) {\n            minCuboidKey = nullParentKeys[0];\n        }\n        const parentCuboid = this.getCuboid(minCuboidKey.split(CUBOID_KEY_SPLITOR));\n        // console.log('based on parents cube: ', minCuboidKey)\n        // todo: 递归构建相关的cuboid，可能要依赖field dict来判断递归的路径\n        let cuboid = new Cuboid({\n            dimensions,\n            measures: this.measures,\n            ops: this.ops,\n        });\n        // cuboid.setData(parentCuboid.state);\n        cuboid.computeFromCuboid(parentCuboid);\n        this.cuboids.set(dimKey, cuboid);\n        return cuboid;\n    }\n    buildBaseCuboid() {\n        let baseCuboid = new Cuboid({\n            dimensions: this.dimensions,\n            measures: this.measures,\n            ops: this.ops\n        });\n        baseCuboid.setData(this.dataSource);\n        this.cuboids.set(this.dimensions.join(CUBOID_KEY_SPLITOR), baseCuboid);\n        return baseCuboid;\n    }\n    get baseCuboid() {\n        const baseKey = this.dimensions.join(CUBOID_KEY_SPLITOR);\n        if (!this.cuboids.has(baseKey)) {\n            return this.buildBaseCuboid();\n        }\n        return this.cuboids.get(baseKey);\n    }\n}\n","import { Outier } from \"../../ml\";\nexport const IForestOutlierWorker = async (aggData, dimensions, measures) => {\n    let iForest = new Outier.IsolationForest([], measures, aggData);\n    iForest.buildIsolationForest();\n    let scoreList = iForest.estimateOutierScore();\n    let maxIndex = 0;\n    let score = 0;\n    for (let i = 0; i < scoreList.length; i++) {\n        if (scoreList[i] > score) {\n            score = scoreList[i];\n            maxIndex = i;\n        }\n    }\n    let des = {};\n    dimensions.concat(measures).forEach((mea) => {\n        des[mea] = aggData[maxIndex][mea];\n    });\n    return {\n        dimensions,\n        measures,\n        significance: score,\n        description: des,\n    };\n};\n","import { oneDLinearRegression } from '../../statistics/index';\nexport const LRTrendWorker = async (aggData, dimensions, measures) => {\n    if (dimensions.length !== 1)\n        return null;\n    let orderedData = [...aggData];\n    orderedData.sort((a, b) => {\n        if (a[dimensions[0]] > b[dimensions[0]])\n            return 1;\n        if (a[dimensions[0]] === b[dimensions[0]])\n            return 0;\n        else\n            return -1;\n    });\n    let sig = 0;\n    for (let mea of measures) {\n        let linearModel = new oneDLinearRegression(orderedData, dimensions[0], mea);\n        linearModel.normalizeDimensions(dimensions);\n        sig += linearModel.significance();\n    }\n    sig /= measures.length;\n    return {\n        dimensions,\n        measures,\n        significance: sig\n    };\n};\n","const geomTypes = {\n    interval: [0, 10],\n    line: [11, Infinity],\n    area: [11, Infinity],\n    point: [0, 1000],\n    path: [0, 100],\n    density: [1001, Infinity],\n};\nfunction getVisualElements() {\n    return {\n        position: 2,\n        color: 1,\n        size: 1,\n        shape: 1,\n        opacity: 1,\n        facets: 2,\n        page: 1,\n        filter: 1,\n        highFacets: 1000\n    };\n}\nfunction findBestField(type, fieldRankList) {\n    for (let i = fieldRankList.length - 1; i >= 0; i--) {\n        if (fieldRankList[i].semanticType === type && !fieldRankList[i].choosen) {\n            return fieldRankList[i];\n        }\n    }\n    return false;\n}\nexport function encoding(fields) {\n    let spec = {};\n    let visualElements = getVisualElements();\n    let fieldRankList = fields.map((field) => {\n        return {\n            ...field,\n            choosen: false,\n        };\n    });\n    const priority = [\n        [\"quantitative\", [\"position\", \"size\", \"color\", \"highFacets\", \"opacity\", \"page\", \"filter\"]],\n        [\"temporal\", [\"position\", \"page\", \"filter\"]],\n        [\"ordinal\", [\"position\", \"color\", \"opacity\", \"facets\", \"size\", \"page\", \"filter\", \"highFacets\"]],\n        [\"nominal\", [\"position\", \"color\", \"facets\", \"shape\", \"page\", \"filter\", \"hightFacets\"]],\n    ];\n    let fieldLeft = fieldRankList.length;\n    for (let typeIndex = 0; typeIndex < priority.length && fieldLeft > 0; typeIndex++) {\n        let type = priority[typeIndex][0];\n        let channelList = priority[typeIndex][1];\n        for (let i = 0; i < channelList.length && fieldLeft > 0; i++) {\n            let channel = channelList[i];\n            let field;\n            while (visualElements[channel] > 0 && (field = findBestField(type, fieldRankList))) {\n                if (typeof spec[channel] === \"undefined\") {\n                    spec[channel] = [];\n                }\n                spec[channel].push(field.key);\n                visualElements[channel]--;\n                fieldLeft--;\n                field.choosen = true;\n            }\n        }\n    }\n    return spec;\n}\nexport function specification(fields, dataView) {\n    let rankedFields = fields.sort((a, b) => a.impurity - b.impurity);\n    let spec = encoding(rankedFields);\n    const dimensions = new Set(fields.filter(f => f.analyticType === 'dimension').map(f => f.key));\n    const measures = new Set(fields.filter(f => f.analyticType === 'measure').map(f => f.key));\n    // todo: design a better rule for choosing geom type.\n    if (spec.position && spec.position.length === 2) {\n        if ((dimensions.has(spec.position[0]) && measures.has(spec.position[1])) ||\n            (dimensions.has(spec.position[1]) && measures.has(spec.position[0]))) {\n            const dimIndex = dimensions.has(spec.position[0]) ? 0 : 1;\n            const dim = spec.position[dimIndex];\n            const mea = spec.position[(dimIndex + 1) % 2];\n            spec.position = [dim, mea];\n            const originDimField = fields.find((f) => f.key === dim);\n            const dimCardinality = originDimField ? originDimField.domain.size : 0;\n            spec.geomType = [\"interval\", \"line\", \"area\"].filter((geom) => {\n                return dimCardinality >= geomTypes[geom][0] && dimCardinality <= geomTypes[geom][1];\n            });\n            if (originDimField.semanticType === 'nominal') {\n                spec.geomType = [\"interval\"];\n            }\n        }\n        else {\n            // ['point', 'path', 'heatmap']\n            spec.geomType = [\"point\", \"density\"].filter((geom) => {\n                return dataView.length >= geomTypes[geom][0] && dataView.length <= geomTypes[geom][1];\n            });\n        }\n    }\n    return { schema: spec, dataView };\n}\n","import { getFieldsSummary } from \"./fieldSummary\";\nimport { DataGraph } from \"./dataGraph\";\nimport { Cube } from \"../../cube\";\nimport { getCombination, normalize, linearMapPositive, entropy } from \"../../statistics\";\nimport { InsightWorkerCollection } from \"./workerCollection\";\nimport { specification } from './specification/encoding';\nexport class VIEngine {\n    constructor() {\n        /**\n        * number of dimensions appears in a view.\n        */\n        this.DIMENSION_NUM_IN_VIEW = {\n            MAX: 3,\n            MIN: 1,\n        };\n        /**\n        * number of measures appears in a view.\n        */\n        this.MEASURE_NUM_IN_VIEW = {\n            MAX: 3,\n            MIN: 1,\n        };\n        this.cube = null;\n        this.aggregators = [\"max\", \"min\", \"sum\", \"mean\", \"count\"];\n        this.workerCollection = InsightWorkerCollection.init();\n    }\n    setDataSource(dataSource) {\n        this.dataSource = dataSource;\n        return this;\n    }\n    get fields() {\n        return this._fields;\n    }\n    set fields(fields) {\n        this._fields = fields;\n        this._dimensions = fields.filter((f) => f.analyticType === \"dimension\").map((f) => f.key);\n        this._measures = fields.filter((f) => f.analyticType === \"measure\").map((f) => f.key);\n    }\n    get dimensions() {\n        return this._dimensions;\n    }\n    // public set dimensions (dimensions: string[]) {\n    //     this._dimensions = dimensions;\n    //     this._fields.forEach(f => {\n    //         if (f.analyticType !== 'dimension' && dimensions.includes(f.key)) {\n    //             f.analyticType = 'dimension';\n    //         }\n    //     })\n    // }\n    setDimensions(dimensions) {\n        this._dimensions = dimensions;\n        this._fields.forEach((f) => {\n            if (f.analyticType !== \"dimension\" && dimensions.includes(f.key)) {\n                f.analyticType = \"dimension\";\n            }\n        });\n        return this;\n    }\n    get measures() {\n        return this._measures;\n    }\n    // public set measures (measures: string[]) {\n    //     this._measures = measures;\n    //     this._fields.forEach(f => {\n    //         if (f.analyticType !== 'measure' && measures.includes(f.key)) {\n    //             f.analyticType = 'measure';\n    //         }\n    //     })\n    // }\n    setMeasures(measures) {\n        this._measures = measures;\n        this._fields.forEach((f) => {\n            if (f.analyticType !== \"measure\" && measures.includes(f.key)) {\n                f.analyticType = \"measure\";\n            }\n        });\n        return this;\n    }\n    setFieldKeys(keys) {\n        this._fieldKeys = keys;\n        return this;\n    }\n    buildfieldsSummary() {\n        const { fields, dictonary } = getFieldsSummary(this._fieldKeys, this.dataSource);\n        if (this.dimensions && this.measures) {\n            fields.forEach((f) => {\n                if (this.dimensions.includes(f.key)) {\n                    f.analyticType = \"dimension\";\n                }\n                else {\n                    f.analyticType = \"measure\";\n                }\n            });\n        }\n        this.fields = fields;\n        this.fieldDictonary = dictonary;\n        return this;\n    }\n    buildGraph() {\n        this.dataGraph = new DataGraph(this.dataSource, this.dimensions, this.measures);\n        return this;\n    }\n    buildCube() {\n        const { measures, dataSource, dataGraph, dimensions, aggregators } = this;\n        const cube = new Cube({\n            dimensions,\n            measures,\n            dataSource,\n            ops: aggregators,\n        });\n        cube.buildBaseCuboid();\n        dataGraph.DClusters.forEach((group) => {\n            cube.getCuboid(group);\n        });\n        this.cube = cube;\n        return this;\n    }\n    clusterFields() {\n        this.dataGraph.clusterDGraph(this.dataSource);\n        this.dataGraph.clusterMGraph(this.dataSource);\n        return this;\n    }\n    static getCombinationFromClusterGroups(groups, limitSize) {\n        let fieldSets = [];\n        for (let group of groups) {\n            let combineFieldSet = getCombination(group, limitSize.MIN, limitSize.MAX);\n            fieldSets.push(...combineFieldSet);\n        }\n        return fieldSets;\n    }\n    buildSubspaces(DIMENSION_NUM_IN_VIEW = this.DIMENSION_NUM_IN_VIEW, MEASURE_NUM_IN_VIEW = this.MEASURE_NUM_IN_VIEW) {\n        // todo: design when to compute clusters.\n        const dimensionGroups = this.dataGraph.DClusters;\n        const measureGroups = this.dataGraph.MClusters;\n        // const dimensionSets = VIEngine.getCombinationFromClusterGroups(\n        //     dimensionGroups,\n        //     MAX_DIMENSION_NUM_IN_VIEW\n        // );\n        const measureSets = VIEngine.getCombinationFromClusterGroups(measureGroups, MEASURE_NUM_IN_VIEW);\n        // const subspaces = crossGroups(dimensionSets, measureSets);\n        const subspaces = [];\n        for (let group of dimensionGroups) {\n            const dimSets = getCombination(group, DIMENSION_NUM_IN_VIEW.MIN, DIMENSION_NUM_IN_VIEW.MAX);\n            for (let dims of dimSets) {\n                for (let meas of measureSets) {\n                    subspaces.push({\n                        dimensions: dims,\n                        measures: meas,\n                    });\n                }\n            }\n        }\n        this.subSpaces = subspaces;\n        return this;\n    }\n    static getSpaceImpurity(dataSource, dimensions, measures) {\n        let imp = 0;\n        for (let mea of measures) {\n            let fL = dataSource.map((r) => r[mea]);\n            let pL = normalize(linearMapPositive(fL));\n            let value = entropy(pL);\n            imp += value;\n        }\n        imp /= measures.length;\n        return imp;\n    }\n    async insightExtraction(viewSpaces = this.subSpaces) {\n        const context = this;\n        let ansSpace = [];\n        for (let space of viewSpaces) {\n            //    const t1 = performance.now();\n            const { dimensions, measures } = space;\n            // console.log(\"worker key\", key, this.cubePool.has(key));\n            let cube = context.cube;\n            let cuboid = cube.getCuboid(dimensions);\n            const aggData = cuboid.getState(measures, measures.map(() => 'sum'));\n            //    const t2 = performance.now();\n            const imp = VIEngine.getSpaceImpurity(aggData, dimensions, measures);\n            const jobPool = [];\n            this.workerCollection.each((iWorker, name) => {\n                // tslint:disable-next-line: no-shadowed-variable\n                const job = async (iWorker, name) => {\n                    try {\n                        let iSpace = await iWorker(aggData, dimensions, measures, context.fieldDictonary, context);\n                        if (iSpace !== null) {\n                            iSpace.type = name;\n                            iSpace.impurity = imp;\n                            ansSpace.push(iSpace);\n                        }\n                    }\n                    catch (error) {\n                        console.error(\"worker failed\", { dimensions, measures, aggData }, error);\n                    }\n                };\n                jobPool.push(job(iWorker, name));\n            });\n            await Promise.all(jobPool);\n            //    const t3 = performance.now();\n            //    const per = Math.round(((t3 - t2) / (t3 - t1)) * 100);\n        }\n        context.insightSpaces = ansSpace;\n        return ansSpace;\n    }\n    // todo:\n    setInsightScores() {\n        const insightSpaces = this.insightSpaces;\n        insightSpaces.forEach(space => {\n            space.score = space.impurity / space.significance;\n        });\n        return this;\n    }\n    getFieldInfoInVis(insightSpace) {\n        const fieldsInVis = [];\n        const cube = this.cube;\n        const fieldDictonary = this.fieldDictonary;\n        const { dimensions, measures } = insightSpace;\n        dimensions.forEach((dim) => {\n            const aggData = cube.getCuboid([dim]).getState(measures, measures.map(() => 'sum'));\n            let imp = 0;\n            measures.forEach((mea) => {\n                let fL = aggData.map((r) => r[mea]);\n                let pL = normalize(linearMapPositive(fL));\n                let value = entropy(pL);\n                imp += value;\n            });\n            fieldsInVis.push({\n                ...fieldDictonary.get(dim),\n                impurity: imp,\n            });\n        });\n        const dAggData = cube.getCuboid(dimensions).getState(measures, measures.map(() => 'sum'));\n        measures.forEach((mea) => {\n            let fL = dAggData.map((r) => r[mea]);\n            let pL = normalize(linearMapPositive(fL));\n            let value = entropy(pL);\n            fieldsInVis.push({\n                ...fieldDictonary.get(mea),\n                impurity: value,\n            });\n        });\n        return fieldsInVis;\n    }\n    specification(insightSpace) {\n        const { dimensions, measures } = insightSpace;\n        const fieldsInVis = this.getFieldInfoInVis(insightSpace);\n        const dataView = this.cube.getCuboid(dimensions).getState(measures, measures.map(() => 'sum'));\n        return specification(fieldsInVis, dataView);\n    }\n}\n","/**\n * \n * @param {task} task is a function \n */\nexport function timer (task) {\n  return function (e) {\n    let startTime = new Date().getTime();\n    try {\n      task(e);\n    } finally {\n      let cost = new Date().getTime() - startTime;\n      console.log(`Task [${task.name}] cost ${cost} ms.`)\n    }\n  }\n}","/* eslint no-restricted-globals: 0 */\nimport { Insight } from 'visual-insights'\nimport { timer } from './timer';\n\nconst combineFields = (e) => {\n  try {\n    const { dataSource, dimensions, measures, operator, topKPercent = 1 } = e.data;\n    let impurityList = Insight.insightExtraction(dataSource, dimensions, measures, operator).map(dimReport => {\n      let sum = 0;\n      for (let key in dimReport[1]) {\n        sum += dimReport[1][key];\n      }\n      return {\n        ...dimReport,\n        score: sum\n      }\n    });\n    impurityList.sort((a, b) => a.score - b.score);\n    let end = Math.round(topKPercent * impurityList.length)\n    self.postMessage({\n      success: true,\n      data: impurityList.slice(0, end).map(view => {\n        return {\n          score: view.score,\n          dimensions: view[0],\n          measures: measures.map(mea => {\n            return {\n              name: mea,\n              value: view[1][mea]\n            }\n          }),\n          correlationMatrix: view[2]\n        }\n      })\n    })\n  } catch (error) {\n    self.postMessage({\n      success: false,\n      message: error.toString()\n    })\n  }\n}\n\nself.addEventListener('message', timer(combineFields), false);"],"sourceRoot":""}