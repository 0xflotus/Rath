{"version":3,"sources":["workers/dashboard.worker.js","workers/cluster.worker.js","workers/combineFields.worker.js","workers/fieldsSummary.worker.js","workers/groupFields.worker.js","workers/dev.worker.js","assets/rath.png","assets/rath-glasses.png","service.ts","actions.ts","state.tsx","utils/fileParser.ts","utils/transform.ts","utils/useComposeState.tsx","components/preference.tsx","queries/featureVis.ts","queries/targetVis.ts","queries/baseVis.ts","queries/index.ts","visBuilder/vegaBase.tsx","../../visual-insights/build/esm/utils/common.js","../../visual-insights/build/esm/specification.js","../../visual-insights/build/esm/ml/cluster/kruskal.js","../../visual-insights/build/esm/sampling/index.js","../../visual-insights/build/esm/cleaner/index.js","plugins/visSummary/index.tsx","plugins/visSummary/description.tsx","pages/gallery/association/digDimension.tsx","pages/gallery/association/index.tsx","pages/gallery/search/index.tsx","pages/gallery/index.tsx","pages/notebook/distributionChart.tsx","pages/notebook/fieldAnalysis.tsx","pages/notebook/subspaces.tsx","pages/notebook/cluster.tsx","pages/notebook/index.tsx","components/table.tsx","components/fieldConfig.tsx","pages/dataSource/clean.ts","pages/dataSource/useDataSource.tsx","utils/deepcopy.ts","pages/dataSource/index.tsx","pages/dashBoard/indicatorCard.tsx","components/react-vega.tsx","pages/dashBoard/combinedChart.tsx","pages/dashBoard/index.tsx","components/simpleTick.tsx","components/radarChart.tsx","pages/dev/index.tsx","components/userSettings.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","Worker","__webpack_public_path__","server","workerService","worker","data","Promise","resolve","reject","postMessage","onmessage","e","onerror","success","message","error","getFieldsSummaryService","dataSource","fields","useServer","a","fieldSummaryList","fetch","method","headers","body","JSON","stringify","res","json","result","Error","console","fieldsSummaryWorker","terminate","getGroupFieldsService","ans","groupedData","newFields","groupFieldsWorker","combineFieldsService","dimensions","measures","operator","subspaceList","combineFieldsWorker","clusterMeasures","maxGroupNumber","combinedSpaces","viewSpaces","spaces","map","v","i","index","clusterWorker","generateDashBoard","subspaces","dashBoardList","dashBoardGeneratorWorker","ansSpace","InsightViewWorker","univariateSummary","select","updateState","params","state","filter","field","type","name","f","originSummary","fieldWithTypeList","includes","fieldName","groupedResult","newBIFields","groupedField","find","newDimensions","groupedSummary","draft","cookedDataSource","summary","origin","grouped","loading","concat","subspaceSearch","subspaceSearching","orderedDimensions","d","target","g","entropy","Infinity","sort","b","cookedDimensions","cookedMeasures","selectedDimensions","slice","Math","round","length","topK","dimensionSize","getViewSpaces","space","matrix","correlationMatrix","log","extractInsights","gallery","univariateResult","actions","getDashBoard","dashBoard","setAutoFreeze","initState","beCool","currentPage","rawData","subspacePercentSize","GloalStateContext","createContext","GlobalStateProvider","children","useState","setState","stateHolder","useRef","getters","dimScores","useMemo","maxEntropy","useGetters","useCallback","stateUpdater","nextState","produce","draftState","current","dispatch","actionName","Provider","value","useGlobalState","useContext","csvLoader","file","Papa","parse","complete","results","row","record","forEach","jsonLoader","reader","FileReader","readAsText","onload","ev","transNumber","num","isNaN","Number","useComposeState","checkboxStyles","root","marginTop","aggregationList","key","text","PreferencePanel","props","show","onUpdateConfig","onClose","config","aggregator","setAggregator","defaultAggregated","setDefaultAggregated","defaultStack","setDefaultStack","useEffect","Panel","isOpen","PanelType","smallFixedFar","onDismiss","headerText","closeButtonAriaLabel","onRenderFooterContent","PrimaryButton","onClick","Label","Stack","verticalFill","tokens","childrenGap","padding","ComboBox","selectedKey","label","allowFreeform","autoComplete","options","onChange","option","Checkbox","styles","checked","isChecked","featureVis","query","fieldTypeDict","getFieldSemanticType","semanticType","shouldFieldAggregate","geomType","fieldType","getFieldType","markType","geomTypeMap","xType","position","yType","colorType","color","xAgg","yAgg","adjustColorField","opacity","size","autosize","mark","selection","sl","encodings","undefined","encoding","x","bin","maxbins","aggregate","y","column","facets","shape","targetVis","repeat","highFacets","columns","spec","interval","line","point","density","BaseChart","schema","fieldFeatures","container","aggregatedMeasures","mea","op","as","table","asFields","page","adjustField","aggField","targetField","fieldMap","width","values","basicSpec","tooltip","channel","stack","transform","groupby","dim","Boolean","sliderSpec","brush","vconcat","baseVis","embed","ref","deepcopy","memberCount","counter","Map","member","has","set","get","entries","geomTypes","area","path","findBestField","fieldRankList","choosen","aestheticMapping","dimFields","visualElements","priority","fieldLeft","typeIndex","channelList","push","specification","aggData","dimIndex","dimMembers","geom","turnAdjMatrix2List","edges","j","abs","parents","n","union","n1","n2","p1","p2","findWithEffect","sizes","unionWithEffect","size1","size2","kruskalMST","groupNumber","threshold","edgesInMST","m","groups","inCutEdge","edge","Set","cluster","groupMaxSize","limitSize","kruskalWithLimitSize","kruskal","meas","meaIndex","reservoirSampling","sampleSpace","len","pos","random","uniformSampling","sampleIndexes","seed","linearCongruentialGenerator","floor","dropNullColumn","keepFields","finalFields","dropNull","keep","every","isFieldNumeric","toString","isNullValue","useMode","fieldNames","countMap","modeMap","keys","members","max","maxPos","newDataSource","simpleClean","StoryTeller","spaceList","isTeachingBubbleVisible","setIsTeachingBubbleVisible","sortedFieldsScores","mostInfluencedDimension","sp","some","bestMeasure","measuresInView","min","minPos","countDiffField","join","DefaultButton","id","TeachingBubble","calloutProps","directionalHint","DirectionalHint","bottomCenter","isWide","hasCloseIcon","headline","source","VisDescription","measuresRelatedScore","measures1","measures2","meaSet","meaSet1","meaSet2","meaVec1","meaVec2","score","sqrt","useDigDimension","interestedViewSpace","fieldScores","relatedSpaces","subDim","rankedRelatedSpaces","measureSimilarity","relatedScore","spaceFieldScores","Association","digDimensionProps","onSelectView","visualConfig","relatedCharts","className","view","currentSpace","dimensions1","dimensions2","dim1","style","border","margin","overflow","fontSize","horizontal","IconButton","iconProps","iconName","title","VisCard","styled","div","PageLinkButton","SearchPage","targetViewSpaces","setTargetViewSpaces","fuse","Fuse","setCurrentPage","maxPageNumber","ceil","minVisPage","maxVisPage","itemRange","visPageRange","Array","gotoPage","lastPage","p","nextPage","usePageController","specList","SearchBox","placeholder","onSearch","newValue","search","underlined","pivotList","itemKey","Gallery","pivotIndex","setPivotIndex","insightBoard","fieldConfig","configPanel","dataConfig","pageStatus","setPageStatus","showAssociation","setShowAssociation","setVisualConfig","setViewSpaces","dataView","setDataView","pageNo","then","viewState","subspace","paddingTop","Pivot","onLinkClick","item","pivot","PivotItem","ProgressIndicator","description","marginBottom","ariaLabel","dir","SpinButton","step","labelPosition","Position","end","onValidate","onIncrement","onDecrement","incrementButtonAriaLabel","decrementButtonAriaLabel","allowDisabledFocus","findIndex","DistributionChart","chart","hasIndex","test","memberName","exec","left","sortBy","background","height","axis","minWidth","maxWidth","getIconNameByFieldType","FieldAnalsis","entropyRange","originEntropy","s","onRenderCompactCard","toFixed","distribution","onRenderExpandedCard","DetailsList","compact","items","selectionMode","SelectionMode","none","onRenderItemColumn","expandingCardProps","renderData","compactCardHeight","expandedCardHeight","fieldContent","bgColor","Icon","range","chroma","scale","domain","rgb","bgColorStr","fontColorStr","HoverCard","expandedCardOpenDelay","instantOpenOnClick","boxShadow","backgroundColor","encodeArr","arr","Subspaces","onSpaceChange","curIndex","setCurIndex","spaceChart","relationChart","targetSpace","measureName","measureValue","on","reverse","condition","addEventListener","datum","correlation","scheme","ClusterBoard","adjMatrix","onFocusGroup","clusterResult","Cluster","kruskalWithFullMST","treeData","nodes","group","NoteBook","isAggregated","setIsAggregated","clusterState","setClusterState","setMeasuresInView","usedSubspaceList","measInView","Slider","disabled","valueFormat","showValue","Toggle","defaultChecked","onText","offText","DataTable","maxHeight","FieldPanel","setFields","updateFieldType","cleanMethodList","useDataSource","cleanMethod","Transform","preparedData","Cleaner","cleanData","SampleKey","SampleOptions","reservoir","DataSourceBoard","setCleanMethod","fixUnicodeField","setFixUnicodeField","sampleMethod","setSampleMethod","sampleSize","setSampleSize","dataSetting","fileEle","labelId","useId","files","tmpFields","FileLoader","Sampling","Object","fixedRecord","commandBarList","click","onExtractInsights","Callout","role","gapSpace","setInitialFocus","hidden","required","ChoiceGroup","defaultSelectedKey","ariaLabelledBy","val","multiple","accept","display","CommandBar","overflowButtonProps","fontWeight","Card","IndicatorCard","datalib","parts","split","replace","numberWithCommas","ReactVega","signalHandler","setView","addSignalListener","removeSignalListener","change","vega","changeset","remove","insert","resize","runAsync","CombinedChart","globalFilters","setGlobalFilters","chartStateList","setChartStateList","chartSpecList","board","dataFields","specIndex","vegaSpec","vsourceList","filters","isRange","ds","overflowY","float","minHeight","list","nextList","DashBoardPage","dashBoardIndex","setDashBoardIndex","Separator","overflowX","SimpleTick","calculate","layer","RadarChart","keyField","valueField","viewData","category","ruleData","contains","signals","update","scales","signal","zero","nice","domainMin","encode","enter","marks","zindex","from","facet","interpolate","stroke","strokeWidth","fill","fillOpacity","align","baseline","x2","y2","Tag","DashBoard","ColorMap","arrEqual","arr1","arr2","DevPage","insightViewSpace","setInsightViewSpace","sigThreshold","setSigThreshold","setLoading","chartIndex","setChartIndex","viewSpaceList","significance","relatedViews","getInsightViewSpace","start","UserSettings","setShow","ActionButton","bottomLeftEdge","App","withGlasses","pivotKey","href","src","RathCoolLogo","RathLogo","alt","headersOnly","window","location","hostname","match","initializeIcons","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f5258e0.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"073a512bec9d62518d2c.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"aba8a4d8cd652cee6caf.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"f808b4c276283cfce6c8.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"d19b89e3de65e9888604.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"f3bc8a1633357a2c2611.worker.js\");\n};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"ae30e4247e69fb8a77a4.worker.js\");\n};","module.exports = __webpack_public_path__ + \"static/media/rath.57f336a0.png\";","module.exports = __webpack_public_path__ + \"static/media/rath-glasses.4a15bb11.png\";","import { DataSource,  Field, FieldType, OperatorType } from './global';\n/* eslint import/no-webpack-loader-syntax:0 */\n// @ts-ignore\n// eslint-disable-next-line\nimport dashBoardGeneratorWorker from './workers/dashboard.worker';\n/* eslint import/no-webpack-loader-syntax:0 */\n// @ts-ignore\n// eslint-disable-next-line\nimport clusterWorker from './workers/cluster.worker';\n/* eslint import/no-webpack-loader-syntax:0 */\n// @ts-ignore\n// eslint-disable-next-line\nimport combineFieldsWorker from './workers/combineFields.worker';\n/* eslint import/no-webpack-loader-syntax:0 */\n// @ts-ignore\n// eslint-disable-next-line\nimport fieldsSummaryWorker from './workers/fieldsSummary.worker';\n/* eslint import/no-webpack-loader-syntax:0 */\n// @ts-ignore\n// eslint-disable-next-line\nimport groupFieldsWorker from './workers/groupFields.worker';\n/* eslint import/no-webpack-loader-syntax:0 */\n// @ts-ignore\n// eslint-disable-next-line\nimport InsightViewWorker from './workers/dev.worker';\nimport { InsightSpace } from 'visual-insights/build/esm/insights/dev';\n\nlet server = '//lobay.moe:8443';\n\nif (process.env.NODE_ENV !== 'production') {\n  console.log('using dev server');\n  server = '//localhost:8000';\n}\n\ninterface SuccessResult<T> {\n  success: true;\n  data: T;\n}\ninterface FailResult<T> {\n  success: false;\n  message: string;\n}\n\ntype Result<T> = SuccessResult<T> | FailResult<T>;\n\nfunction workerService<T, R> (worker: Worker, data: R): Promise<Result<T>> {\n  return new Promise<Result<T>>((resolve, reject) => {\n    worker.postMessage(data);\n    worker.onmessage = (e: MessageEvent) => {\n      resolve(e.data)\n    }\n    worker.onerror = (e: ErrorEvent) => {\n      reject({\n        success: false,\n        message: e.error\n      })\n    }\n  })\n}\n\nexport interface View {\n  groups: string[][];\n  detail: [string[], any, number[][]];\n  score: number;\n}\n\n/**\n * statistic description for a field\n */\nexport interface FieldSummary {\n  fieldName: string;\n  entropy: number;\n  maxEntropy: number;\n  distribution: Array<{ memberName: string; count: number }>\n  type: FieldType\n}\nexport async function getFieldsSummaryService (dataSource: DataSource, fields: string[] | Field[], useServer?: boolean): Promise<FieldSummary[]> {\n  let fieldSummaryList: FieldSummary[] = [];\n  if (useServer) {\n    try {\n      const res = await fetch(server + '/api/service/fieldsSummary', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          dataSource,\n          fields\n        })\n      })\n      const result: Result<FieldSummary[]> = await res.json();\n      if (result.success === true) {\n        fieldSummaryList = result.data;\n      } else {\n        throw new Error('[fields summary failed]' + result.message)\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  } else {\n    const worker = new fieldsSummaryWorker();\n    const result = await workerService<FieldSummary[], any>(worker, { dataSource, fields });\n    if (result.success === true) {\n      fieldSummaryList = result.data;\n    } else {\n      throw new Error('[fields summary failed]' + result.message)\n    }\n    worker.terminate()\n  }\n  return fieldSummaryList\n}\n\ninterface GroupFieldsResponse {\n  groupedData: DataSource;\n  newFields: Field[];\n  fields: Field[];\n}\nexport async function getGroupFieldsService (dataSource: DataSource, fields: Field[], useServer?: boolean): Promise<GroupFieldsResponse> {\n  let ans: GroupFieldsResponse = {\n    groupedData: [],\n    newFields: [],\n    fields: []\n  };\n  if (useServer) {\n    try {\n      const res = await fetch(server + '/api/service/groupFields', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          dataSource,\n          fields\n        })\n      })\n      const result: Result<GroupFieldsResponse> = await res.json();\n      if (result.success === true) {\n        ans = result.data;\n      } else {\n        throw new Error('[group fields failed]' + result.message)\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  } else {\n    const worker = new groupFieldsWorker();\n    const result = await workerService<GroupFieldsResponse, any>(worker, { dataSource, fields });\n    if (result.success === true) {\n      ans = result.data;\n    } else {\n      throw new Error('[group fields failed]' + result.message)\n    }\n    worker.terminate();\n  }\n  return ans;\n}\n\nexport interface Subspace {\n  score: number;\n  dimensions: string[];\n  measures: Array<{name: string; value: number}>;\n  correlationMatrix: number[][];\n}\nexport async function combineFieldsService (dataSource: DataSource, dimensions: string[], measures: string[], operator: OperatorType, useServer?: boolean): Promise<Subspace[]> {\n  let subspaceList: Subspace[] = [];\n  if (useServer) {\n    try {\n      const res = await fetch(server + '/api/service/combineFields', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          dataSource,\n          dimensions,\n          measures,\n          operator\n        })\n      })\n      const result: Result<Subspace[]> = await res.json();\n      if (result.success === true) {\n        subspaceList = result.data;\n      } else {\n        throw new Error('[combine fields failed]' + result.message)\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  } else {\n    const worker = new combineFieldsWorker();\n    const result = await workerService<Subspace[], any>(worker, { dataSource, dimensions, measures, operator });\n    if (result.success === true) {\n      subspaceList = result.data;\n    } else {\n      throw new Error('[combine fields failed]' + result.message)\n    }\n    worker.terminate()\n  }\n  return subspaceList\n}\n\nexport interface ViewCombinedSpace {\n  dimensions: string[];\n  measures: Array<{name: string; value: number}>;\n  matrix: number[][];\n}\n\nexport interface ViewSpace {\n  index: number;\n  dimensions: string[];\n  measures: string[];\n  score: number;\n}\n\nexport async function clusterMeasures (maxGroupNumber: number, combinedSpaces: ViewCombinedSpace[], useServer?: boolean): Promise<ViewSpace[]> {\n  let viewSpaces: ViewSpace[] = [];\n  if (useServer) {\n    try {\n      const res = await fetch(server + '/api/service/clusterMeasures', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          maxGroupNumber,\n          spaces: combinedSpaces\n        })\n      });\n      const result: Result<ViewSpace[]> = await res.json();\n      if (result.success === true) {\n        viewSpaces = result.data.map((v, i) => {\n          return {\n            ...v,\n            index: i\n          }\n        });\n      } else {\n        throw new Error('[cluster measures]' + result.message)\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  } else {\n    const worker = new clusterWorker();\n    const result = await workerService<ViewSpace[], any>(worker, { maxGroupNumber, spaces: combinedSpaces });\n    if (result.success === true) {\n      viewSpaces = result.data.map((v, i) => {\n        return {\n          ...v,\n          index: i\n        }\n      });\n    } else {\n      throw new Error('[cluster measures]' + result.message)\n    }\n    worker.terminate();\n  }\n  return viewSpaces;\n}\n\ninterface ViewInDashBoard {\n  type: string;\n  dimensions: string[];\n  measures: string[];\n}\n\nexport type DashBoard = ViewInDashBoard[];\n\nexport async function generateDashBoard (dataSource: DataSource, dimensions: string[], measures: string[], subspaces: Subspace[], useServer?: boolean): Promise<DashBoard[]> {\n  let dashBoardList: DashBoard[] = [];\n  if (useServer) {\n    try {\n      const res =  await fetch(server + '/api/service/generateDashBoard', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          dataSource,\n          dimensions,\n          measures,\n          subspaces\n        })\n      });\n      const result = await res.json();\n      if (result.success) {\n        dashBoardList = result.data;\n      } else {\n        throw new Error('[generateDashBoard]' + result.message);\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  } else {\n    const worker = new dashBoardGeneratorWorker();\n    const result = await workerService<DashBoard[], any>(worker, {\n        dataSource,\n        dimensions,\n        measures,\n        subspaces\n      });\n    if (result.success) {\n      dashBoardList = result.data;\n    } else {\n      throw new Error('[generateDashBoard]' + result.message);\n    }\n    worker.terminate()\n  }\n  \n  return dashBoardList;\n}\n\nexport async function getInsightViewSpace (dataSource: DataSource, dimensions: string[], measures: string[]): Promise<InsightSpace[]> {\n  let ansSpace: InsightSpace[] = [];\n  try {\n    const worker = new InsightViewWorker();\n    const result = await workerService<InsightSpace[], any>(worker, {\n      dataSource,\n      dimensions,\n      measures\n    });\n    if (result.success) {\n      ansSpace = result.data;\n    } else {\n      throw new Error('[getInsightViewSpace]' + result.message);\n    }\n    worker.terminate();\n  } catch (error) {\n    console.error(error);\n  }\n  return ansSpace;\n}","import { DataSource, BIField, Field, OperatorType } from \"./global\";\nimport {\n  getFieldsSummaryService,\n  FieldSummary,\n  getGroupFieldsService,\n  combineFieldsService,\n  generateDashBoard,\n  ViewSpace,\n  Subspace,\n  clusterMeasures\n} from \"./service\";\nimport { GlobalState, StateUpdater } from './state';\n\n\n\ntype Action<T> = (select: () => GlobalState, updateState: (updater:StateUpdater<GlobalState>) => void, params: T) => any;\n\n\nconst univariateSummary: Action<{dataSource: DataSource; fields: BIField[]}> = async (select, updateState, params) => {\n  const { dataSource, fields } = params;\n  const state = select();\n  const dimensions = fields\n    .filter(field => field.type === \"dimension\")\n    .map(field => field.name);\n  const measures = fields\n    .filter(field => field.type === \"measure\")\n    .map(field => field.name);\n  // updateState(draft => { draft.loading.univariateSummary = true })\n  try {\n    /**\n     * get summary of the orignal dataset(fields without grouped)\n     */\n    const originSummary = await getFieldsSummaryService(\n      dataSource,\n      fields.map(f => f.name),\n      state.useServer\n    );\n    // todo only group dimension.\n    let fieldWithTypeList: Field[] = originSummary\n      ? originSummary\n          .filter(f => dimensions.includes(f.fieldName))\n          .map(f => {\n            return {\n              name: f.fieldName,\n              type: f.type\n            };\n          })\n      : [];\n    /**\n     * bug:\n     * should not group measures!!!\n     */\n    const groupedResult = await getGroupFieldsService(\n      dataSource,\n      fieldWithTypeList,\n      state.useServer\n    );\n    const { groupedData, newFields } = groupedResult\n      ? groupedResult\n      : { groupedData: dataSource, newFields: fieldWithTypeList };\n    /**\n     * `newBIFields` shares the same length (size) with fields.\n     * It repalces some of the fields with high entropy with a grouped new field.\n     * newBIFields does not contain field before grouped.\n     */\n    const newBIFields: BIField[] = fields.map(field => {\n      let groupedField = newFields.find(\n        f => f.name === field.name + \"(group)\"\n      );\n      return {\n        name: groupedField ? groupedField.name : field.name,\n        type: field.type\n      };\n    });\n    const newDimensions: string[] = newBIFields\n      .filter(f => f.type === \"dimension\")\n      .map(f => f.name);\n\n    /**\n     * groupedSummary only contains newFields generated during `groupFieldsService`.\n     */\n    const groupedSummary = await getFieldsSummaryService(\n      groupedData,\n      newFields,\n      state.useServer\n    );\n    \n    updateState(draft => {\n      draft.cookedDataSource = groupedData;\n      draft.summary = {\n        origin: originSummary || [],\n        grouped: groupedSummary || []\n      }\n      draft.loading.univariateSummary = false;\n    });\n    // setFields(newBIFields);\n    // tmp solutions\n    let summary = (groupedSummary || []).concat(originSummary || []);\n    return {\n      groupedData,\n      summary,\n      newDimensions,\n      measures\n    }\n    // await SubspaceSeach(groupedData, summary, newDimensions, measures, \"sum\");\n  } catch (error) {\n    updateState(draft => {\n      draft.loading.univariateSummary = false;\n    });\n  }\n}\n\n\n\ninterface SubspaceSeachParams {\n  groupedData: DataSource;\n  summary: FieldSummary[];\n  dimensions: string[];\n  measures: string[];\n  operator: OperatorType\n}\nconst subspaceSearch: Action<SubspaceSeachParams> = async (select, updateState, params) => {\n  const { groupedData: dataSource, summary, dimensions, measures, operator } = params;\n  const state = select();\n  updateState(draft => {\n    draft.loading.subspaceSearching = true;\n  });\n  let orderedDimensions: Array<{ name: string; entropy: number }> = [];\n  orderedDimensions = dimensions.map(d => {\n    let target = summary.find(g => g.fieldName === d);\n    return {\n      name: d,\n      entropy: target ? target.entropy : Infinity\n    };\n  });\n\n  orderedDimensions.sort((a, b) => a.entropy - b.entropy);\n  updateState(draft => {\n    draft.cookedDimensions = orderedDimensions.map(d => d.name);\n    draft.cookedMeasures = measures;\n  });\n  const selectedDimensions = orderedDimensions\n    .map(d => d.name)\n    .slice(\n      0,\n      Math.round(orderedDimensions.length * state.topK.dimensionSize)\n    );\n  try {\n    const subspaceList = await combineFieldsService(\n      dataSource,\n      selectedDimensions,\n      measures,\n      operator,\n      state.useServer\n    );\n    if (subspaceList) {\n      updateState(draft => {\n        draft.subspaceList = subspaceList;\n      });\n    }\n    updateState(draft => {\n      draft.loading.subspaceSearching = false;\n    });\n  } catch (error) {\n    updateState(draft => {\n      draft.loading.subspaceSearching = false;\n    });\n  }\n}\n\ninterface GetViewSpacesProps {\n  subspaceList: Subspace[];\n  maxGroupNumber: number;\n  useServer: boolean;\n}\nconst getViewSpaces: Action<GetViewSpacesProps> = async (select, updateState, params) => {\n  const { subspaceList, maxGroupNumber, useServer } = params;\n  let viewSpaces: ViewSpace[] = [];\n  try {\n    viewSpaces = await clusterMeasures(\n      maxGroupNumber,\n      subspaceList.map(space => {\n        return {\n          dimensions: space.dimensions,\n          measures: space.measures,\n          matrix: space.correlationMatrix\n        };\n      }),\n      useServer\n    )\n    updateState(draft => {\n      draft.viewSpaces = viewSpaces\n    })\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nconst extractInsights: Action<{dataSource: DataSource; fields: BIField[]}> = async (state, updateState, params) => {\n  const { dataSource, fields } = params;\n  updateState(draft => {\n    draft.loading.gallery = true\n  })\n  try {\n    const univariateResult = await univariateSummary(state, updateState, {\n      dataSource, fields\n    });\n      if (univariateResult) {\n        const {\n          groupedData,\n          summary,\n          newDimensions,\n          measures\n        } = univariateResult;\n        await subspaceSearch(state, updateState, {\n          groupedData, summary, dimensions: newDimensions, measures, operator: \"sum\"\n        });\n      }\n  } catch (error) {\n  } finally {\n    updateState(draft => {\n      draft.loading.gallery = false\n      draft.loading.gallery = false\n    })\n  }\n}\n\nconst getDashBoard: Action<{dataSource: DataSource, dimensions: string[], measures: string[]}> = async (select, updateState, params) => {\n  const state = select();\n  const { dataSource, dimensions, measures } = params;\n  updateState(draft => {\n    draft.loading.dashBoard = true\n  })\n  try {\n    const dashBoardList = await generateDashBoard(dataSource, dimensions, measures, state.subspaceList, state.useServer)\n    updateState(draft => {\n      draft.dashBoardList = dashBoardList;\n    })\n  } catch (error) {\n    console.error(error)\n  } finally {\n    updateState(draft => {\n      draft.loading.dashBoard = false\n    })\n  }\n}\nconst actions = {\n  univariateSummary,\n  subspaceSearch,\n  extractInsights,\n  getDashBoard,\n  getViewSpaces\n}\nexport type Actions =  typeof actions\n\ntype valueof<T> = T[keyof T]\n\ntype Foo = Parameters<typeof subspaceSearch> // ReturnType\nexport type Test = valueof<{  [key in keyof Actions]: {\n  name: key,\n  params: Parameters<Actions[key]>[2]\n}}>\n\nexport default actions;\n","import produce, { Draft, setAutoFreeze } from 'immer';\nimport React, { useState, useMemo, createContext, useContext, useCallback, useRef } from 'react';\nimport { DataSource, BIField, Field } from './global';\nimport { Subspace, FieldSummary, ViewSpace, DashBoard } from './service';\nimport actions, { Test } from './actions';\n\nsetAutoFreeze(false)\n\nexport interface GlobalState {\n  /**\n   * useless but cool.\n   */\n  beCool: boolean;\n  /**\n   * `currentPage` is the current page number of visualization in explore board.\n   */\n  currentPage: number;\n  /**\n   * use server to complete computing task, if not, use web worker.\n   */\n  useServer: boolean;\n  /**\n   * raw data is fetched and parsed data or uploaded data without any other changes.\n   * computed value `dataSource` will be calculated \n   */\n  rawData: DataSource;\n  /**\n   * fields contains fields with `dimension` or `measure` type.\n   * currently, this kind of type is not computed property unlike 'quantitative', 'nominal'...\n   * This is defined by user's purpose or domain knowledge.\n   */\n  fields: BIField[];\n  /**\n   * dataSource been cleaned and grouped which is readly for exploration.\n   */\n  cookedDataSource: DataSource;\n  cookedDimensions: string[];\n  cookedMeasures: string[];\n  /**\n   * subspaceList is ordered list by it score.\n   */\n  // subspaceList: Subspace[]\n  /**\n   * loading status for some service\n   * todo: \n   * manage the loading status in pages intead of globally.\n   */\n  loading: {\n    univariateSummary: boolean;\n    subspaceSearching: boolean;\n    gallery: boolean;\n    dashBoard: boolean;\n  };\n  \n  topK: {\n    /**\n     * top k percent subspace it will fetch.\n     */\n    subspacePercentSize: number;\n    dimensionSize: number;\n  }\n  maxGroupNumber: number;\n  subspaceList: Subspace[];\n  summary: {\n    origin: FieldSummary[];\n    grouped: FieldSummary[];\n  };\n  viewSpaces: ViewSpace[];\n  dashBoardList: DashBoard[];\n}\n\ninterface Getters {\n  /**\n   * `dataSource` is computed data based on fields' property(dimension or measure).\n   * sometimes, uploaded data contains contains some measure field but they are parsed into string value, which is raw data.\n   * dataSource transform these fields into what they should be for future computation.\n   * This is usually happened when a csv file is uploaded.\n   */\n  dimScores: [string, number, number, Field][]\n}\nexport type StateUpdater<S> = (draftState: Draft<S>) => void\n\n// function createStore<S>(initState: S) {\n//   const [state, setState] = useState<S>(initState)\n\n//   return function useGlobalState(): [S, (stateUpdater: StateUpdater<S>) => void] {\n//     const updateState = (stateUpdater: StateUpdater<S>) => {\n//       const nextState = produce<S>(state, draftState => stateUpdater(draftState))\n//       setState(nextState)\n//     }\n//     return [state, updateState]\n//   }\n// }\n\nconst initState: GlobalState = {\n  beCool: false,\n  currentPage: 0,\n  useServer: false,\n  fields: [],\n  rawData: [],\n  cookedDataSource: [],\n  cookedDimensions: [],\n  cookedMeasures: [],\n  loading: {\n    univariateSummary: false,\n    subspaceSearching: false,\n    gallery: false,\n    dashBoard: false,\n  },\n  topK: {\n    subspacePercentSize: 0.3,\n    dimensionSize: 0.72\n  },\n  maxGroupNumber: 4,\n  subspaceList: [],\n  summary: {\n    origin: [],\n    grouped: []\n  },\n  viewSpaces: [],\n  dashBoardList: []\n};\ntype Dispatch<T> = (actionName: string, params: T) => void;\ntype valueof<T> = T[keyof T]\nconst GloalStateContext = createContext<[GlobalState, (updater:StateUpdater<GlobalState>) => void, <P extends Test>(actionName: P['name'], params: P['params']) => void, Getters]>(null!)\nfunction useGetters(state: GlobalState) {\n  const dimScores = useMemo<[string, number, number, Field][]>(() => {\n    return [...state.summary.origin, ...state.summary.grouped].map(field => {\n      return [\n        field.fieldName,\n        field.entropy,\n        field.maxEntropy,\n        { name: field.fieldName, type: field.type }\n      ];\n    });\n  }, [state.summary])\n\n  const getters: Getters = {\n    dimScores\n  }\n\n  return getters;\n}\nexport function GlobalStateProvider({ children }: { children: React.ReactNode }) {\n  const [state, setState] = useState<GlobalState>(initState);\n  const stateHolder = useRef<GlobalState>(initState);\n\n  const getters = useGetters(state);\n  const updateState = useCallback((stateUpdater: StateUpdater<GlobalState>) => {\n    setState(state => {\n      const nextState = produce<GlobalState>(state, draftState => stateUpdater(draftState))\n      stateHolder.current = nextState;\n      return nextState;\n    })\n  }, [setState])\n  const dispatch: <P extends Test>(actionName: P['name'], params: P['params']) => void = useCallback((actionName, params) => {\n    if (typeof actions[actionName] === 'function') {\n      function select (): GlobalState {\n        return stateHolder.current\n      }\n      // todo: fix the any type\n      \n      actions[actionName](select, updateState, params as any);\n      // actions['subspaceSearch'](state, updateState, params)\n    }\n  }, [updateState])\n\n\n\n  return (\n    <GloalStateContext.Provider value={[state, updateState, dispatch, getters]}>\n      {children}\n    </GloalStateContext.Provider>\n  )\n}\nexport function useGlobalState() {\n  return useContext(GloalStateContext)\n}","import { Record, DataSource } from '../global';\nimport Papa from 'papaparse';\n\nexport function csvLoader (file: File) {\n  return new Promise<DataSource>((resolve, reject) => {\n    Papa.parse(file, {\n      complete (results, file) {\n        let data: string[][] = results.data;\n        let fields: string[] = data[0];\n        let rawData = data.slice(1).map(row => {\n          let record: Record = {};\n          fields.forEach((field, index) => {\n            record[field] = row[index]\n          })\n          return record\n        })\n        resolve(rawData)\n      },\n      error (error, file) {\n        reject(error)\n      }\n    })\n  })\n}\n\nexport function jsonLoader (file: File): Promise<DataSource> {\n  return new Promise((resolve, reject) => {\n    let reader = new FileReader()\n    reader.readAsText(file)\n    reader.onload = (ev) => {\n      if (ev.target) {\n        try {\n          const rawData: DataSource = JSON.parse(ev.target.result as string);\n          resolve(rawData);\n        } catch (error) {\n          reject(error)\n        }\n      } else {\n        reject(ev)\n      }\n    }\n    reader.onerror = reject\n  })\n}","export function transNumber(num: any): number | null {\n  if (isNaN(num)) {\n    return null\n  }\n  return Number(num)\n}","import { useState, useCallback } from 'react';\nimport produce, { Draft } from 'immer';\n/**\n * @param S type of the composed state\n */\nexport type StateUpdater<S> = (draftState: Draft<S>) => void\n/**\n * \n * @param initState\n * useComposeState helps you manage several state together, provided with immutable state change api\n * \n * example:\n * ```js\n * const [state, setState] = useComposeState({foo: 12, bar: { foo: 20}})\n * setState(draft => {\n *  draft.bar.foo = 100;\n * })\n * ```\n */\nexport default function useComposeState<S>(initState: S): [S, (stateUpdater: StateUpdater<S>) => void] {\n  const [state, setState] = useState<S>(initState)\n  const updateState = useCallback((stateUpdater: StateUpdater<S>) => {\n    setState(state => {\n      const nextState = produce<S>(state, draftState => stateUpdater(draftState))\n      return nextState\n    })\n  }, [setState])\n  return [state, updateState]\n}","import React, { useState, useEffect } from 'react';\nimport { PrimaryButton, Stack, Checkbox, Panel, PanelType, ComboBox, Label } from 'office-ui-fabric-react';\nimport { Aggregator } from '../global';\nconst checkboxStyles = () => {\n  return {\n    root: {\n      marginTop: '10px'\n    }\n  };\n}\n\n// todo: import aggregators list from cube-core\nconst aggregationList: Array<{ key: Aggregator; text: string }> = [\n  { key: 'sum', text: 'Sum' },\n  { key: 'count', text: 'Count' },\n  { key: 'mean', text: 'Mean' }\n]\nexport interface PreferencePanelConfig {\n  aggregator: Aggregator;\n  defaultAggregated: boolean;\n  defaultStack: boolean\n}\nexport interface PreferencePanelProps {\n  show: boolean;\n  onUpdateConfig: (props: PreferencePanelConfig) => void;\n  onClose: () => void;\n  config: PreferencePanelConfig\n}\n\nconst PreferencePanel: React.FC<PreferencePanelProps> = (props) => {\n  const {\n    show = false,\n    onUpdateConfig,\n    onClose,\n    config\n  } = props;\n  \n  const [aggregator, setAggregator] = useState<Aggregator>('sum');\n  const [defaultAggregated, setDefaultAggregated] = useState(true);\n  const [defaultStack, setDefaultStack] = useState(true);\n  \n  useEffect(() => {\n    const { aggregator, defaultAggregated, defaultStack } = config;\n    setAggregator(aggregator);\n    setDefaultAggregated(defaultAggregated);\n    setDefaultStack(defaultStack);\n  }, [config, show])\n  \n  const onRenderFooterContent = () => <div>\n    <PrimaryButton onClick={() => { onUpdateConfig({ aggregator, defaultAggregated, defaultStack }) }}>\n      Save\n    </PrimaryButton>\n  </div>\n  \n  return <Panel\n    isOpen={show}\n    type={PanelType.smallFixedFar}\n    onDismiss={onClose}\n    headerText=\"Preference\"\n    closeButtonAriaLabel=\"Close\"\n    onRenderFooterContent={onRenderFooterContent}\n  >\n    <Label>Preference</Label>\n    <Stack verticalFill tokens={{ childrenGap: 50, padding: 6}}>\n      <ComboBox\n        selectedKey={aggregator}\n        label=\"Aggregator\"\n        allowFreeform={true}\n        autoComplete=\"on\"\n        options={aggregationList}\n        onChange={(e, option) => {option && setAggregator(option.key as Aggregator)}}\n      />\n      <Checkbox styles={checkboxStyles} label=\"measurement aggregation\" checked={defaultAggregated} onChange={(e, isChecked) => {setDefaultAggregated(isChecked || false)}} />\n      <Checkbox styles={checkboxStyles} label=\"measurement stack\" checked={defaultStack} onChange={(e, isChecked) => {setDefaultStack(isChecked || false)}} />\n    </Stack>\n  </Panel>\n}\n\nexport default PreferencePanel;","import { Specification, FieldType } from \"visual-insights/src/commonTypes\";\nimport { geomTypeMap, DataField } from './index';\n\nexport function featureVis(query: Specification, fields: DataField[]) {\n  console.log({ query, fields })\n  // bug: sometimes there are fields in query but not in fields\n  let fieldTypeDict: {[key: string]: DataField} = {};\n  for (let field of fields) {\n    fieldTypeDict[field.name] = field\n  }\n\n  function getFieldSemanticType(field: string): FieldType {\n    return fieldTypeDict[field] ? fieldTypeDict[field].semanticType : \"nominal\";\n  }\n  function getFieldType(field: string): DataField['type'] {\n    return fieldTypeDict[field] ? fieldTypeDict[field].type : 'dimension'\n  }\n  \n  function shouldFieldAggregate(\n    field: string,\n    geomType: string\n  ): boolean {\n    if (geomType === \"point\") {\n      return false;\n    }\n    const fieldType = getFieldSemanticType(field);\n    if (geomType === 'rect') {\n      return fieldType !== 'quantitative'\n    }\n    if (fieldType === \"quantitative\" && getFieldType(field) === 'measure') {\n      return true;\n    }\n    return false;\n  }\n\n  let markType =\n        query.geomType![0] && geomTypeMap[query.geomType![0]]\n          ? geomTypeMap[query.geomType![0]]\n          : query.geomType![0];\n      const xType = getFieldSemanticType(query.position![0]);\n      const yType = getFieldSemanticType(query.position![1]);\n      const colorType = getFieldSemanticType(query.color![0]);\n      const xAgg = shouldFieldAggregate(query.position![0], markType);\n      const yAgg = shouldFieldAggregate(query.position![1], markType);\n\n      let adjustColorField = query.color![0];\n      if (markType === 'rect') {\n        if (query.color![0] && colorType !== 'quantitative') {\n          markType = 'point';\n        } else if (query.opacity![0] && query.size![0]) {\n          adjustColorField = query.size![0] || query.opacity![0];\n        }\n      }\n      return {\n        data: { name: \"dataSource\" },\n        autosize: {\n          type: \"pad\"\n        },\n        mark: markType,\n        selection: {\n          sl: {\n            type: markType === \"bar\" ? \"single\" : \"interval\",\n            encodings: markType === \"bar\" ? [\"x\"] : undefined\n          }\n        },\n        encoding: {\n          x: query.position![0] && {\n            field: query.position![0],\n            type: getFieldSemanticType(query.position![0]),\n            bin: markType === 'rect' && xType === 'quantitative' && { maxbins: 20 },\n            aggregate: markType !== 'rect' && xAgg && 'sum'\n          },\n          y: query.position![1] && {\n            field: query.position![1],\n            type: getFieldSemanticType(query.position![1]),\n            bin: markType === 'rect' && yType === 'quantitative' && { maxbins: 20 },\n            aggregate: markType !== 'rect' && yAgg && 'sum',\n          },\n          size: query.size![0] && {\n            field: query.size![0],\n            type: getFieldSemanticType(query.size![0])\n          },\n          column: query.facets![0] && {\n            field: query.facets![0],\n            type: getFieldSemanticType(query.facets![0])\n          },\n          row: query.facets![1] && {\n            field: query.facets![1],\n            type: getFieldSemanticType(query.facets![1])\n          },\n          opacity: query.opacity![0] && {\n            field: query.opacity![0],\n            type: getFieldSemanticType(query.opacity![0])\n          },\n          shape: query.shape![0] && {\n            field: query.shape![0],\n            type: getFieldSemanticType(query.shape![0])\n          },\n          color: (adjustColorField || markType === 'rect') && {\n            field: adjustColorField,\n            aggregate: markType === 'rect' && getFieldSemanticType(adjustColorField) === 'quantitative' && (adjustColorField ? 'sum' : 'count'),\n            type: adjustColorField && getFieldSemanticType(adjustColorField)\n          }\n        }\n      };\n\n}","import { Specification, FieldType } from \"visual-insights/src/commonTypes\";\nimport { geomTypeMap, DataField } from './index';\n\nexport function targetVis(query: Specification, fields: DataField[]) {\n  let fieldTypeDict: {[key: string]: DataField} = {};\n  for (let field of fields) {\n    fieldTypeDict[field.name] = field\n  }\n\n  function getFieldSemanticType(field: string): FieldType {\n    return fieldTypeDict[field].semanticType || \"nominal\";\n  }\n  function getFieldType(field: string): DataField['type'] {\n    return fieldTypeDict[field].type || 'dimension'\n  }\n  \n  function shouldFieldAggregate(\n    field: string,\n    geomType: string\n  ): boolean {\n    if (geomType === \"point\") {\n      return false;\n    }\n    const fieldType = getFieldSemanticType(field);\n    if (geomType === 'rect') {\n      return fieldType !== 'quantitative'\n    }\n    if (fieldType === \"quantitative\" && getFieldType(field) === 'measure') {\n      return true;\n    }\n    return false;\n  }\n\n  let markType =\n        query.geomType![0] && geomTypeMap[query.geomType![0]]\n          ? geomTypeMap[query.geomType![0]]\n          : query.geomType![0];\n      const xType = getFieldSemanticType(query.position![0]);\n      const yType = getFieldSemanticType(query.position![1]);\n      const colorType = getFieldSemanticType(query.color![0]);\n      const xAgg = shouldFieldAggregate(query.position![0], markType);\n      const yAgg = shouldFieldAggregate(query.position![1], markType);\n      let repeat: string[] = [query.position![1]];\n      if (query.highFacets) {\n        repeat = repeat.concat(query.highFacets!.filter(f => getFieldSemanticType(f) === 'quantitative'))\n      }\n      let adjustColorField = query.color![0];\n      if (markType === 'rect') {\n        if (query.color![0] && colorType !== 'quantitative') {\n          markType = 'point';\n        } else if (query.opacity![0] && query.size![0]) {\n          adjustColorField = query.size![0] || query.opacity![0];\n        }\n      }\n      return {\n        config: {\n          repeat: { columns: 5 }\n        },\n        data: { name: \"dataSource\" },\n        autosize: {\n          type: \"pad\"\n        },\n        repeat,\n        spec: {\n          mark: markType,\n          selection: {\n            sl: {\n              type: markType === \"bar\" ? \"single\" : \"interval\",\n              encodings: markType === \"bar\" ? [\"x\"] : undefined\n            }\n          },\n          encoding: {\n            x: query.position![0] && {\n              field: query.position![0],\n              type: getFieldSemanticType(query.position![0]),\n              bin: markType === 'rect' && xType === 'quantitative' && { maxbins: 20 },\n              aggregate: markType !== 'rect' && xAgg && 'sum'\n            },\n            y: repeat[0] && {\n              field: { repeat: 'repeat' },\n              type: getFieldSemanticType(repeat[0]),\n              bin: markType === 'rect' && yType === 'quantitative' && { maxbins: 20 },\n              aggregate: markType !== 'rect' && yAgg && 'sum',\n              // scale: mustDefineScale && !yAgg ? { domain: filedDomains[repeat[0]] } : undefined\n            },\n            size: query.size![0] && {\n              field: query.size![0],\n              type: getFieldSemanticType(query.size![0])\n            },\n            opacity: query.opacity![0] && {\n              field: query.opacity![0],\n              type: getFieldSemanticType(query.opacity![0])\n            },\n            shape: query.shape![0] && {\n              field: query.shape![0],\n              type: getFieldSemanticType(query.shape![0])\n            },\n            color: (adjustColorField || markType === 'rect') && {\n              field: adjustColorField,\n              aggregate: markType === 'rect' && getFieldSemanticType(adjustColorField) === 'quantitative' && (adjustColorField ? 'sum' : 'count'),\n              type: adjustColorField && getFieldSemanticType(adjustColorField)\n            }\n          }\n        }\n      };\n\n}","import { Specification } from \"visual-insights/build/esm/commonTypes\";\nimport { DataSource, Field, FieldType } from \"../global\";\nexport const geomTypeMap: { [key: string]: any } = {\n  interval: \"bar\",\n  line: \"line\",\n  point: \"point\",\n  // density: 'rect'\n  density: \"point\"\n};\n\nexport function baseVis(\n  query: Specification,\n  dataSource: DataSource,\n  dimensions: string[],\n  measures: string[],\n  aggregatedMeasures: Array<{op: string; field: string; as: string}>,\n  fieldFeatures: Field[],\n  defaultAggregated?: boolean,\n  defaultStack?: boolean,\n  \n) {\n  const {\n    position = [],\n    color = [],\n    size = [],\n    facets = [],\n    opacity = [],\n    geomType = [],\n    page = []\n  } = query;\n\n  function adjustField(fieldName: string): string {\n    if (defaultAggregated && measures.includes(fieldName)) {\n      let aggField = aggregatedMeasures.find(mea => {\n        return mea.field === fieldName;\n      });\n      return aggField ? aggField.as : fieldName;\n    }\n    return fieldName;\n  }\n  \n  function getFieldType(field: string): FieldType {\n    let targetField = fieldFeatures.find(f => f.name === field);\n    return targetField ? targetField.type : \"nominal\";\n  }\n\n  let chartWidth = 600; //container.current ? container.current.offsetWidth * 0.8 : 600;\n  const fieldMap: any = {\n    x: position[0],\n    y: position[1],\n    color: color[0],\n    size: size[0],\n    opacity: opacity[0],\n    row: facets[0],\n    column: facets[1]\n  };\n  let spec: any = {\n    width: chartWidth,\n    data: {\n      values: dataSource\n    }\n  };\n  let basicSpec: any = {\n    width: chartWidth,\n    mark: {\n      type:\n        geomType[0] && geomTypeMap[geomType[0]]\n          ? geomTypeMap[geomType[0]]\n          : geomType[0],\n      tooltip: true\n    },\n    encoding: {}\n  };\n  for (let channel in fieldMap) {\n    if (fieldMap[channel]) {\n      basicSpec.encoding[channel] = {\n        field: adjustField(fieldMap[channel]),\n        type: getFieldType(fieldMap[channel])\n      };\n      if (\n        [\"x\", \"y\"].includes(channel) &&\n        getFieldType(fieldMap[channel]) === \"quantitative\" &&\n        !defaultStack\n      ) {\n        basicSpec.encoding[channel].stack = null;\n      }\n    }\n  }\n  if (!defaultStack && opacity.length === 0) {\n    basicSpec.encoding.opacity = { value: 0.7 };\n  }\n  if (page.length === 0) {\n    spec = {\n      ...spec,\n      ...basicSpec\n    };\n  } else if (page.length > 0) {\n    basicSpec.transform = [\n      { filter: { selection: \"brush\" } },\n      defaultAggregated\n        ? {\n            aggregate: aggregatedMeasures,\n            groupby: dimensions.filter(dim => dim !== page[0])\n          }\n        : null\n    ].filter(Boolean);\n    let sliderSpec = {\n      width: chartWidth,\n      mark: \"tick\",\n      selection: { brush: { encodings: [\"x\"], type: \"interval\" } },\n      encoding: {\n        x: { field: page[0], type: getFieldType(page[0]) }\n      }\n    };\n    spec.vconcat = [basicSpec, sliderSpec];\n  }\n  return spec;\n}\n","import { FieldType } from \"visual-insights/src/commonTypes\";\nimport { featureVis } from './featureVis'\nimport { targetVis } from './targetVis';\nimport { baseVis } from './baseVis';\n\nexport const geomTypeMap: {[key: string]: any} = {\n  interval: 'bar',\n  line: 'line',\n  point: 'point',\n  density: 'rect'\n}\n\nexport interface DataField {\n  name: string;\n  semanticType: FieldType;\n  type: 'dimension' | 'measure';\n}\n\nexport { featureVis, targetVis, baseVis }","import React, { useEffect, useRef, useMemo } from 'react';\nimport aggregate from 'cube-core';\nimport embed from 'vega-embed';\nimport { DataSource, Field } from '../global'\nimport { baseVis } from '../queries/index';\nexport const geomTypeMap: {[key: string]: any} = {\n  interval: 'bar',\n  line: 'line',\n  point: 'point',\n  // density: 'rect'\n  density: 'point'\n}\nexport interface Specification {\n  position?: string[];\n  color?: string[];\n  opacity?: string[];\n  size?: string[];\n  shape?: string[];\n  geomType?: string[];\n  facets?: string[];\n  page?: string[];\n  filter?: string[]\n}\ninterface BaseChartProps {\n  defaultAggregated: boolean;\n  defaultStack: boolean;\n  aggregator: 'sum' | 'mean' | 'count';\n  dataSource: DataSource;\n  dimensions: string[];\n  measures: string[];\n  fieldFeatures: Field[];\n  schema: Specification;\n}\n\nconst BaseChart: React.FC<BaseChartProps> = (props) => {\n  const {\n    defaultAggregated,\n    defaultStack,\n    aggregator,\n    dataSource = [],\n    dimensions = [],\n    measures = [],\n    schema = {},\n    fieldFeatures = []\n  } = props;\n\n  const container = useRef<HTMLDivElement>(null);\n  const aggregatedMeasures = useMemo(() => {\n    return measures.map(mea => {\n      return {\n        op: aggregator,\n        field: mea,\n        as: `${mea}_${aggregator}`\n      }\n    })\n  }, [measures, aggregator])\n\n  let table = useMemo(() => {\n    if (!defaultAggregated) {\n      return dataSource\n    }\n    return aggregate({ dataSource, dimensions, measures, operator: aggregator, asFields: aggregatedMeasures.map(mea => mea.as)})\n  }, [defaultAggregated, dataSource, dimensions, measures, aggregator, aggregatedMeasures])\n\n  useEffect(() => {\n    if (container.current !== null) {\n      if (schema.position && schema.position.length > 0 && schema.geomType && schema.geomType.length > 0) {\n        let spec = baseVis(schema, table, dimensions, measures, aggregatedMeasures, fieldFeatures, defaultAggregated, defaultStack);\n        embed(container.current, spec);\n      }\n    }\n  }, [schema, table, dimensions, measures, aggregatedMeasures, fieldFeatures, defaultAggregated, defaultStack])\n  return <div ref={container}></div>\n}\n\nexport default BaseChart;","const JOIN_SYMBOL = '_';\nconst MAGIC_NUMBER = 5;\nfunction deepcopy(data) {\n    return JSON.parse(JSON.stringify(data));\n}\nfunction isFieldCategory(dataSource, fieldName) {\n    return dataSource.every(record => {\n        return typeof record[fieldName] === 'string'\n            || typeof record[fieldName] === 'undefined'\n            || record[fieldName] === null;\n    });\n}\nfunction isFieldContinous(dataSource, fieldName) {\n    return dataSource.every(record => {\n        return typeof record[fieldName] === 'number'\n            || typeof record[fieldName] === 'undefined'\n            || record[fieldName] === null;\n    });\n}\nfunction isFieldNumeric(dataSource, fieldName) {\n    return dataSource.every(record => {\n        return !isNaN(record[fieldName])\n            || typeof record[fieldName] === 'undefined'\n            || record[fieldName] === null;\n    });\n}\nfunction isFieldTime(dataSource, fieldName) {\n    return dataSource.every(record => {\n        return (!isNaN(Date.parse(record[fieldName]))\n            && typeof record[fieldName] === 'string'\n            && /^[0-9]{0,4}[-/][0-9]{0,2}([-/][0-9]{0,2}$)?/.test(record[fieldName]))\n            || typeof record[fieldName] === 'undefined'\n            || record[fieldName] === null;\n    });\n}\nfunction aggregate({ dataSource, fields, bys, method = 'sum' }) {\n    let tmp = [];\n    for (let by of bys) {\n        let map = new Map();\n        for (let record of dataSource) {\n            let key = JSON.stringify(fields.map(field => record[field]));\n            if (!map.has(key)) {\n                map.set(key, 0);\n            }\n            map.set(key, map.get(key) + record[by]);\n        }\n        for (let [key, value] of map) {\n            let row = {\n                index: key,\n                [by]: value\n            };\n            let dims = JSON.parse(key);\n            for (let i = 0; i < fields.length; i++) {\n                row[fields[i]] = dims[i];\n            }\n            tmp.push(row);\n        }\n    }\n    let ans = new Map();\n    for (let record of tmp) {\n        if (!ans.has(record.index)) {\n            ans.set(record.index, {});\n        }\n        ans.set(record.index, { ...ans.get(record.index), ...record });\n    }\n    return [...ans.values()];\n}\nfunction memberCount(dataSource, field) {\n    const counter = new Map();\n    for (let row of dataSource) {\n        let member = row[field];\n        if (!counter.has(member)) {\n            counter.set(member, 0);\n        }\n        counter.set(member, counter.get(member) + 1);\n    }\n    return [...counter.entries()];\n}\nfunction groupContinousField({ dataSource, field, newField = `${field}(con-group)`, groupNumber }) {\n    // const members = memberCount(dataSource, field);\n    // todo: outlier detection\n    const values = dataSource.map(item => item[field]);\n    const max = Math.max(...values); // Number.EPSILON * ;\n    const min = Math.min(...values);\n    const segWidth = (max - min) / groupNumber;\n    let ranges = [];\n    for (let i = 0; i < groupNumber; i++) {\n        let left = min + i * segWidth;\n        let right = min + (i + 1) * segWidth;\n        ranges.push([left, right]);\n    }\n    ranges[0][0] = -Infinity;\n    ranges[ranges.length - 1][1] = Infinity;\n    let precision = Math.max(1, Math.log10(Math.abs(min)) - Math.log10(segWidth)) + 1;\n    for (let i = 0; i < dataSource.length; i++) {\n        let record = dataSource[i];\n        let rangeIndex = ranges.findIndex(r => (r[0] <= record[field] && record[field] < r[1]));\n        let range = ranges[rangeIndex];\n        if (typeof range !== 'undefined') {\n            record[newField] = `${rangeIndex + 1}:[${Number(range[0].toPrecision(precision))}, ${Number(range[1].toPrecision(precision))})`;\n        }\n        else {\n            record[newField] = 'null';\n        }\n    }\n    return dataSource;\n}\nfunction groupCategoryField({ dataSource, field, newField = `${field}(cat-group)`, groupNumber }) {\n    // auto category should obey Power law distrubution.\n    let members = memberCount(dataSource, field);\n    members.sort((a, b) => b[1] - a[1]);\n    let sum = members.map(v => v[1]);\n    groupNumber = members.length;\n    for (let i = sum.length - 2; i >= 0; i--) {\n        sum[i] = sum[i + 1] + sum[i];\n    }\n    for (let i = 0; i < members.length - 2; i++) {\n        // strict mode\n        // if (members[i][1] >= sum[i + 1] && members[i + 1][1] < sum[i + 2]) {\n        if (members[i][1] * MAGIC_NUMBER >= sum[i + 1] && members[i + 1][1] / MAGIC_NUMBER < sum[i + 2]) {\n            groupNumber = i + 2;\n            break;\n        }\n    }\n    // groupNumber = Math.max(Math.round(Math.sqrt(members.length)), groupNumber)\n    if (groupNumber === members.length) {\n        return dataSource.map(record => {\n            return {\n                ...record,\n                [newField]: record[field]\n            };\n        });\n    }\n    let set = new Set();\n    for (let i = groupNumber - 1; i < members.length; i++) {\n        set.add(members[i][0]);\n    }\n    for (let record of dataSource) {\n        if (set.has(record[field])) {\n            record[newField] = 'others';\n        }\n        else {\n            record[newField] = record[field];\n        }\n    }\n    return dataSource;\n}\n/**\n * Kullback–Leibler divergence\n * @param p1List\n * @param p2List\n *\n */\nfunction DKL(p1List, p2List) {\n    let sum = 0;\n    const len = Math.max(p1List.length, p2List.length);\n    for (let i = 0; i < len; i++) {\n        let p1 = p1List[i] || 0;\n        let p2 = p2List[i] || 0;\n        sum += p1 * Math.log2(p1 / p2);\n    }\n    return sum;\n}\nexport { deepcopy, memberCount, groupCategoryField, groupContinousField, aggregate, isFieldCategory, isFieldContinous, isFieldTime, isFieldNumeric, JOIN_SYMBOL, DKL };\n","import { \n// isFieldCategory,\n// isFieldContinous,\nmemberCount } from './utils/index';\nfunction getVisualElements() {\n    return {\n        position: 2,\n        color: 1,\n        size: 1,\n        shape: 1,\n        opacity: 1,\n        facets: 2,\n        page: 1,\n        filter: 1,\n        highFacets: 1000\n    };\n}\nconst geomTypes = {\n    interval: [0, 20],\n    line: [21, Infinity],\n    area: [21, Infinity],\n    point: [0, 1000],\n    path: [0, 100],\n    density: [1001, Infinity]\n};\nfunction findBestField(type, fieldRankList) {\n    for (let i = fieldRankList.length - 1; i >= 0; i--) {\n        if (fieldRankList[i].type === type && !fieldRankList[i].choosen) {\n            return fieldRankList[i];\n        }\n    }\n    return false;\n}\n/**\n *\n * @param dimFields ranked dimension by entropy. asc\n * todo: not clear enough implementation for using asc and desc\n */\nfunction aestheticMapping(dimFields) {\n    let spec = {};\n    let visualElements = getVisualElements();\n    let fieldRankList = dimFields.map(field => {\n        return {\n            ...field,\n            choosen: false\n        };\n    });\n    const priority = [\n        ['quantitative', ['position', 'size', 'color', 'highFacets', 'opacity', 'page', 'filter']],\n        ['temporal', ['position', 'page', 'filter']],\n        ['ordinal', ['position', 'color', 'opacity', 'facets', 'size', 'page', 'filter', 'highFacets']],\n        ['nominal', ['position', 'color', 'facets', 'shape', 'page', 'filter', 'hightFacets']],\n    ];\n    let fieldLeft = fieldRankList.length;\n    for (let typeIndex = 0; typeIndex < priority.length && fieldLeft > 0; typeIndex++) {\n        let type = priority[typeIndex][0];\n        let channelList = priority[typeIndex][1];\n        for (let i = 0; i < channelList.length && fieldLeft > 0; i++) {\n            let channel = channelList[i];\n            let field;\n            while (visualElements[channel] > 0 && (field = findBestField(type, fieldRankList))) {\n                if (typeof spec[channel] === 'undefined') {\n                    spec[channel] = [];\n                }\n                spec[channel].push(field.name);\n                visualElements[channel]--;\n                fieldLeft--;\n                field.choosen = true;\n            }\n        }\n    }\n    return spec;\n}\n// todo (P1):\n// don't use dimScores: FieldImpurity.\n// it's a structure with redundency design.\nfunction specification(dimScores, aggData, dimensions, measures) {\n    let rankedFields = dimScores.sort((a, b) => a[1] - b[1]).map(dim => dim[3]);\n    let spec = aestheticMapping(rankedFields);\n    // todo: design a better rule for choosing geom type.\n    if (spec.position && spec.position.length === 2) {\n        if ((dimensions.includes(spec.position[0]) && measures.includes(spec.position[1])) ||\n            (dimensions.includes(spec.position[1]) && measures.includes(spec.position[0]))) {\n            const dimIndex = dimensions.includes(spec.position[0]) ? 0 : 1;\n            const dim = spec.position[dimIndex];\n            const mea = spec.position[(dimIndex + 1) % 2];\n            spec.position = [dim, mea];\n            const dimMembers = memberCount(aggData, dim);\n            spec.geomType = ['interval', 'line', 'area'].filter(geom => {\n                return dimMembers.length >= geomTypes[geom][0] && dimMembers.length <= geomTypes[geom][1];\n            });\n            let x = dimScores.find(dim => dim[0] === spec.position[0])[3];\n            let y = dimScores.find(dim => dim[0] === spec.position[1])[3];\n            if (x.type === 'nominal' || y.type === 'nominal') {\n                spec.geomType = ['interval'];\n            }\n        }\n        else {\n            // ['point', 'path', 'heatmap']\n            spec.geomType = ['point', 'density'].filter(geom => {\n                return aggData.length >= geomTypes[geom][0] && aggData.length <= geomTypes[geom][1];\n            });\n        }\n    }\n    return { schema: spec, aggData };\n}\nexport default specification;\n","/**\n *\n * @param matrix adjmatrix\n */\nfunction turnAdjMatrix2List(matrix) {\n    // only for the special matrix here(corelational matrix)\n    let edges = [];\n    for (let i = 0; i < matrix.length; i++) {\n        for (let j = i + 1; j < matrix[i].length; j++) {\n            edges.push([[i, j], Math.abs(matrix[i][j])]);\n        }\n    }\n    return edges;\n}\nfunction find(parents, n) {\n    return parents[n] === n ? n : parents[n] = find(parents, parents[n]);\n}\nfunction union(parents, n1, n2) {\n    let p1 = find(parents, n1);\n    let p2 = find(parents, n2);\n    parents[p1] = p2;\n    // I'm too tired. this is just a tmp lazy solution.... will be fixed later.\n    // may check and prove whether it's necessary.\n    find(parents, n1);\n    find(parents, n2);\n}\nfunction findWithEffect(parents, sizes, n) {\n    if (parents[n] === n) {\n        return n;\n    }\n    parents[n] = findWithEffect(parents, sizes, parents[n]);\n    sizes[n] = sizes[parents[n]];\n    return parents[n];\n}\nfunction unionWithEffect(parents, sizes, n1, n2) {\n    let p1 = findWithEffect(parents, sizes, n1);\n    let p2 = findWithEffect(parents, sizes, n2);\n    let size1 = sizes[p1];\n    let size2 = sizes[p2];\n    parents[p1] = p2;\n    sizes[p1] = sizes[p2] = size1 + size2;\n    findWithEffect(parents, sizes, n1);\n    findWithEffect(parents, sizes, n2);\n}\n/**\n * maxiumn spanning tree\n * @param matrix adjmatrix\n * @param groupNumber number of group generated by clustering\n */\nfunction kruskal(matrix, groupNumber, threshold = 0) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const parents = matrix.map((m, i) => i);\n    for (let edge of edges) {\n        if (find(parents, edge[0][0]) !== find(parents, edge[0][1])) {\n            union(parents, edge[0][0], edge[0][1]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = find(parents, i);\n        }\n        let set = new Set(parents);\n        if (set.size <= groupNumber || edge[1] < threshold) {\n            break;\n        }\n    }\n    let groups = new Map();\n    for (let i = 0; i < parents.length; i++) {\n        if (!groups.has(parents[i])) {\n            groups.set(parents[i], []);\n        }\n        groups.get(parents[i]).push(i);\n    }\n    return groups;\n}\n// todo: delete kruskal with limit size, use largest size to limit it(uncontrolled group number but better), need discuss.\n/**\n *\n * @param matrix\n * @param limitSize max size of each group\n */\nfunction kruskalWithLimitSize(matrix, limitSize) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const parents = matrix.map((m, i) => i);\n    const sizes = matrix.map(() => 1);\n    for (let edge of edges) {\n        if (findWithEffect(parents, sizes, edge[0][0]) !== findWithEffect(parents, sizes, edge[0][1])) {\n            if (sizes[edge[0][0]] + sizes[edge[0][1]] > limitSize) {\n                continue;\n            }\n            unionWithEffect(parents, sizes, edge[0][0], edge[0][1]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = findWithEffect(parents, sizes, i);\n        }\n        let set = new Set(parents);\n        if (set.size === 1) {\n            break;\n        }\n    }\n    let groups = new Map();\n    for (let i = 0; i < parents.length; i++) {\n        if (!groups.has(parents[i])) {\n            groups.set(parents[i], []);\n        }\n        groups.get(parents[i]).push(i);\n    }\n    return groups;\n}\nexport function kruskalMSTWithLimitSize(matrix, limitSize = 4) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const edgesInMST = [];\n    const parents = matrix.map((m, i) => i);\n    const cloneParents = matrix.map((m, i) => i);\n    const sizes = matrix.map(() => 1);\n    for (let edge of edges) {\n        if (findWithEffect(parents, sizes, edge[0][0]) !== findWithEffect(parents, sizes, edge[0][1])) {\n            if (sizes[edge[0][0]] + sizes[edge[0][1]] > limitSize) {\n                if (find(cloneParents, edge[0][0]) !== find(cloneParents, edge[0][1])) {\n                    edgesInMST.push([edge[0], edge[1], true]);\n                    union(cloneParents, edge[0][0], edge[0][1]);\n                }\n                continue;\n            }\n            unionWithEffect(parents, sizes, edge[0][0], edge[0][1]);\n            // fuck typescript\n            // edgesInMST.push([...edge, inCutEdge]);\n            edgesInMST.push([edge[0], edge[1], false]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = findWithEffect(parents, sizes, i);\n            cloneParents[i] = find(cloneParents, i);\n        }\n        let set = new Set(parents);\n        if (set.size === 1) {\n            break;\n        }\n    }\n    return { edgesInMST, groups: parents };\n}\n/**\n *\n * @param matrix\n * @param groupNumber number of group generated by clustering\n */\nexport function kruskalMST(matrix, groupNumber = 4, threshold = 0) {\n    const edges = turnAdjMatrix2List(matrix);\n    edges.sort((a, b) => b[1] - a[1]);\n    const edgesInMST = [];\n    const parents = matrix.map((m, i) => i);\n    let groups = [...parents];\n    let inCutEdge = false;\n    for (let edge of edges) {\n        if (find(parents, edge[0][0]) !== find(parents, edge[0][1])) {\n            union(parents, edge[0][0], edge[0][1]);\n            // fuck typescript\n            // edgesInMST.push([...edge, inCutEdge]);\n            edgesInMST.push([edge[0], edge[1], inCutEdge]);\n        }\n        for (let i = 0; i < parents.length; i++) {\n            parents[i] = find(parents, i);\n        }\n        let set = new Set(parents);\n        // TODO:\n        // + use kruskalMST instead of kruskal.\n        if (set.size <= groupNumber || edge[1] < threshold) {\n            inCutEdge = true;\n        }\n        else {\n            groups = [...parents];\n        }\n        if (set.size === 1) {\n            break;\n        }\n    }\n    return { edgesInMST, groups };\n}\nfunction cluster({ matrix, measures, method = 'kruskal', groupMaxSize = 4, limitSize = false, threshold = 0 }) {\n    // const groups = kruskal({ matrix, groupMaxSize });\n    let groups;\n    if (limitSize) {\n        groups = kruskalWithLimitSize(matrix, groupMaxSize);\n    }\n    else {\n        groups = kruskal(matrix, groupMaxSize, threshold);\n    }\n    let ans = [];\n    for (let meas of groups.values()) {\n        ans.push(meas.map(meaIndex => measures[meaIndex]));\n    }\n    return ans;\n}\nexport default cluster;\n","/**\n * todo reservoir sampling is better to support stream data\n * Algorithm R:\n * Vitter, Jeffrey S. (1 March 1985). \"Random sampling with a reservoir\" (PDF). ACM Transactions on Mathematical Software. 11 (1): 37–57. CiteSeerX 10.1.1.138.784. doi:10.1145/3147.3165.\n */\nexport function reservoirSampling(dataSource, size = 500) {\n    if (dataSource.length <= size)\n        return dataSource;\n    let sampleSpace = dataSource.slice(0, size);\n    let len = dataSource.length;\n    for (let i = size + 1; i < len; i++) {\n        let pos = Math.round(Math.random() * i);\n        if (pos < size) {\n            sampleSpace[pos] = dataSource[i];\n        }\n    }\n    return sampleSpace;\n}\nfunction linearCongruentialGenerator(size, seed) {\n    if (size === 0)\n        return [];\n    const m = 2147483647;\n    const a = 1103515245;\n    const c = 12345;\n    let ans = [seed];\n    for (let i = 1; i < size; i++) {\n        ans.push(((ans[i - 1] * a + c) % m));\n    }\n    return ans.map(v => v / m);\n}\nexport function uniformSampling(dataSource, size) {\n    let sampleIndexes = linearCongruentialGenerator(size, Math.random() * 2147483647);\n    let ans = [];\n    for (let i = 0; i < size; i++) {\n        let index = Math.floor(sampleIndexes[i] * size) % size;\n        ans.push(dataSource[index]);\n    }\n    return ans;\n}\n","import { deepcopy, isFieldNumeric, memberCount } from '../utils/index';\nfunction dropNullColumn(dataSource, fields) {\n    let keepFields = fields.map(() => false);\n    for (let record of dataSource) {\n        for (let i = 0; i < fields.length; i++) {\n            let field = fields[i];\n            if (typeof record[field] !== 'undefined' && record[field] !== '' && record[field] !== null) {\n                keepFields[i] = true;\n            }\n        }\n    }\n    let finalFields = fields.filter((field, index) => {\n        return keepFields[index];\n    });\n    return {\n        fields: finalFields,\n        dataSource: dataSource.map(record => {\n            let ans = {};\n            for (let field of finalFields) {\n                ans[field] = record[field];\n            }\n            return ans;\n        })\n    };\n}\nfunction dropNull(dataSource, dimensions, measures) {\n    let data = [];\n    for (let record of dataSource) {\n        let keep = true;\n        for (let dim of dimensions) {\n            if (typeof record[dim] === 'undefined' || record[dim] === '' || record[dim] === null) {\n                keep = false;\n            }\n        }\n        for (let mea of measures) {\n            if (typeof record[mea] !== 'number') {\n                keep = false;\n            }\n        }\n        if (keep) {\n            data.push(record);\n        }\n    }\n    for (let dim of dimensions) {\n        if (isFieldNumeric(data, dim)) {\n            let members = memberCount(data, dim);\n            if (members.length > 20) {\n                data.forEach(record => {\n                    record[dim] = Number(record[dim]) || 0;\n                });\n            }\n            else {\n                data.forEach(record => {\n                    record[dim] = (Number(record[dim]) || 0).toString();\n                });\n            }\n        }\n    }\n    return data;\n}\nfunction isNullValue(value) {\n    return ['', null, undefined].includes(value);\n}\n/**\n * use mode of one field to replace its null value\n * @param dataSource\n * @param fieldNames name list of fields you want to clean with useMode function.\n * problem: some field may regard the null value as the most common value... sad : (.\n * I am dead.\n */\nfunction useMode(dataSource, fieldNames) {\n    /**\n     * map to count each member's times of apperance in fields.\n     */\n    const countMap = new Map();\n    /**\n     * map to get the mode member of each field.\n     */\n    const modeMap = new Map();\n    for (let fieldName of fieldNames) {\n        countMap.set(fieldName, new Map());\n        modeMap.set(fieldName, 0);\n    }\n    for (let record of dataSource) {\n        for (let fieldName of fieldNames) {\n            let counter = countMap.get(fieldName);\n            if (!isNullValue(record[fieldName])) {\n                if (!counter.has(record[fieldName])) {\n                    counter.set(record[fieldName], 0);\n                }\n                counter.set(record[fieldName], counter.get(record[fieldName]) + 1);\n            }\n        }\n    }\n    for (let key of countMap.keys()) {\n        let counter = countMap.get(key);\n        let members = [...counter.entries()];\n        let max = 0;\n        let maxPos = 0;\n        for (let i = 0; i < members.length; i++) {\n            let member = members[i];\n            if (member[1] > max) {\n                max = member[1];\n                maxPos = i;\n            }\n        }\n        modeMap.set(key, members[maxPos][0]);\n    }\n    const newDataSource = deepcopy(dataSource);\n    for (let record of newDataSource) {\n        for (let fieldName of fieldNames) {\n            if (isNullValue(record[fieldName])) {\n                record[fieldName] = modeMap.get(fieldName);\n            }\n        }\n    }\n    return newDataSource;\n}\nfunction simpleClean(dataSource, dimensions, measures) {\n    const newDataSource = deepcopy(dataSource);\n    for (let record of dataSource) {\n        for (let dim of dimensions) {\n            if (isNullValue(record[dim])) {\n                record[dim] = 'null';\n            }\n        }\n        for (let mea of measures) {\n            if (isNullValue(record[mea])) {\n                record[mea] = 0;\n            }\n        }\n    }\n    return newDataSource;\n}\nexport { simpleClean, dropNull, useMode, dropNullColumn };\n","import React, { useMemo, useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Subspace } from '../../service';\nimport { DefaultButton, TeachingBubble, DirectionalHint } from 'office-ui-fabric-react';\n\nimport './index.css';\nimport { Field } from '../../global';\nimport { Specification } from '../../visBuilder/vegaBase';\n\ninterface StoryTellerProps {\n  lang?: 'zh' | 'en';\n  dimScores: Array<[string, number, number, Field]>;\n  space: Subspace;\n  spaceList: Subspace[];\n  dimensions: string[];\n  measures: string[];\n  schema: Specification\n}\n\nconst StoryTeller: React.FC<StoryTellerProps> = (props) => {\n  const { space, dimensions = [], measures = [], dimScores = [], spaceList = [], schema } = props;\n  const [isTeachingBubbleVisible, setIsTeachingBubbleVisible] = useState(false);\n\n  const sortedFieldsScores = useMemo<Array<[string, number, number, Field]>>(() => {\n    return [...dimScores].sort((a, b) => a[1] - b[1]);\n  }, [dimScores])\n  const mostInfluencedDimension = useMemo<string | undefined>(() => {\n    if (typeof space === 'undefined') return;\n    for (let sp of spaceList) {\n      if (sp.dimensions.some(dim => {\n        return space.dimensions.includes(dim)\n      })) {\n        return sp.dimensions.find(dim => {\n          return space.dimensions.includes(dim)\n        })\n      }\n    }\n  }, [space, spaceList])\n  const bestMeasure = useMemo<string | undefined>(() => {\n    if (typeof space === 'undefined') return;\n    const measuresInView = space.measures.filter(mea => measures.includes(mea.name));\n    let min = Infinity;\n    let minPos = 0;\n    for (let i = 0; i < measuresInView.length; i++) {\n      if (measuresInView[i].value < min) {\n        min = measuresInView[i].value;\n        minPos = i;\n      }\n    }\n    return measuresInView[minPos].name;\n  }, [measures, space])\n\n  const countDiffField = useMemo<string | undefined>(() => {\n    let ans = sortedFieldsScores.find(dim => dimensions.includes(dim[0]));\n    return ans ? ans[0] : undefined;\n  }, [sortedFieldsScores, dimensions])\n  const result = `\n  ${ schema && schema.position ? `Current chart mainly focus on the relationship between ***${schema.position[0]}*** and ***${schema.position[1]}***` : ''}\n  ${ dimensions.length > 1 ? `+ DataSource is grouped by ***${dimensions.join(', ')}***, measures(indicators) will propose strong difference of distribution between each other.` : '' }\n  ${ measures.length > 1 ? `+ ***${measures.join(', ')}***are strongly related to each other` : '' }\n  ${ countDiffField ? `+ The distribution of member countings of ***${countDiffField}*** seems to contain more orders and patterns.` : '' }\n  ${ mostInfluencedDimension ? `+ ***${mostInfluencedDimension}*** has great influence on aggregated measure values.` : '' }\n  ${ bestMeasure ? `+ ***${bestMeasure}*** is more likely to have patterns according to its distribution.` : '' }\n  \\`\\`\\\n  `\n  return (\n    <div>\n      <DefaultButton id=\"vis-summary\" text=\"Summary\" onClick={() => { setIsTeachingBubbleVisible(true) }} />\n      {isTeachingBubbleVisible ? (\n          <div>\n            <TeachingBubble\n              calloutProps={{ directionalHint: DirectionalHint.bottomCenter }}\n              isWide={true}\n              hasCloseIcon={true}\n              closeButtonAriaLabel=\"Close\"\n              target={'#vis-summary'}\n              onDismiss={() => { setIsTeachingBubbleVisible(false) }}\n              headline=\"Chart Description\"\n            >\n              <ReactMarkdown source={result} />\n            </TeachingBubble>\n          </div>\n        ) : null}\n    </div>\n  )\n}\n\nexport default StoryTeller","import React, { useMemo } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Subspace } from '../../service';\n\nimport './index.css';\nimport { Field } from '../../global';\nimport { Specification } from '../../visBuilder/vegaBase';\n\ninterface VisDescriptionProps {\n  lang?: 'zh' | 'en';\n  dimScores: Array<[string, number, number, Field]>;\n  space: Subspace;\n  spaceList: Subspace[];\n  dimensions: string[];\n  measures: string[];\n  schema: Specification\n}\n\nconst VisDescription: React.FC<VisDescriptionProps> = (props) => {\n  const { space, dimensions = [], measures = [], dimScores = [], spaceList = [], schema } = props;\n\n  const sortedFieldsScores = useMemo<Array<[string, number, number, Field]>>(() => {\n    return [...dimScores].sort((a, b) => a[1] - b[1]);\n  }, [dimScores])\n  const mostInfluencedDimension = useMemo<string | undefined>(() => {\n    if (typeof space === 'undefined') return;\n    for (let sp of spaceList) {\n      if (sp.dimensions.some(dim => {\n        return space.dimensions.includes(dim)\n      })) {\n        return sp.dimensions.find(dim => {\n          return space.dimensions.includes(dim)\n        })\n      }\n    }\n  }, [space, spaceList])\n  const bestMeasure = useMemo<string | undefined>(() => {\n    if (typeof space === 'undefined') return;\n    const measuresInView = space.measures.filter(mea => measures.includes(mea.name));\n    let min = Infinity;\n    let minPos = 0;\n    for (let i = 0; i < measuresInView.length; i++) {\n      if (measuresInView[i].value < min) {\n        min = measuresInView[i].value;\n        minPos = i;\n      }\n    }\n    return measuresInView[minPos].name;\n  }, [measures, space])\n\n  const countDiffField = useMemo<string | undefined>(() => {\n    let ans = sortedFieldsScores.find(dim => dimensions.includes(dim[0]));\n    return ans ? ans[0] : undefined;\n  }, [sortedFieldsScores, dimensions])\n  const result = `\n  ${ schema && schema.position ? `Current chart mainly focus on the relationship between ***${schema.position[0]}*** and ***${schema.position[1]}***` : ''}\n  ${ dimensions.length > 1 ? `+ DataSource is grouped by ***${dimensions.join(', ')}***, measures(indicators) will propose strong difference of distribution between each other.` : '' }\n  ${ measures.length > 1 ? `+ ***${measures.join(', ')}***are strongly related to each other` : '' }\n  ${ countDiffField ? `+ The distribution of member countings of ***${countDiffField}*** seems to contain more orders and patterns.` : '' }\n  ${ mostInfluencedDimension ? `+ ***${mostInfluencedDimension}*** has great influence on aggregated measure values.` : '' }\n  ${ bestMeasure ? `+ ***${bestMeasure}*** is more likely to have patterns according to its distribution.` : '' }\n  \\`\\`\\\n  `\n  return (\n    <ReactMarkdown source={result} />\n  )\n}\n\nexport default VisDescription","import { useMemo } from 'react';\nimport { ViewSpace } from '../../../service';\nimport { Field, DataSource } from '../../../global';\nimport { specification } from 'visual-insights';\nimport { PreferencePanelConfig } from '../../../components/preference';\nconst similarityThrehold = 0.2;\nconst topKRelatedSpace = 5;\n\nfunction measuresRelatedScore (measures1: string[], measures2: string[]) {\n  let meaSet = new Set([...measures1, ...measures2])\n  let meaSet1 = new Set(measures1)\n  let meaSet2 = new Set(measures2)\n  let meaVec1: number[] = [];\n  let meaVec2: number[] = [];\n  for (let mea of meaSet) {\n    meaVec1.push(Number(meaSet1.has(mea)))\n    meaVec2.push(Number(meaSet2.has(mea)))\n  }\n  let score = 0;\n  for (let i = 0; i < meaVec1.length; i++) {\n    score += meaVec1[i] * meaVec2[i];\n  }\n  score /= (Math.sqrt(measures1.length) * Math.sqrt(measures2.length))\n  // console.log(measures1, measures2, score)\n  return score;\n}\ninterface RelatedViewSpace extends ViewSpace {\n  relatedScore: number;\n}\nexport interface DigDimensionProps {\n  /**\n   * we suppose that viewSpaces here is a ranked space list\n   */\n  viewSpaces: ViewSpace[];\n  interestedViewSpace: ViewSpace;\n  fieldScores: Array<[string, number, number, Field]>;\n  dataSource: DataSource;\n  visualConfig: PreferencePanelConfig\n}\n\nfunction useDigDimension(props: DigDimensionProps) {\n  const { viewSpaces, interestedViewSpace, fieldScores, dataSource } = props;\n  const relatedSpaces = useMemo<ViewSpace[]>(() => {\n    let ans: ViewSpace[] = []\n    for (let space of viewSpaces) {\n      if (space.dimensions.length > interestedViewSpace.dimensions.length && space.dimensions.length - interestedViewSpace.dimensions.length <= 2) {\n        let isSubset = interestedViewSpace.dimensions.every(subDim => {\n          return space.dimensions.find(dim => subDim === dim)\n        })\n        if (isSubset) {\n          ans.push(space)\n        }\n      }\n    }\n    return ans;\n  }, [interestedViewSpace, viewSpaces])\n  const rankedRelatedSpaces = useMemo(() => {\n    let ans: RelatedViewSpace[] = [];\n    for (let space of relatedSpaces) {\n      let measureSimilarity = measuresRelatedScore(interestedViewSpace.measures, space.measures);\n      if (measureSimilarity > similarityThrehold) {\n        // console.log({ measureSimilarity })\n        ans.push({\n          ...space,\n          relatedScore: space.score / Math.sqrt(measureSimilarity)\n        })\n      }\n    }\n    return ans.sort((a, b) => a.relatedScore - b.relatedScore);\n  }, [relatedSpaces, interestedViewSpace.measures]);\n\n  const viewList = useMemo(() => {\n    const ans = rankedRelatedSpaces.slice(0, topKRelatedSpace).map(space => {\n      let spaceFieldScores = fieldScores.filter(field => {\n        return space.dimensions.includes(field[0]) || space.measures.includes(field[0])\n      })\n      return {\n        ...space,\n        schema: specification(spaceFieldScores, dataSource, space.dimensions, space.measures).schema\n      };\n    })\n    return ans;\n  }, [rankedRelatedSpaces, fieldScores, dataSource])\n\n  return viewList\n}\n\nexport default useDigDimension;\n","import React from \"react\";\nimport VisDescription from \"../../../plugins/visSummary/description\";\nimport useDigDimension, { DigDimensionProps } from \"./digDimension\";\nimport BaseChart from \"../../../visBuilder/vegaBase\";\nimport { Subspace } from \"../../../service\";\nimport { IconButton, Stack } from \"office-ui-fabric-react\";\n\nfunction isDimensionEqual(dimensions1: string[], dimensions2: string[]) {\n  if (dimensions1.length !== dimensions2.length) {\n    return false;\n  }\n  return dimensions1.every(dim1 => {\n    return dimensions2.includes(dim1);\n  });\n}\ninterface AssociationProps {\n  digDimensionProps: DigDimensionProps;\n  subspaceList: Subspace[];\n  onSelectView: (index: number) => void\n}\nconst Association: React.FC<AssociationProps> = props => {\n  const { digDimensionProps, subspaceList, onSelectView } = props;\n  const { dataSource, visualConfig, fieldScores } = digDimensionProps;\n  const relatedCharts = useDigDimension(digDimensionProps);\n  const fieldFeatures = fieldScores.map(f => f[3]);\n  return (\n    <div>\n      <div className=\"ms-Grid\">\n        {relatedCharts.map((view, i) => {\n          let currentSpace = subspaceList.find(space => {\n            return isDimensionEqual(space.dimensions, view.dimensions);\n          });\n          return (\n            <div key={`associate-row-${i}`}\n              className=\"ms-Grid-row\"\n              style={{\n                border: \"solid 1px #bfbfbf\",\n                margin: \"1em\",\n                padding: \"1em\"\n              }}\n            >\n              <div\n                className=\"ms-Grid-col ms-sm6 ms-md8 ms-lg9\"\n                style={{ overflow: 'auto' }}\n              >\n                <BaseChart\n                  aggregator={visualConfig.aggregator}\n                  defaultAggregated={view.schema.geomType && view.schema.geomType.includes(\"point\") ? false : true}\n                  defaultStack={visualConfig.defaultStack}\n                  dimensions={view.dimensions}\n                  measures={view.measures}\n                  dataSource={dataSource}\n                  schema={view.schema}\n                  fieldFeatures={fieldFeatures}\n                />\n              </div>\n              <div\n                className=\"ms-Grid-col ms-sm6 ms-md4 ms-lg3\"\n                style={{ fontSize: 14, color: \"#8a8886\", overflow: \"auto\" }}\n              >\n                <div>\n                  \n                  <Stack tokens={{ childrenGap: 8 }} horizontal>\n                    <IconButton iconProps={{ iconName: 'Lightbulb' }} title=\"Interested\" onClick={() => {\n                      onSelectView(view.index)\n                    }} />\n                  </Stack>\n                </div>\n                {currentSpace && (\n                  <VisDescription\n                    dimensions={view.dimensions}\n                    measures={view.measures}\n                    dimScores={fieldScores}\n                    space={currentSpace}\n                    spaceList={subspaceList}\n                    schema={view.schema}\n                  />\n                )}\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Association;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { SearchBox } from 'office-ui-fabric-react';\nimport { useGlobalState } from '../../../state';\nimport Fuse, { FuseOptions } from 'fuse.js';\nimport { specification } from 'visual-insights';\nimport { ViewSpace } from '../../../service';\nimport BaseChart from \"../../../visBuilder/vegaBase\";\nimport styled from 'styled-components';\n\nconst VisCard = styled.div`\n  padding: 1rem;\n  overflow-x: auto;\n  margin: 1rem;\n`\n\nconst PageLinkButton = styled.a`\n  margin-right: 1rem;\n  cursor: pointer;\n  color: rgb(16, 110, 190);\n`\n\nconst PAGE_SIZE = 4;\nconst PAGE_OFFSET = 2;\n\nfunction usePageController (size: number) {\n  const [currentPage, setCurrentPage] = useState(0);\n\n  useEffect(() => {\n    setCurrentPage(0)\n  }, [size])\n  const maxPageNumber = Math.ceil(size / PAGE_SIZE);\n  const gotoPage = (num: number) => {\n    let fixPageNum = (num + maxPageNumber) % maxPageNumber;\n    setCurrentPage(fixPageNum)\n  }\n\n  const lastPage = () => {\n    setCurrentPage(p => (p + maxPageNumber - 1) % maxPageNumber)\n  }\n  const nextPage = () => {\n    setCurrentPage(p => (p + maxPageNumber + 1) % maxPageNumber)\n  }\n  const minVisPage = Math.max(currentPage - PAGE_OFFSET, 0);\n  const maxVisPage = Math.min(currentPage + PAGE_OFFSET, maxPageNumber);\n  const itemRange = useMemo(() => {\n    return [currentPage * PAGE_SIZE, Math.min((currentPage + 1) * PAGE_SIZE, size)]\n  }, [size, currentPage])\n  const visPageRange = [...new Array(maxVisPage - minVisPage + 1)].map((n, i) => minVisPage + i)\n  return {\n    currentPage,\n    visPageRange,\n    itemRange,\n    gotoPage,\n    lastPage,\n    nextPage\n  }\n}\n\nconst SearchPage: React.FC = props => {\n  const [state, , dispatch, getters] = useGlobalState();\n  const [targetViewSpaces, setTargetViewSpaces] = useState<ViewSpace[]>([]);\n  const { subspaceList, viewSpaces, maxGroupNumber, useServer } = state;\n  const { dimScores } = getters;\n\n  useEffect(() => {\n    dispatch('getViewSpaces', {\n      subspaceList,\n      maxGroupNumber,\n      useServer\n    })\n  }, [subspaceList, maxGroupNumber, useServer, dispatch])\n\n  const fuse = useMemo(() => {\n    const options: FuseOptions<ViewSpace> = {\n      keys: [\n        'dimensions',\n        'measures'\n      ]\n    }\n    return new Fuse(viewSpaces, options)\n  }, [viewSpaces])\n  const searchHandler = (newValue: string) => {\n    const result: any[] = fuse.search(newValue)\n    setTargetViewSpaces(result);\n  }\n\n  const {  currentPage, visPageRange, itemRange, gotoPage, lastPage, nextPage } = usePageController(targetViewSpaces.length);\n\n  const specList = useMemo(() => {\n    return targetViewSpaces.slice(itemRange[0], itemRange[1]).map(space => {\n      const { dimensions, measures } = space;\n      const fieldScores = dimScores.filter(field => {\n        return dimensions.includes(field[0]) || measures.includes(field[0]);\n      });\n      let { schema } = specification(\n        fieldScores,\n        state.cookedDataSource,\n        dimensions,\n        measures\n      );\n      return {\n        schema,\n        fieldFeatures: fieldScores.map(f => f[3]),\n        aggData: state.cookedDataSource,\n        dimensions,\n        measures\n      }\n    })\n  }, [state.cookedDataSource, targetViewSpaces, itemRange, dimScores])\n  \n  return (\n    <div>\n      <SearchBox\n        placeholder=\"Search\"\n        onSearch={searchHandler}\n        underlined={true}\n      />\n      <p className=\"state-description\">{targetViewSpaces.length} results are found. current page is {currentPage + 1}</p>\n      <div>\n        <PageLinkButton onClick={lastPage}>Last Page</PageLinkButton>\n        {\n          targetViewSpaces.length > 0 && visPageRange.map(n => <PageLinkButton key={`page-btn-${n}`} onClick={() => { gotoPage(n) }}>{ n + 1 }</PageLinkButton>)\n        }\n        <PageLinkButton onClick={nextPage}>Next Page</PageLinkButton>\n      </div>\n      <div>\n        {specList.map((spec, index) => (\n          <VisCard key={`result-${index}`}>\n            <BaseChart\n              aggregator={\"sum\"}\n              defaultAggregated={true}\n              defaultStack={true}\n              dimensions={spec.dimensions}\n              measures={spec.measures}\n              dataSource={spec.aggData}\n              schema={spec.schema}\n              fieldFeatures={spec.fieldFeatures}\n            />\n          </VisCard>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default SearchPage\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport {\n  DefaultButton,\n  IconButton,\n  Stack,\n  ProgressIndicator,\n  SpinButton,\n  Pivot,\n  PivotItem\n} from \"office-ui-fabric-react\";\nimport { Position } from \"office-ui-fabric-react/lib/utilities/positioning\";\nimport PreferencePanel, {\n  PreferencePanelConfig\n} from \"../../components/preference\";\nimport { useComposeState } from \"../../utils/index\";\nimport BaseChart, { Specification } from \"../../visBuilder/vegaBase\";\nimport { DataSource, Field } from \"../../global\";\nimport { specification } from \"visual-insights\";\nimport VisSummary from \"../../plugins/visSummary/index\";\nimport { useGlobalState } from \"../../state\";\nimport Association from \"./association/index\";\nimport {\n  Subspace,\n  clusterMeasures,\n  ViewSpace,\n  FieldSummary\n} from \"../../service\";\nimport SearchBoard from \"./search/index\";\n\nconst pivotList = [\n  'Rank List',\n  'Search'\n].map((page, index) => {\n  return { title: page, itemKey: 'pivot-' + index}\n});\n\ninterface PageStatus {\n  show: {\n    insightBoard: boolean;\n    configPanel: boolean;\n    fieldConfig: boolean;\n    dataConfig: boolean;\n  };\n}\ninterface DataView {\n  schema: Specification;\n  aggData: DataSource;\n  fieldFeatures: Field[];\n  dimensions: string[];\n  measures: string[];\n}\n\ninterface GalleryProps {\n  subspaceList: Subspace[];\n  /**\n   * dataSource here should be cookedData.\n   */\n  dataSource: DataSource;\n  summary: {\n    origin: FieldSummary[];\n    grouped: FieldSummary[];\n  };\n}\n\nconst Gallery: React.FC<GalleryProps> = props => {\n  const { dataSource, summary, subspaceList } = props;\n  const [currentPage, setCurrentPage] = useState(0);\n  const [pivotIndex, setPivotIndex] = useState(pivotList[0].itemKey);\n  const [state, updateState] = useGlobalState();\n  const [pageStatus, setPageStatus] = useComposeState<PageStatus>({\n    show: {\n      insightBoard: false,\n      fieldConfig: false,\n      configPanel: false,\n      dataConfig: false\n    }\n  });\n  const [showAssociation, setShowAssociation] = useState(false);\n  const [visualConfig, setVisualConfig] = useState<PreferencePanelConfig>({\n    aggregator: \"sum\",\n    defaultAggregated: true,\n    defaultStack: true\n  });\n  const [viewSpaces, setViewSpaces] = useState<ViewSpace[]>([]);\n\n  const [dataView, setDataView] = useState<DataView>({\n    schema: {\n      position: [],\n      color: [],\n      opacity: [],\n      geomType: []\n    },\n    fieldFeatures: [],\n    aggData: [],\n    dimensions: [],\n    measures: []\n  });\n\n  const gotoPage = (pageNo: number) => {\n    setCurrentPage(pageNo);\n  };\n\n  useEffect(() => {\n    updateState(draft => {\n      draft.loading.gallery = true;\n    });\n    // todo:\n    // should group number be the same for different subspaces?\n    clusterMeasures(\n      state.maxGroupNumber,\n      subspaceList.map(space => {\n        return {\n          dimensions: space.dimensions,\n          measures: space.measures,\n          matrix: space.correlationMatrix\n        };\n      }),\n      state.useServer\n    ).then(viewSpaces => {\n      setViewSpaces(viewSpaces);\n      updateState(draft => {\n        draft.loading.gallery = false;\n      });\n    });\n  }, [subspaceList, dataSource, state.maxGroupNumber, state.useServer, updateState]);\n\n  const dimScores = useMemo<[string, number, number, Field][]>(() => {\n    return [...summary.origin, ...summary.grouped].map(field => {\n      return [\n        field.fieldName,\n        field.entropy,\n        field.maxEntropy,\n        { name: field.fieldName, type: field.type }\n      ];\n    });\n  }, [summary.origin, summary.grouped]);\n\n  useEffect(() => {\n    const viewState = viewSpaces[currentPage];\n    if (viewState) {\n      const { dimensions, measures } = viewState;\n      try {\n        // todo: find the strict confition instead of using try catch\n        const fieldScores = dimScores.filter(field => {\n          return dimensions.includes(field[0]) || measures.includes(field[0]);\n        });\n        const { schema } = specification(\n          fieldScores,\n          dataSource,\n          dimensions,\n          measures\n        );\n        setDataView({\n          schema,\n          fieldFeatures: fieldScores.map(f => f[3]),\n          aggData: dataSource,\n          dimensions,\n          measures\n        });\n        // ugly code\n        // todo:\n        // implement this in specification\n        // + check geomType\n        // + check geom number and aggregated geom number\n        if (\n          schema.geomType &&\n          (schema.geomType.includes(\"point\") ||\n            schema.geomType.includes(\"density\"))\n        ) {\n          setVisualConfig(config => {\n            return {\n              ...config,\n              defaultAggregated: false\n            };\n          });\n        } else {\n          setVisualConfig(config => {\n            return {\n              ...config,\n              defaultAggregated: true\n            };\n          });\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }, [viewSpaces, currentPage, dataSource, dimScores]);\n  const currentSpace = useMemo<Subspace>(() => {\n    return subspaceList.find(subspace => {\n      return subspace.dimensions.join(\",\") === dataView.dimensions.join(\",\");\n    })!;\n  }, [subspaceList, dataView]);\n  useEffect(() => {\n    setShowAssociation(false);\n  }, [currentPage]);\n  return (\n    <div className=\"content-container\">\n      <PreferencePanel\n        show={pageStatus.show.configPanel}\n        config={visualConfig}\n        onUpdateConfig={config => {\n          setVisualConfig(config);\n          setPageStatus(draft => {\n            draft.show.configPanel = false;\n          });\n        }}\n        onClose={() => {\n          setPageStatus(draft => {\n            draft.show.configPanel = false;\n          });\n        }}\n      />\n\n      <div className=\"card\" style={{ paddingTop: '0.2rem' }}>\n        <Pivot\n          selectedKey={pivotIndex}\n          onLinkClick={item => {\n            item && setPivotIndex(item.props.itemKey!)\n          }}\n        >\n          {\n            pivotList.map(pivot => (\n              <PivotItem headerText={pivot.title} key={pivot.itemKey} itemKey={pivot.itemKey} />\n            ))\n          }\n        </Pivot>\n        {(state.loading.gallery ||\n          state.loading.subspaceSearching ||\n          state.loading.univariateSummary) && (\n          <ProgressIndicator description=\"calculating\" />\n        )}\n        {pivotIndex === pivotList[0].itemKey && (\n          <div>\n            <h2 style={{ marginBottom: 0 }}>\n              Visual Insights{\" \"}\n              <IconButton\n                iconProps={{ iconName: \"Settings\" }}\n                title=\"Preference\"\n                ariaLabel=\"preference\"\n                onClick={() => {\n                  setPageStatus(draft => {\n                    draft.show.configPanel = true;\n                  });\n                }}\n              />\n              <IconButton\n                iconProps={{ iconName: \"Lightbulb\" }}\n                title=\"Dig In\"\n                ariaLabel=\"digIn\"\n                onClick={() => {\n                  setShowAssociation(true);\n                }}\n              />\n            </h2>\n            <p className=\"state-description\">\n              Details of the recommendation process can be seen in{\" \"}\n              <b>NoteBook</b> Board. You can adjust some of the parameters and\n              operators and see how it influence recommendation results.\n            </p>\n            <p className=\"state-description\">\n              Try to use the setting button beside the \"visual insight\" title to\n              adjust the visualization settings to get a view you prefer better.\n            </p>\n            <div className=\"ms-Grid\" dir=\"ltr\">\n              <div className=\"ms-Grid-row\">\n                <div\n                  className=\"ms-Grid-col ms-sm6 ms-md8 ms-lg3\"\n                  style={{ overflow: \"auto\" }}\n                >\n                  <div style={{ marginBottom: \"1rem\" }}>\n                    <SpinButton\n                      label={\"Current Page\"}\n                      value={(currentPage + 1).toString()}\n                      min={0}\n                      max={viewSpaces.length}\n                      step={1}\n                      iconProps={{ iconName: \"Search\" }}\n                      labelPosition={Position.end}\n                      // tslint:disable:jsx-no-lambda\n                      onValidate={(value: string) => {\n                        gotoPage((Number(value) - 1) % viewSpaces.length);\n                      }}\n                      onIncrement={() => {\n                        gotoPage((currentPage + 1) % viewSpaces.length);\n                      }}\n                      onDecrement={() => {\n                        gotoPage(\n                          (currentPage - 1 + viewSpaces.length) %\n                            viewSpaces.length\n                        );\n                      }}\n                      incrementButtonAriaLabel={\"Increase value by 1\"}\n                      decrementButtonAriaLabel={\"Decrease value by 1\"}\n                    />\n                  </div>\n                  <p className=\"state-description\">\n                    Page No. {currentPage + 1} of {viewSpaces.length}\n                  </p>\n                  <Stack horizontal tokens={{ childrenGap: 20 }}>\n                    <DefaultButton\n                      text=\"Last\"\n                      onClick={() => {\n                        gotoPage(\n                          (currentPage - 1 + viewSpaces.length) %\n                            viewSpaces.length\n                        );\n                      }}\n                      allowDisabledFocus\n                    />\n                    <DefaultButton\n                      text=\"Next\"\n                      onClick={() => {\n                        gotoPage((currentPage + 1) % viewSpaces.length);\n                      }}\n                      allowDisabledFocus\n                    />\n                  </Stack>\n                  <h3>Specification</h3>\n                  <pre>{JSON.stringify(dataView.schema, null, 2)}</pre>\n                  <VisSummary\n                    dimensions={dataView.dimensions}\n                    measures={dataView.measures}\n                    dimScores={dimScores}\n                    space={currentSpace}\n                    spaceList={subspaceList}\n                    schema={dataView.schema}\n                  />\n                </div>\n                <div\n                  className=\"ms-Grid-col ms-sm6 ms-md4 ms-lg9\"\n                  style={{ overflow: \"auto\" }}\n                >\n                  <BaseChart\n                    aggregator={visualConfig.aggregator}\n                    defaultAggregated={visualConfig.defaultAggregated}\n                    defaultStack={visualConfig.defaultStack}\n                    dimensions={dataView.dimensions}\n                    measures={dataView.measures}\n                    dataSource={dataView.aggData}\n                    schema={dataView.schema}\n                    fieldFeatures={dataView.fieldFeatures}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n        {pivotIndex === pivotList[1].itemKey && <SearchBoard />}\n      </div>\n\n      {pivotIndex === pivotList[0].itemKey && showAssociation && (\n        <div className=\"card\">\n          <h2> Related Views </h2>\n          <Association\n            onSelectView={index => {\n              let pos = viewSpaces.findIndex(v => v.index === index);\n              if (pos > -1) {\n                gotoPage(pos);\n              }\n            }}\n            subspaceList={subspaceList}\n            digDimensionProps={{\n              visualConfig,\n              dataSource,\n              viewSpaces,\n              fieldScores: dimScores,\n              interestedViewSpace: viewSpaces[currentPage]\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Gallery;\n","import React, { useRef, useEffect } from 'react';\nimport embed from 'vega-embed';\nimport { FieldType, DataSource } from '../../global';\nexport interface DistributionChartProps {\n  fieldType: FieldType;\n  x: string;\n  y: string;\n  dataSource: DataSource\n}\n\nconst DistributionChart: React.FC<DistributionChartProps> = (props) => {\n  const chart = useRef<HTMLDivElement>(null);\n  const { x, y, dataSource, fieldType } = props;\n    useEffect(() => {\n      if (chart.current) {\n        let values: typeof dataSource = [];\n        let hasIndex = false;\n        if (fieldType === 'ordinal' && dataSource.some(member => {\n          return /(\\[|\\()-?([0-9.]+|Infinity),\\s*([0-9.]+|Infinity)(\\]|\\))/.test(member.memberName)\n        })) {\n          values = dataSource.map(member => {\n            hasIndex = true;\n            let result = /(\\[|\\()(?<left>-?([0-9.]+|Infinity)),\\s*([0-9.]+|Infinity)(\\]|\\))/.exec(member.memberName);\n            \n            return {\n              ...member,\n              index: result === null ? member.name : Number(result.groups!.left)\n            }\n          })\n        } else {\n          values = dataSource\n        }\n        let sortBy: string | undefined | any = undefined;\n        if (fieldType === 'nominal') {\n          sortBy = '-y'\n        } else if (fieldType === 'ordinal' && hasIndex) {\n          sortBy = { field: 'index' }\n        }\n        embed(chart.current, {\n          background: '#fff',\n          data: {\n            values\n          },\n          height: 120,\n          width: 200,\n          mark: ['quantitative', 'temporal'].includes(fieldType) ? 'line' : 'bar',\n          encoding: {\n            x: {\n              field: x,\n              axis: dataSource.length > 16 ? null : undefined,\n              type: fieldType, sort: sortBy\n            },\n            y: { field: y, type: 'quantitative', aggregate: 'sum' }\n          }\n        }, {\n          actions: false\n        })\n      }\n    }, [x, y, dataSource, fieldType])\n  return <div ref={chart}></div>\n}\n\nexport default DistributionChart;","import React, { useMemo } from 'react';\nimport { DetailsList, SelectionMode, IColumn, Icon, HoverCard, IExpandingCardProps } from 'office-ui-fabric-react';\nimport chroma from 'chroma-js';\nimport { FieldSummary } from '../../service';\nimport DistributionChart from './distributionChart';\nimport { FieldType, Record } from '../../global';\n\nimport './fieldAnalysis.css';\n\n// todo: distribution info\n\ninterface FieldAnalsisProps {\n  originSummary: FieldSummary[];\n  groupedSummary: FieldSummary[];\n}\nconst columns: IColumn[] = [\n  {\n    key: 'fieldName',\n    name: 'fieldName',\n    fieldName: 'fieldName',\n    minWidth: 70,\n    maxWidth: 150\n  },\n  {\n    key: 'type',\n    name: 'type',\n    fieldName: 'type',\n    minWidth: 50\n  },\n  {\n    key: 'entropy',\n    name: 'entropy',\n    fieldName: 'entropy',\n    minWidth: 120\n  },\n  {\n    key: 'maxEntropy',\n    name: 'maxEntropy',\n    fieldName: 'maxEntropy',\n    minWidth: 120\n  }\n];\nfunction getIconNameByFieldType (type: string): string {\n  switch (type) {\n    case 'nominal':\n      return 'TextField';\n    case 'quantitative':\n      return 'NumberField';\n    case 'ordinal':\n      return 'Breadcrumb';\n    case 'temporal':\n      return 'EventDate';\n    default:\n      return ''\n  }\n}\n\nfunction getValueColor (value: number, range: [number, number]): [number, number, number] {\n  return chroma.scale('YlGnBu').domain([range[1], range[0]])(value).rgb();\n}\n\n/**\n * \n * @param color rgb array\n * algorithm provided by https://stackoverflow.com/questions/1855884/determine-font-color-based-on-background-color\n */\nfunction contrastColor(color: [number, number, number]): [number, number, number] {\n  let luminance = (0.299 * color[0] + 0.587 * color[1] + 0.114 * color[2]) / 255;\n  return luminance > 0.5 ? [0, 0, 0] : [255, 255, 255]\n}\nconst FieldAnalsis: React.FC<FieldAnalsisProps> = (props) => {\n\n  const { originSummary, groupedSummary } = props;\n\n  const entropyRange = useMemo<[number, number]>(() => {\n    const originEntropy = originSummary.map(s => s.maxEntropy);\n    return [0, Math.max(...originEntropy)];\n  }, [originSummary])\n\n  const onRenderCompactCard = (item: Record) => {\n    return (\n      <div className=\"field-hover-card\">\n        <h2>{item.fieldName}</h2>\n        <div>Field entropy is { Number(item.entropy).toFixed(2) }</div>\n        <div className=\"chart-vertical-margin-container\" >\n          <DistributionChart x=\"memberName\" y=\"count\" fieldType={item.type as FieldType} dataSource={item.distribution} />\n        </div>\n        \n      </div>\n    )\n  }\n  const onRenderExpandedCard = (item: Record) => {\n    const name = item.fieldName;\n    const target = groupedSummary.find(s => s.fieldName === name + '(group)')\n    return (\n      <div className=\"field-hover-card\">\n        {\n          target ? <div>\n            <h3>{target.fieldName}</h3>\n            <div>Field entropy is { Number(target.entropy).toFixed(2) }</div>\n            <div className=\"chart-vertical-margin-container\">\n              <DistributionChart x=\"memberName\" y=\"count\" fieldType={target.type as FieldType} dataSource={target.distribution} />\n            </div>\n          </div> : <div>This field is not grouped.</div>\n        }\n      </div>\n    )\n  }\n\n\n\n  const renderItemColumn = (item: Record, index?: number, column?: IColumn) => {\n    if (column !== undefined) {\n      const name = item.fieldName;\n      const target = groupedSummary.find(s => s.fieldName === name + '(group)')\n      const expandingCardProps: IExpandingCardProps = {\n        onRenderCompactCard,\n        onRenderExpandedCard,\n        renderData: item,\n        compactCardHeight: 320,\n        expandedCardHeight: target ? 320 : 40\n      }\n      const fieldContent = item[column.fieldName!];\n      let bgColor: [number, number, number] = [255, 255, 255];\n      switch (column.key) {\n        case 'type':\n          return <div>\n            <Icon iconName={getIconNameByFieldType(fieldContent)} /> {fieldContent}\n          </div>\n        case 'entropy':\n        case 'maxEntropy':\n          bgColor = getValueColor(item[column.key], entropyRange);\n          let bgColorStr = `rgb(${bgColor.join(',')})`\n          let fontColorStr = `rgb(${contrastColor(bgColor).join(',')})`\n          return (\n            <HoverCard expandedCardOpenDelay={800} expandingCardProps={expandingCardProps} instantOpenOnClick={true}>\n              <div style={{ boxShadow: `${bgColorStr} 0px 0px 0px 10px`, backgroundColor: bgColorStr, color: fontColorStr }}>{fieldContent}</div>\n            </HoverCard>\n          )\n        default:\n          return <HoverCard expandedCardOpenDelay={800} expandingCardProps={expandingCardProps} instantOpenOnClick={true}>\n          <div>{fieldContent}</div>\n        </HoverCard>\n      }\n    }\n  }\n\n  // const onRenderRow: IRenderFunction<any> = (props) => {\n  //   const customStyles: Partial<IDetailsRowStyles> = {};\n  //   customStyles.root = { backgroundColor: getValueColor(props.item['entropy'], entropyRange), color: '#fff' }\n  //   return <DetailsRow {...props} styles={customStyles} />;\n  // };\n\n  return <DetailsList compact={true} columns={columns} items={originSummary} selectionMode={SelectionMode.none} onRenderItemColumn={renderItemColumn} />\n}\n\nexport default FieldAnalsis;","import React, { useRef, useMemo, useEffect, useState } from 'react';\nimport { Subspace } from '../../service';\nimport embed from 'vega-embed';\nimport { DataSource } from '../../global';\n\nfunction encodeArr (arr: any[]): string {\n  return arr.join(',')\n}\ninterface SubspacesProps {\n  subspaceList: Subspace[];\n  onSpaceChange: (dimensions: string[], measures: string[], matrix: number[][]) => void\n}\nconst Subspaces: React.FC<SubspacesProps> = (props) => {\n  const { subspaceList, onSpaceChange } = props;\n  const [curIndex, setCurIndex] = useState(0);\n  const spaceChart = useRef<HTMLDivElement>(null)\n  const relationChart = useRef<HTMLDivElement>(null)\n  // const subspaces = useMemo<IndexSubspace[]>(() => {\n  //   return subspaceList.map((space, index) => {\n  //     return {\n  //       ...space,\n  //       index\n  //     }\n  //   })\n  // }, [subspaceList]);\n  useEffect(() => {\n    let index = subspaceList.length - 1;\n    if (index > -1) {\n      let targetSpace = subspaceList[index];\n      onSpaceChange(targetSpace.dimensions, targetSpace.measures.map(m => m.name), targetSpace.correlationMatrix);\n      setCurIndex(index);\n    }\n  }, [subspaceList, onSpaceChange])\n\n  const values = useMemo<DataSource>(() => {\n    let ans = [];\n    // todos:\n    // the fold operation here is a tmp solution. it is designed when I don't there is a api in vega to handle event listener.\n    // the fold operation here can caused a wasted of time and space.\n    // I suggested to divied it into two charts and connect the logic throgh a state manager outside the charts.\n    for (let i = 0; i < subspaceList.length; i++) {\n      let space = subspaceList[i];\n      let dimensions = encodeArr(space.dimensions)\n      for (let { name, value } of space.measures) {\n        let record: any = {\n          test: i,\n          score: space.score,\n          dimensions,\n          measureName: name,\n          measureValue: value,\n        };\n        ans.push(record)\n      }\n    }\n    return ans\n  }, [subspaceList])\n  useEffect(() => {\n    if (spaceChart.current && subspaceList.length > 0) {\n      embed(spaceChart.current, {\n        data: {\n          values\n        },\n        vconcat: [\n          {\n            mark: 'rect',\n            selection: {\n              dim: {\n                type: 'single',\n                on: 'click',\n                encodings: ['y']\n              }\n            },\n            encoding: {\n              x: { field: 'measureName', type: 'nominal' },\n              y: {\n                field: 'dimensions',\n                type: 'ordinal',\n                sort: { field: 'score' }\n              },\n              color: { field: 'measureValue', type: 'quantitative', aggregate: 'mean', scale: { reverse: true } },\n              opacity: {\n                condition: {selection: 'dim', value: 1},\n                value: 0.72\n              },\n            }\n          }\n        ]\n      }).then(res => {\n        res.view.addEventListener('click', function (e, item) {\n          if (item) {\n            /**\n             * record is the data record(defiend in `values`) the event contains.\n             */\n            let record = item.datum;\n            let index = subspaceList.findIndex(space => encodeArr(space.dimensions) === record.dimensions)\n\n            if (index > -1) {\n              let targetSpace = subspaceList[index];\n              onSpaceChange(targetSpace.dimensions, targetSpace.measures.map(m => m.name), targetSpace.correlationMatrix);\n              setCurIndex(index);\n            }\n          }\n        })\n      })\n    }\n    // eslint-disable-next-line\n  }, [subspaceList, values])\n  useEffect(() => {\n    let space = subspaceList[curIndex];\n    if (relationChart.current && subspaceList.length > 0 && space) {\n      let matrix: DataSource = [];\n      \n      for (let i = 0; i < space.correlationMatrix.length; i++) {\n          for (let j = 0; j < space.correlationMatrix[i].length; j++) {\n            matrix.push({\n              x: space.measures[i].name,\n              y: space.measures[j].name,\n              correlation: space.correlationMatrix[i][j]\n            })\n          }\n        }\n      embed(relationChart.current, {\n        data: {\n          values: matrix\n        },\n        mark: 'rect',\n        encoding: {\n          x: { field: 'x', type: 'nominal' },\n          y: { field: 'y', type: 'nominal' },\n          color: { field: 'correlation', type: 'quantitative', aggregate: 'mean' , scale: { scheme: 'redyellowgreen', domain: [-1, 1] } }\n        }\n      })\n    }\n    \n  }, [subspaceList, curIndex])\n  return <div>\n    <div ref={spaceChart}></div>\n    <div ref={relationChart}></div>\n  </div>\n}\n\nexport default Subspaces;","import React, { useEffect, useMemo, useRef } from 'react';\nimport { Cluster } from 'visual-insights';\nimport { useGlobalState } from '../../state';\nimport embed from 'vega-embed';\n// cluster should be used for small graph because the number of measure is limited. \n// Browser may be more likely crashed by other algorithm or data structure or memory used in the whole analysis pipline.\n/**\n * adjMatrix and measures share a common index system;\n */\ninterface ClusterBoardProps {\n  adjMatrix: number[][];\n  measures: string[];\n  onFocusGroup: (measuresInView: string[]) => void;\n}\n\ninterface VegaEdge {\n  source: number | string;\n  target: number | string;\n  value: number;\n  inCutEdge: boolean;\n}\ninterface VegaNode {\n  name: string;\n  index: number;\n  value: number;\n  group: number;\n}\ninterface TreeData { \n  nodes: VegaNode[];\n  edges: VegaEdge[]\n}\nconst ClusterBoard: React.FC<ClusterBoardProps> = (props) => {\n  const { adjMatrix, measures, onFocusGroup } = props;\n  const [state, ] = useGlobalState();\n  const chart = useRef<HTMLDivElement>(null);\n  // const groups = useMemo<string[][]>(() => {\n  //   return clusterMeasures({\n  //     matrix: adjMatrix,\n  //     measures,\n  //   })\n  // }, [adjMatrix, measures]);\n  const clusterResult = useMemo(() => {\n    /**\n     * todo: \n     * maxGroupNumber = the measures length / max visual channel for measure.\n     */\n    let { edgesInMST, groups } = Cluster.kruskalWithFullMST(adjMatrix, state.maxGroupNumber);\n    return { edgesInMST, groups }\n  }, [adjMatrix, state.maxGroupNumber])\n  const treeData = useMemo<TreeData>(() => {\n    let { edgesInMST, groups } = clusterResult;\n    const edges: VegaEdge[] = edgesInMST.map(edge => {\n      return {\n        source: edge[0][0],\n        target: edge[0][1],\n        value: 1 / edge[1],\n        inCutEdge: edge[2]\n      }\n    });\n    const nodes: VegaNode[] = [];\n    for (let i = 0; i < groups.length; i++) {\n      nodes.push({\n        name: measures[i],\n        index: i,\n        value: 1,\n        group: groups[i]\n      })\n    }\n    return {\n      nodes,\n      edges\n    }\n  }, [measures, clusterResult])\n  useEffect(() => {\n    if (chart.current && measures.length > 0) {\n      embed(chart.current, {\n        \"$schema\": \"https://vega.github.io/schema/vega/v5.json\",\n        \"width\": 700,\n        \"height\": 500,\n        \"padding\": 0,\n        \"autosize\": \"none\",\n      \n        \"signals\": [\n          { \"name\": \"cx\", \"update\": \"width / 2\" },\n          { \"name\": \"cy\", \"update\": \"height / 2\" },\n          {\n            \"description\": \"State variable for active node fix status.\",\n            \"name\": \"fix\", \"value\": false,\n            \"on\": [\n              {\n                \"events\": \"text:mouseout[!event.buttons], window:mouseup\",\n                \"update\": \"false\"\n              },\n              {\n                \"events\": \"text:mouseover\",\n                \"update\": \"fix || true\"\n              },\n              {\n                \"events\": \"[text:mousedown, window:mouseup] > window:mousemove!\",\n                \"update\": \"xy()\",\n                \"force\": true\n              }\n            ]\n          },\n          {\n            \"description\": \"Graph node most recently interacted with.\",\n            \"name\": \"node\", \"value\": null,\n            \"on\": [\n              {\n                \"events\": \"text:mouseover\",\n                \"update\": \"fix === true ? item() : node\"\n              }\n            ]\n          },\n          {\n            \"description\": \"Flag to restart Force simulation upon data changes.\",\n            \"name\": \"restart\", \"value\": false,\n            \"on\": [\n              {\"events\": {\"signal\": \"fix\"}, \"update\": \"fix && fix.length\"}\n            ]\n          }\n        ],\n      \n        \"data\": [\n          {\n            \"name\": \"node-data\",\n            values: treeData.nodes,\n          },\n          {\n            \"name\": \"link-data\",\n            values: treeData.edges\n          }\n        ],\n      \n        \"scales\": [\n          {\n            \"name\": \"color\",\n            \"type\": \"ordinal\",\n            \"domain\": {\"data\": \"node-data\", \"field\": \"group\"},\n            \"range\": {\"scheme\": \"tableau20\"}\n          },\n          {\n            \"name\": \"colorEdge\",\n            \"type\": \"quantize\",\n            \"domain\": {\"data\": \"link-data\", \"field\": \"value\"},\n            \"range\": {\"scheme\": \"viridis\"}\n          }\n        ],\n      \n        \"marks\": [\n          {\n            \"name\": \"nodes\",\n            \"type\": \"text\",\n            \"zindex\": 1,\n      \n            \"from\": {\"data\": \"node-data\"},\n            \"on\": [\n              {\n                \"trigger\": \"fix\",\n                \"modify\": \"node\",\n                \"values\": \"fix === true ? {fx: node.x, fy: node.y} : {fx: fix[0], fy: fix[1]}\"\n              },\n              {\n                \"trigger\": \"!fix\",\n                \"modify\": \"node\", \"values\": \"{fx: null, fy: null}\"\n              }\n            ],\n      \n            \"encode\": {\n              \"enter\": {\n                \"fill\": {\"scale\": \"color\", \"field\": \"group\"},\n                \"text\": {\"field\": \"name\"},\n                \"fontSize\": {\"value\": 14},\n                \"fontWeight\": {\"value\": 600}\n              },\n              \"update\": {\n                \"cursor\": {\"value\": \"pointer\"}\n              }\n            },\n      \n            \"transform\": [\n              {\n                \"type\": \"force\",\n                \"iterations\": 300,\n                \"restart\": {\"signal\": \"restart\"},\n                \"signal\": \"force\",\n                \"forces\": [\n                  {\"force\": \"center\", \"x\": {\"signal\": \"cx\"}, \"y\": {\"signal\": \"cy\"}},\n                  {\"force\": \"collide\" },\n                  {\"force\": \"nbody\" },\n                  {\"force\": \"link\", \"links\": \"link-data\" }\n                ]\n              }\n            ]\n          },\n          {\n            \"type\": \"path\",\n            \"from\": {\"data\": \"link-data\"},\n            \"interactive\": false,\n            \"encode\": {\n              \"update\": {\n                \"stroke\": {\n                  \"scale\": \"colorEdge\",\n                  \"field\": \"value\"\n                },\n                \"strokeWidth\": {\"value\": 0.8},\n                \"opacity\": {\"value\": 0.5}\n              },\n            },\n            \"transform\": [\n              {\n                \"type\": \"linkpath\",\n                \"require\": {\"signal\": \"force\"},\n                \"shape\": \"line\",\n                \"sourceX\": \"datum.source.x\", \"sourceY\": \"datum.source.y\",\n                \"targetX\": \"datum.target.x\", \"targetY\": \"datum.target.y\"\n              }\n            ]\n          }\n        ]\n      }).then(res => {\n        res.view.addEventListener('click', function (e, item) {\n          if (item) {\n            let record = item.datum;\n            let group = record.group;\n            let measuresInView = measures.filter((mea, index) => {\n              return clusterResult.groups[index] === group\n            });\n            onFocusGroup(measuresInView);\n          }\n        })\n      })\n    }\n  }, [treeData, measures, clusterResult.groups, onFocusGroup])\n  return <div ref={chart}>\n  </div>\n}\n\nexport default ClusterBoard;","import React, { useMemo, useState, useEffect, useCallback } from 'react';\nimport { DataSource, Field } from '../../global';\nimport FieldAnalysisBoard from './fieldAnalysis';\nimport Subspaces from './subspaces';\nimport { FieldSummary, Subspace, combineFieldsService } from '../../service';\nimport ClusterBoard from './cluster';\nimport { specification } from 'visual-insights';\nimport { ProgressIndicator, Toggle, Slider } from 'office-ui-fabric-react';\nimport { useGlobalState } from '../../state';\nimport VegaBase from '../../visBuilder/vegaBase';\nimport './index.css';\nconst maxMeasureInView = 4;\ninterface NoteBookProps {\n  dataSource: DataSource;\n  // dimScores: [string, number, number, Field][],\n  summary: {\n    origin: FieldSummary[];\n    grouped: FieldSummary[]\n  };\n  subspaceList: Subspace[]\n}\ninterface ClusterState {\n  measures: string[];\n  dimensions: string[];\n  matrix: number[][];\n}\nconst NoteBook: React.FC<NoteBookProps> = (props) => {\n  const { summary, subspaceList, dataSource } = props;\n  const [state, updateState] = useGlobalState();\n  const [isAggregated, setIsAggregated] = useState(true);\n  \n  const [clusterState, setClusterState] = useState<ClusterState>({\n    measures: [],\n    dimensions: [],\n    matrix: []\n  })\n\n  const [measuresInView, setMeasuresInView] = useState<string[]>([]);\n\n\n  // todo:\n  // should be updated after designing new specification api\n  const dimScores = useMemo<[string, number, number, Field][]>(() => {\n    return [...summary.origin, ...summary.grouped].map(field => {\n      return [field.fieldName, field.entropy, field.maxEntropy, { name: field.fieldName, type: field.type }]\n    });\n  }, [summary.origin, summary.grouped])\n\n  const spec = useMemo(() => {\n    const { dimensions } = clusterState;\n    // todo\n    // this condition is not strict enough. dimScores should share same elements with dimensions and measures.\n    // maybe use try catch in future\n    try {\n      /**\n       * fieldScores is the scores info for the dims and meas in current view.\n       * dimensions should get the grouped new field.\n       * measures shall never use the grouped field.\n       */\n      const fieldScores = dimScores.filter(field => {\n        return dimensions.includes(field[0]) || measuresInView.includes(field[0])\n      })\n      const { schema } = specification(fieldScores, dataSource, dimensions, measuresInView)\n      return schema;\n    } catch (error) {\n      console.log(error)\n      return {\n        position: []\n      }\n    }\n\n  }, [dimScores, clusterState, dataSource, measuresInView])\n\n  const usedSubspaceList = useMemo<Subspace[]>(() => {\n    return subspaceList.slice(0, Math.round(subspaceList.length * state.topK.subspacePercentSize))\n  }, [subspaceList, state.topK.subspacePercentSize]);\n  useEffect(() => {\n    updateState(draft => {\n      draft.maxGroupNumber = Math.round(state.cookedMeasures.length / maxMeasureInView)\n    })\n  }, [state.cookedMeasures, updateState])\n\n  const onSpaceChange = useCallback((dimensions, measures, matrix) => {\n    setClusterState({\n      dimensions,\n      measures,\n      matrix\n    });\n  }, [setClusterState])\n\n  const onFocusGroup = useCallback(measInView => {\n    setMeasuresInView(measInView);\n  }, [])\n  return (\n    <div>\n      <h3 className=\"notebook header\">Univariate Summary</h3>\n      <p className=\"state-description\">\n        Hover your mouse over the fields and see the distails and entropy\n        reducing strategy.\n      </p>\n      {state.loading.univariateSummary && (\n        <ProgressIndicator description=\"analyzing\" />\n      )}\n      <div className=\"notebook content container\">\n        <FieldAnalysisBoard\n          originSummary={summary.origin}\n          groupedSummary={summary.grouped}\n        />\n      </div>\n\n      <h3 className=\"notebook header\">Subspace Searching</h3>\n      <p className=\"state-description\">\n        Try to choose one row(combination of dimensions) of the subspace and see\n        the changes of the processes below.\n      </p>\n      {state.loading.subspaceSearching && (\n        <ProgressIndicator description=\"analyzing\" />\n      )}\n      {!state.loading.univariateSummary && (\n        <Slider\n          disabled={state.loading.subspaceSearching}\n          value={state.topK.dimensionSize * 100}\n          label=\"top k percent dimension used\"\n          max={100}\n          valueFormat={(value: number) => `${value}%`}\n          showValue={true}\n          onChange={(value: number) => {\n            updateState(draft => {\n              draft.topK.dimensionSize = value / 100;\n              draft.loading.subspaceSearching = true;\n            });\n            const selectedDimensions = state.cookedDimensions.slice(\n              0,\n              Math.round((state.cookedDimensions.length * value) / 100)\n            );\n            combineFieldsService(\n              dataSource,\n              selectedDimensions,\n              state.cookedMeasures,\n              \"sum\",\n              state.useServer\n            ).then(subspaces => {\n              if (subspaces) {\n                updateState(draft => {\n                  draft.subspaceList = subspaces;\n                  draft.loading.subspaceSearching = false;\n                });\n              }\n            });\n          }}\n        />\n      )}\n      {!state.loading.univariateSummary && (\n        <Slider\n          disabled={state.loading.subspaceSearching}\n          value={state.topK.subspacePercentSize * 100}\n          label=\"top k percent subspace used\"\n          max={100}\n          valueFormat={(value: number) => `${value}%`}\n          showValue={true}\n          onChange={(value: number) => {\n            updateState(draft => {\n              draft.topK.subspacePercentSize = value / 100;\n            });\n          }}\n        />\n      )}\n      <div className=\"notebook content center container\">\n        <Subspaces\n          subspaceList={usedSubspaceList}\n          onSpaceChange={onSpaceChange}\n        />\n      </div>\n\n      <h3 className=\"notebook header\">Measurement Clustering</h3>\n      <p className=\"state-description\">\n        Try to choose one group to visualize them.\n      </p>\n      <Slider\n        label=\"Max Group Number\"\n        min={1}\n        max={state.cookedMeasures.length || 4}\n        step={1}\n        // defaultValue={clusterState.measures.length / 4}\n        value={state.maxGroupNumber}\n        showValue={true}\n        onChange={(value: number) => {\n          updateState(draft => {\n            draft.maxGroupNumber = value;\n          });\n        }}\n      />\n      <div className=\"notebook content center container\">\n        <ClusterBoard\n          adjMatrix={clusterState.matrix}\n          measures={clusterState.measures}\n          onFocusGroup={onFocusGroup}\n        />\n      </div>\n\n      <h3 className=\"notebook header\">Visualization</h3>\n      <p className=\"state-description\">\n        If there is no result here, try to click one group of measures in{\" \"}\n        <b>Clustering</b> process above.\n      </p>\n      <Toggle\n        checked={isAggregated}\n        label=\"aggregate measures\"\n        defaultChecked\n        onText=\"On\"\n        offText=\"Off\"\n        onChange={(e, checked: boolean | undefined) => {\n          setIsAggregated(!!checked);\n        }}\n      />\n      <div className=\"notebook content center container\">\n        <VegaBase\n          defaultAggregated={isAggregated}\n          defaultStack={true}\n          aggregator={\"sum\"}\n          schema={spec}\n          fieldFeatures={dimScores.map(dim => dim[3])}\n          dataSource={dataSource}\n          dimensions={clusterState.dimensions}\n          measures={measuresInView}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default NoteBook;","import React from 'react';\nimport { DetailsList, SelectionMode } from 'office-ui-fabric-react';\nimport { DataSource, BIField } from '../global';\nexport interface DataTableProps {\n  dataSource: DataSource,\n  fields: BIField[]\n}\nconst DataTable: React.FC<DataTableProps> = (props) => {\n  const { dataSource = [], fields = [] } = props;\n  let columns = fields.map(field => {\n    return {\n      key: field.name,\n      name: field.name,\n      fieldName: field.name,\n      minWidth: 70,\n      maxHeight: 90\n    }\n  });\n\n  return <div style={{maxHeight: 400, overflow: 'auto'}}>\n    <DetailsList items={dataSource} columns={columns} selectionMode={SelectionMode.none} />\n  </div>\n}\n\nexport default DataTable;","import React, { useState, useEffect } from 'react';\nimport { PrimaryButton, Panel, PanelType, Toggle } from 'office-ui-fabric-react';\n\nimport { BIField, BIFieldType } from '../global';\n\ninterface FieldPanelProps {\n  show: boolean;\n  onClose: () => void;\n  onUpdateConfig: (fields: BIField[]) => void;\n  fields: BIField[];\n}\nconst FieldPanel: React.FC<FieldPanelProps> = (props) => {\n  const {\n    show = false,\n    // fields = [],\n    onUpdateConfig,\n    onClose\n  } = props;\n  const [fields, setFields] = useState<BIField[]>([])\n  useEffect(() => {\n    setFields(props.fields)\n  }, [props.fields])\n  \n  function updateFieldType(field: BIField, type: BIFieldType) {\n    setFields(fields => {\n      return fields.map(f => {\n        if (field.name === f.name) {\n          return {\n            name: field.name,\n            type\n          }\n        } else {\n          return f\n        }\n      })\n    })\n  }\n\n  const onRenderFooterContent = () => <div>\n    <PrimaryButton onClick={() => { onUpdateConfig(fields); onClose(); }}>\n      Save\n    </PrimaryButton>\n  </div>\n  \n  return <Panel\n    isOpen={show}\n    type={PanelType.smallFixedFar}\n    onDismiss={onClose}\n    headerText=\"Meta Config\"\n    closeButtonAriaLabel=\"Close\"\n    onRenderFooterContent={onRenderFooterContent}\n  >\n    <div>\n      {\n        fields.map(field => <Toggle key={field.name} checked={field.type === 'dimension'} label={field.name} onText=\"dimension\" offText=\"measure\" onChange={(e, checked) => { updateFieldType(field, checked ? 'dimension' : 'measure')}} />)\n      }\n    </div>\n  </Panel>\n}\n\nexport default FieldPanel;\n","import { Cleaner } from 'visual-insights';\nimport { DataSource } from '../../global';\n\n// todo\n// cleanMethodList has redundency.\n// clean method type, cleanData(switch), cleanMethodList should be maintained in one structure.\nexport type CleanMethod = 'dropNull' | 'useMode' | 'simpleClean';\nexport function cleanData (dataSource: DataSource, dimensions: string[], measures: string[], method: CleanMethod): DataSource {\n  // hint: dropNull works really bad when we test titanic dataset.\n  // useMode fails when there are more null values than normal values;\n  switch (method) {\n    case 'dropNull':\n      return Cleaner.dropNull(dataSource, dimensions, measures);\n    case 'useMode':\n      // todo: bad props design\n      return Cleaner.useMode(dataSource, dimensions.concat(measures));  \n    case 'simpleClean':\n    default:\n      return Cleaner.simpleClean(dataSource, dimensions, measures);\n  }\n}\n\nexport const cleanMethodList: Array<{ key: CleanMethod; text: string }> = [\n  { key: 'dropNull', text: 'drop null records' },\n  { key: 'useMode', text: 'replace null with mode' },\n  { key: 'simpleClean', text: 'simple cleaning' }\n]\n","import { useMemo } from 'react';\nimport { BIField, DataSource, Record } from '../../global';\nimport { Transform } from '../../utils/index'\nimport {  cleanData,  CleanMethod } from './clean';\nimport { deepcopy } from '../../utils/index';\n\n\nexport function useDataSource (rawData: DataSource, fields: BIField[], cleanMethod: CleanMethod): [DataSource, DataSource] {\n  const dimensions = useMemo<string[]>(() => {\n    return fields.filter(field => field.type === 'dimension').map(field => field.name)\n  }, [fields])\n\n  const measures = useMemo<string[]>(() => {\n    return fields.filter(field => field.type === 'measure').map(field => field.name)\n  }, [fields])\n\n  const dataSource = useMemo<DataSource>(() => {\n    return rawData.map(row => {\n      let record: Record = {}\n      fields.forEach(field => {\n        record[field.name] = field.type === 'dimension' ? row[field.name] : Transform.transNumber(row[field.name])\n      })\n      return record\n    })\n  }, [rawData, fields])\n\n  const preparedData = useMemo<DataSource>(() => {\n    return cleanData(deepcopy(dataSource), dimensions, measures, cleanMethod);\n  }, [dimensions, measures, dataSource, cleanMethod])\n\n  return [dataSource, preparedData]\n}","// todo replace the deepcopy with a safe and faster one.\nexport default function deepcopy(dataSource: any) {\n  return JSON.parse(JSON.stringify(dataSource))\n}","import React, { useState, useRef } from \"react\";\nimport { useGlobalState } from \"../../state\";\nimport { FileLoader, useComposeState } from '../../utils/index';\nimport { ComboBox, PrimaryButton, IconButton, Callout, Stack, CommandBar, ChoiceGroup, IChoiceGroupOption, Slider, Label, Checkbox } from 'office-ui-fabric-react';\nimport DataTable from '../../components/table';\nimport FieldPanel from '../../components/fieldConfig';\nimport { DataSource,  BIField, Record } from '../../global';\nimport {  cleanMethodList, CleanMethod } from './clean';\nimport { Cleaner, Sampling } from 'visual-insights';\nimport { useDataSource } from './useDataSource';\nimport { useId } from '@uifabric/react-hooks';\n\nenum SampleKey {\n  none = 'none',\n  reservoir = 'reservoir',\n}\n\nconst SampleOptions = [\n  {\n    key: SampleKey.none,\n    text: 'none'\n  },\n  {\n    key: SampleKey.reservoir,\n    text: 'reservoir'\n  }\n];\n\ninterface PageStatus {\n  show: {\n    insightBoard: boolean;\n    configPanel: boolean;\n    fieldConfig: boolean;\n    dataConfig: boolean;\n  }\n}\n\ninterface DataSourceBoardProps {\n  onExtractInsights: () => void;\n}\n\nconst DataSourceBoard: React.FC<DataSourceBoardProps> = (props) => {\n  const [state,updateState, dispatch] = useGlobalState();\n  const [pageStatus, setPageStatus] = useComposeState<PageStatus>({\n    show: {\n      insightBoard: false,\n      fieldConfig: false,\n      configPanel: false,\n      dataConfig: false\n    }\n  })\n  const [cleanMethod, setCleanMethod] = useState<CleanMethod>('dropNull');\n  const [fixUnicodeField, setFixUnicodeField] = useState<boolean>(true);\n  const [sampleMethod, setSampleMethod] = useState<SampleKey>(SampleKey.none)\n  const [sampleSize, setSampleSize] = useState<number>(0.2);\n\n  const dataSetting = useRef<HTMLDivElement>(null);\n  const fileEle = useRef<HTMLInputElement>(null);\n\n  const [dataSource, preparedData] = useDataSource(state.rawData, state.fields, cleanMethod);\n\n  const labelId = useId('labelElement');\n\n  async function fileUploadHanlder () {\n    if (fileEle.current !== null && fileEle.current.files !== null) {\n      const file = fileEle.current.files[0];\n      /**\n       * tmpFields is fields cat by specific rules, the results is not correct sometimes, waitting for human's input\n       */\n      let tmpFields: BIField[] = [];\n      let rawData: DataSource = [];\n\n      if (file.type === 'text/csv' || file.type === 'application/vnd.ms-excel') {\n        rawData = await FileLoader.csvLoader(file);\n      } else if (file.type === 'application/json') {\n        rawData = await FileLoader.jsonLoader(file);\n      } else {\n        throw new Error(`unsupported file type=${file.type} `)\n      }\n      if (sampleMethod === SampleKey.reservoir) {\n        rawData = Sampling.reservoirSampling(rawData, Math.round(rawData.length * sampleSize));\n      }\n      rawData = Cleaner.dropNullColumn(rawData, Object.keys(rawData[0])).dataSource;\n      let keys = Object.keys(rawData[0]);\n      tmpFields = keys.map((fieldName, index) => {\n        return {\n          name: fieldName,\n          type: rawData.every(row => {\n            return !isNaN(row[fieldName]) || row[fieldName] === undefined;\n          }) ? 'measure' : 'dimension'\n        }\n      });\n      if (fixUnicodeField) {\n        tmpFields.forEach((f, i) => {\n          f.name = `${f.name}-rid-${i}`\n        })\n        rawData = rawData.map(record => {\n          let fixedRecord: Record = {};\n          for (let i = 0; i < keys.length; i++) {\n            fixedRecord[tmpFields[i].name] = record[keys[i]]\n          }\n          return fixedRecord\n        })\n      }\n      updateState(draft => {\n        draft.fields = tmpFields;\n        draft.rawData = rawData;\n      })\n      setPageStatus(draft => {\n        draft.show.dataConfig = false;\n      });\n    }\n  }\n  // const analysisHandler = startAnalysis(preparedData, state.fields);\n\n  const commandBarList = [\n    {\n      key: 'upload',\n      name: 'Upload',\n      iconProps: { iconName: 'Upload' },\n      onClick: () => {\n        if (fileEle.current) {\n          fileEle.current.click();\n        }\n      }\n    }\n  ]\n\n  return (\n    <div className=\"content-container\">\n      <FieldPanel\n        fields={state.fields}\n        show={pageStatus.show.fieldConfig}\n        onUpdateConfig={fields => {\n          updateState(draft => {\n            draft.fields = fields;\n          });\n        }}\n        onClose={() => {\n          setPageStatus(draft => {\n            draft.show.fieldConfig = false;\n          });\n        }}\n      />\n      <div className=\"card\">\n        <Stack horizontal>\n          <PrimaryButton\n            disabled={dataSource.length === 0}\n            iconProps={{ iconName: \"Financial\" }}\n            text=\"Extract Insights\"\n            onClick={() => {\n              dispatch(\"extractInsights\", {\n                dataSource: preparedData,\n                fields: state.fields\n              });\n              props.onExtractInsights();\n            }}\n          />\n          <div ref={dataSetting}>\n            <IconButton\n              iconProps={{ iconName: \"ExcelDocument\" }}\n              title=\"Upload\"\n              ariaLabel=\"upload data\"\n              onClick={() => {\n                setPageStatus(draft => {\n                  draft.show.dataConfig = true;\n                });\n              }}\n            />\n            <Callout\n              style={{ maxWidth: 300 }}\n              className=\"vi-callout-callout\"\n              role=\"alertdialog\"\n              gapSpace={0}\n              target={dataSetting.current}\n              onDismiss={() => {\n                setPageStatus(draft => {\n                  draft.show.dataConfig = false;\n                });\n              }}\n              setInitialFocus={true}\n              hidden={!pageStatus.show.dataConfig}\n            >\n              <div className=\"vi-callout-header\">\n                <p className=\"vi-callout-title\">Upload Your own dataset</p>\n              </div>\n              <div className=\"vi-callout-inner\">\n                <div className=\"vi-callout-content\">\n                  <p className=\"vi-callout-subTex\">\n                    .csv, .json are supportted.\n                  </p>\n                </div>\n                <div>\n                  <Checkbox\n                    label=\"Add unique ids for fields\"\n                    checked={fixUnicodeField}\n                    onChange={(\n                      ev?: React.FormEvent<HTMLElement>,\n                      checked?: boolean\n                    ) => {\n                      setFixUnicodeField(!!checked);\n                    }}\n                  />\n                  <Label id={labelId} required={true}>\n                    Sampling\n                  </Label>\n                  <ChoiceGroup\n                    defaultSelectedKey=\"B\"\n                    options={SampleOptions}\n                    selectedKey={sampleMethod}\n                    onChange={(\n                      ev: any,\n                      option: IChoiceGroupOption | undefined\n                    ) => {\n                      if (option) {\n                        setSampleMethod(option.key as SampleKey);\n                      }\n                    }}\n                    ariaLabelledBy={labelId}\n                  />\n                  {sampleMethod !== SampleKey.none && (\n                    <Slider\n                      label=\"sample size(percent)\"\n                      min={0}\n                      max={1}\n                      step={0.001}\n                      value={sampleSize}\n                      showValue={true}\n                      valueFormat={(value: number) =>\n                        `${(value * 100).toFixed(1)}%`\n                      }\n                      onChange={(val: number) => {\n                        setSampleSize(val);\n                      }}\n                    />\n                  )}\n                </div>\n                <div className=\"vi-callout-actions\">\n                  <input\n                    type=\"file\"\n                    ref={fileEle}\n                    multiple\n                    accept=\"*\"\n                    style={{ display: \"none\" }}\n                    onChange={fileUploadHanlder}\n                  />\n                  <CommandBar\n                    overflowButtonProps={{ name: \"More\" }}\n                    items={commandBarList}\n                  />\n                </div>\n              </div>\n            </Callout>\n          </div>\n          <IconButton\n            iconProps={{ iconName: \"Settings\" }}\n            title=\"Field Setting\"\n            ariaLabel=\"field setting\"\n            onClick={() => {\n              setPageStatus(draft => {\n                draft.show.fieldConfig = true;\n              });\n            }}\n          />\n        </Stack>\n        <div style={{ margin: \"20px 0px\" }}>\n          <ComboBox\n            styles={{ root: { maxWidth: \"180px\" } }}\n            selectedKey={cleanMethod}\n            label=\"Clean Method\"\n            allowFreeform={true}\n            autoComplete=\"on\"\n            options={cleanMethodList}\n            onChange={(e, option) => {\n              option && setCleanMethod(option.key as CleanMethod);\n            }}\n          />\n        </div>\n        <p style={{ fontSize: 12, fontWeight: 400, color: \"#595959\" }}>\n          Remember to adjust the fields' types and cleaning strategy before\n          extracting insights.\n        </p>\n        <i style={{ fontSize: 12, fontWeight: 300, color: \"#595959\" }}>\n          Number of records {preparedData.length}\n        </i>\n        <DataTable fields={state.fields} dataSource={preparedData} />\n      </div>\n    </div>\n  );\n};\n\nexport default DataSourceBoard;\n","import React, { useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { DataSource } from \"../../global\";\nimport datalib from \"datalib\";\n\nfunction numberWithCommas(x: number): string {\n  let parts = x.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.join(\".\");\n}\n\nconst Card = styled.div`\n  display: inline-block;\n  padding: 1rem;\n  border: 1px solid #f5f5f5;\n  margin: 1rem;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB',\n  'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif, 'Apple Color Emoji',\n  'Segoe UI Emoji', 'Segoe UI Symbol';\n  .indicator-card.header {\n    color: #8c8c8c;\n    margin-top: 0px;\n    margin-bottom: 0px;\n    font-size: 20px;\n    line-height: 28px;\n    font-weight: 400;\n  }\n  .indicator-card.content {\n    color: #0078d4;\n    font-size: 56px;\n    line-height: 64px;\n    font-weight: 400;\n    margin: 0px;\n  }\n`;\ninterface IndicatorProps {\n  dataSource: DataSource;\n  measures: string[];\n  operator?: 'sum' | 'mean' | 'max' | 'min';\n}\nconst IndicatorCard: React.FC<IndicatorProps> = props => {\n  const { dataSource = [], measures = [], operator = 'sum' } = props;\n  const value = useMemo(() => {\n    if (measures.length === 0 || dataSource.length === 0) {\n      return '-'\n    }\n    let ans = 0;\n    try {\n      ans = datalib[operator](dataSource.map(d => d[measures[0]]));\n    } catch (error) {\n      console.log('operator does not exist or not in vega/datalib.')\n    }\n    if (Math.abs(ans - Math.round(ans)) > 0.00001) {\n      ans = Number(ans.toFixed(2));\n    }\n    return numberWithCommas(ans);\n  }, [dataSource, measures, operator]);\n\n  return (\n    <Card>\n      <h4 className=\"indicator-card header\">{measures[0]} {operator && `(${operator})`}</h4>\n      <h1 className=\"indicator-card content\">{ value }</h1>\n    </Card>\n  );\n};\n\nexport default IndicatorCard;\n","import React, { useRef, useEffect, useState } from 'react';\nimport embed, { vega, Result } from 'vega-embed';\nimport { Spec } from 'vega';\n// import { Result } from 'vega-embed';\n\ninterface ReactVegaProps {\n  dataSource: any[];\n  spec: Spec;\n  signalHandler?: {\n    [key: string]: (name: any, value: any) => void\n  }\n}\nconst ReactVega: React.FC<ReactVegaProps> = props => {\n  const { spec, dataSource, signalHandler = {} } = props\n  const container = useRef<HTMLDivElement>(null);\n  const [view, setView] = useState<Result['view']>()\n  useEffect(() => {\n    if (container.current) {\n      embed(container.current, spec).then(res => {\n        setView(res.view);\n      })\n    }\n  }, [spec])\n  useEffect(() => {\n    if (view && signalHandler) {\n      for (let key in signalHandler) {\n        view.addSignalListener('sl', signalHandler[key]);\n      }\n    }\n    return () => {\n      if (view && signalHandler) {\n        for (let key in signalHandler) {\n          view.removeSignalListener('sl', signalHandler[key]);\n        }\n      }\n    }\n  }, [view, signalHandler])\n  useEffect(() => {\n    view && view.change('dataSource', vega.changeset().remove(() => true).insert(dataSource))\n    view && view.resize();\n    view && view.runAsync();\n  }, [view, dataSource])\n  return <div ref={container} />\n}\n\nexport default ReactVega;\n","import React, { useMemo, useEffect, useState } from \"react\";\nimport { DashBoard } from \"../../service\";\nimport { DataSource, Field } from \"../../global\";\nimport { specification } from \"visual-insights\";\nimport { useComposeState } from \"../../utils/index\";\nimport { IconButton } from \"office-ui-fabric-react\";\nimport IndicatorCard from \"./indicatorCard\";\nimport ReactVega from '../../components/react-vega';\nimport { DataField, featureVis, targetVis } from '../../queries/index';\n\nconst IndicatorCardType = \"indicator\" as const;\n\ninterface CombinedChartProps {\n  dashBoard: DashBoard;\n  dataSource: DataSource;\n  dimScores: [string, number, number, Field][];\n}\n\ninterface GlobalFilters {\n  [key: string]: any[];\n}\n\nconst CombinedChart: React.FC<CombinedChartProps> = props => {\n  const { dashBoard = [], dataSource = [], dimScores = [] } = props;\n  const [globalFilters, setGlobalFilters] = useComposeState<GlobalFilters>({});\n  const [chartStateList, setChartStateList] = useState<boolean[]>([]);\n  useEffect(() => {\n    setChartStateList(dashBoard.map(() => false));\n  }, [dashBoard]);\n\n  const chartSpecList = useMemo(() => {\n    if (!dashBoard || !dataSource || !dimScores) {\n      return [];\n    }\n    return dashBoard.map(board => {\n      const { dimensions, measures, type } = board;\n      const fieldScores = dimScores.filter(field => {\n        return dimensions.includes(field[0]) || measures.includes(field[0]);\n      });\n      let { schema } = specification(\n        fieldScores,\n        dataSource,\n        dimensions,\n        measures\n      );\n      schema.position = schema.position || [];\n      schema.color = schema.color || [];\n      schema.opacity = schema.opacity || [];\n      schema.size = schema.size || [];\n      schema.shape = schema.shape || [];\n      schema.geomType = schema.geomType || [];\n      schema.highFacets = schema.highFacets || [];\n      schema.facets = schema.facets || [];\n      return {\n        dimensions,\n        measures,\n        type,\n        schema\n      };\n    });\n  }, [dashBoard, dataSource, dimScores]);\n\n  const fieldFeatures = useMemo(() => {\n    return dimScores.map(dim => dim[3])\n  }, [dimScores]);\n\n  const specList = useMemo<any[]>(() => {\n    return chartSpecList.map((spec, index) => {\n      const { dimensions, measures, schema, type } = spec;\n      let dataFields: DataField[] = [];\n      for (let dim of dimensions) {\n        let targetField = fieldFeatures.find(f => f.name === dim);\n\n        dataFields.push({\n          name: dim,\n          semanticType: (targetField ? targetField.type : 'nominal'),\n          type: 'dimension'\n        })\n      }\n      for (let mea of measures) {\n        let targetField = fieldFeatures.find(f => f.name === mea);\n\n        dataFields.push({\n          name: mea,\n          semanticType: (targetField ? targetField.type : 'nominal'),\n          type: 'measure'\n        })\n      }\n    \n      if (type === \"target\" && measures.length === 1) {\n        return {\n          specIndex: index,\n          type: IndicatorCardType,\n          measures: measures,\n          operator: \"sum\"\n        };\n      }\n      let vegaSpec: any = {}\n      if (type === 'target') {\n        vegaSpec = targetVis(schema, dataFields)\n      }\n\n      if (type === 'feature') {\n        vegaSpec = featureVis(schema, dataFields)\n      }\n      vegaSpec.specIndex = index\n      return vegaSpec\n    }) as any;\n  }, [chartSpecList, fieldFeatures]);\n\n  const signalHandler = useMemo(() => {\n    return dashBoard.map((d, index) => {\n      return {\n        sl: (name: any, values: any) => {\n          if (chartStateList[index]) {\n            setGlobalFilters(draft => {\n              if (Object.keys(values).length === 0) {\n                for (let key in draft) {\n                  // delete draft[key]\n                  draft[key] = [];\n                }\n              } else {\n                for (let key in values) {\n                  draft[key] = values[key];\n                }\n              }\n            });\n          }\n        }\n      };\n    });\n  }, [dashBoard, chartStateList, setGlobalFilters]);\n\n  const vsourceList = useMemo<Array<DataSource>>(() => {\n    let ans = [];\n    const filters = Object.keys(globalFilters).map(fieldName => {\n      return {\n        fieldName: fieldName,\n        filter: globalFilters[fieldName],\n        // protentional risk\n        isRange:\n          globalFilters[fieldName].length === 2 &&\n          typeof globalFilters[fieldName][0] === \"number\" &&\n          typeof globalFilters[fieldName][1] === \"number\" &&\n          globalFilters[fieldName][0] < globalFilters[fieldName][1]\n      };\n    });\n    const ds = dataSource.filter(record => {\n      return filters.every(f => {\n        if (f.filter.length === 0) {\n          return true;\n        }\n        if (f.isRange) {\n          return (\n            record[f.fieldName] >= f.filter[0] &&\n            record[f.fieldName] <= f.filter[1]\n          );\n        } else {\n          return f.filter.includes(record[f.fieldName]);\n        }\n      });\n    });\n    for (let i = 0; i < dashBoard.length; i++) {\n      if (chartStateList[i]) {\n        ans.push(dataSource);\n        continue;\n      }\n      ans.push(ds);\n    }\n    return ans;\n  }, [\n    dashBoard,\n    globalFilters,\n    dataSource,\n    chartStateList\n  ]);\n  return (\n    <div>\n      <div>\n      {specList.filter(spec => spec.type === IndicatorCardType).map((spec, index) =>\n          <IndicatorCard\n            key={`ds-ind-chart-${index}`}\n            dataSource={vsourceList[spec.specIndex]}\n            measures={spec.measures}\n          />\n      )}\n      </div>\n      <div>\n      {specList.filter(spec => spec.type !== IndicatorCardType).map((spec, index) =>\n          <div\n            key={`ds-chart-${index}`}\n            style={{\n              display: 'inline-block',\n              padding: \"4px\",\n              margin: \"2px\",\n              height: \"380px\",\n              overflowY: \"auto\"\n            }}\n          >\n            <div\n              style={{ float: \"left\", minWidth: \"300px\", minHeight: \"300px\" }}\n            >\n              {/* <div ref={node => { rendererRef(node, spec.specIndex) }}></div> */}\n              <ReactVega\n                dataSource={vsourceList[spec.specIndex]}\n                spec={spec}\n                signalHandler={\n                  chartStateList[spec.specIndex] && (signalHandler[spec.specIndex] as any)\n                }\n              />\n            </div>\n            <div style={{ float: \"left\" }}>\n              <IconButton\n                title=\"use as filter\"\n                ariaLabel=\"use as filter\"\n                iconProps={{\n                  iconName: chartStateList[spec.specIndex] ? \"FilterSolid\" : \"Filter\"\n                }}\n                onClick={() => {\n                  setChartStateList(list => {\n                    let nextList = [...list];\n                    nextList[spec.specIndex] = !nextList[spec.specIndex];\n                    if (!nextList[spec.specIndex]) {\n                      setGlobalFilters(draft => {\n                        for (let key in draft) {\n                          draft[key] = [];\n                        }\n                      });\n                    }\n                    return nextList;\n                  });\n                }}\n              />\n            </div>\n          </div>\n      )}\n      </div>\n    </div>\n  );\n};\n\nexport default CombinedChart;\n","import React, { useState } from \"react\";\nimport { PrimaryButton, DefaultButton, Stack, Separator, ProgressIndicator } from \"office-ui-fabric-react\";\nimport { useGlobalState } from \"../../state\";\nimport CombinedChart from \"./combinedChart\";\n\nconst DashBoardPage: React.FC = props => {\n  const [state, , dispatch, getters] = useGlobalState();\n  const [dashBoardIndex, setDashBoardIndex] = useState(0);\n  const {\n    subspaceList,\n    cookedDataSource,\n    cookedDimensions,\n    cookedMeasures,\n    dashBoardList\n  } = state;\n  const { dimScores } = getters;\n  return (\n    <div className=\"content-container\">\n      <div className=\"card\">\n        <PrimaryButton\n          text=\"Generate Dashboard\"\n          disabled={subspaceList.length === 0}\n          iconProps={{ iconName: \"AreaChart\" }}\n          onClick={() => {\n            dispatch(\"getDashBoard\", {\n              dataSource: cookedDataSource,\n              dimensions: cookedDimensions,\n              measures: cookedMeasures\n            });\n          }}\n        />\n        { state.loading.dashBoard && <ProgressIndicator description=\"generating dashboard\" /> }\n        <Separator>current page no: {dashBoardIndex + 1} of {dashBoardList.length}</Separator>\n        <Stack horizontal tokens={{ childrenGap: 20 }}>\n          <DefaultButton\n            text=\"Last\"\n            onClick={() => {\n              setDashBoardIndex(index => (index + dashBoardList.length - 1) % dashBoardList.length)\n            }}\n            allowDisabledFocus\n          />\n          <DefaultButton\n            text=\"Next\"\n            onClick={() => {\n              setDashBoardIndex(index => (index + 1) % dashBoardList.length)\n            }}\n            allowDisabledFocus\n          />\n        </Stack>\n        <p className=\"state-description\">\n          Double click the chart with selection to clear selection(filter).\n        </p>\n        <div\n          style={{\n            overflowX: \"auto\",\n            margin: \"1rem\",\n            border: \"1px solid #e8e8e8\"\n          }}\n        >\n          {dashBoardList[dashBoardIndex] && dashBoardList[dashBoardIndex].length > 0 && (\n            <CombinedChart\n              dataSource={cookedDataSource}\n              dashBoard={dashBoardList[dashBoardIndex]}\n              dimScores={dimScores}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashBoardPage;\n","import React, { useMemo } from 'react';\nimport { DataSource } from '../global';\nimport ReactVega from './react-vega';\n\ninterface SimpleTickProps {\n  x: string;\n  y: string;\n  threshold: number;\n  dataSource: DataSource\n}\nconst SimpleTick: React.FC<SimpleTickProps> = props => {\n  const { x, y, threshold, dataSource = [] } = props;\n  const spec = useMemo<any>(() => {\n    return {\n      width: 180,\n      height: 200,\n      data: {\n        name: 'dataSource'\n      },\n      transform: [\n        { calculate: threshold.toString(), as: 'threshold' }\n      ],\n      layer: [\n        {\n          mark: 'point',\n          encoding: {\n            x: {\n              field: x,\n              type: 'nominal',\n              scale: {\n                domain: ['outlier', 'trend', 'general', 'group']\n              }\n            },\n            y: {\n              field: y,\n              type: 'quantitative',\n              scale: {\n                domain: [0, 1]\n              }\n            }\n          }\n        },\n        {\n          mark: 'rule',\n          encoding: {\n            y: {\n              field: 'threshold',\n              type: 'quantitative'\n            },\n            color: {\n              value: 'red'\n            }\n          }\n        }\n      ]\n    }\n  }, [x, y, threshold])\n  return <div>\n    <ReactVega spec={spec} dataSource={dataSource} />\n  </div>;\n}\n\nexport default SimpleTick;","import React, { useRef, useEffect, useMemo } from 'react';\nimport embed from 'vega-embed';\nimport { scheme } from 'vega';\n\nscheme('threshold', ['#1890ff', '#ffccc7']);\n\ninterface RadarChartProps {\n  keyField: string;\n  valueField: string;\n  dataSource: any[];\n  threshold: number;\n}\ninterface DataRecord {\n  key: string;\n  value: number;\n  category: 0 | 1;\n}\nconst RadarChart: React.FC<RadarChartProps> = props => {\n  const { keyField, valueField, dataSource = [], threshold } = props;\n  const container = useRef<HTMLDivElement>(null);\n  const viewData = useMemo(() => {\n    let data: DataRecord[] = dataSource.map(record => {\n      return {\n        key: record[keyField],\n        value: Math.round(record[valueField] * 1000) / 1000,\n        category: 0\n      }\n    });\n    ['outlier', 'trend', 'general', 'group'].forEach(type => {\n      if (!data.find(d => d.key === type)) {\n        data.push({\n          key: type,\n          value: 0,\n          category: 0\n        })\n      }\n    })\n    let ruleData: DataRecord[] = data.map(record => {\n      return {\n        key: record.key,\n        value: threshold,\n        category: 1\n      }\n    })\n    return data.concat(ruleData);\n  }, [keyField, valueField, dataSource, threshold])\n  useEffect(() => {\n    if (container.current) {\n      embed(container.current, {\n        width: 280,\n        height: 280,\n        padding: 50,\n        autosize: { type: \"none\", contains: \"padding\" },\n\n        signals: [{ name: \"radius\", update: \"width / 2\" }],\n\n        data: [\n          {\n            name: \"table\",\n            values: viewData\n          },\n          {\n            name: \"keys\",\n            source: \"table\",\n            transform: [\n              {\n                type: \"aggregate\",\n                groupby: [\"key\"]\n              }\n            ]\n          }\n        ],\n\n        scales: [\n          {\n            name: \"angular\",\n            type: \"point\",\n            range: { signal: \"[-PI, PI]\" },\n            padding: 0.5,\n            domain: { data: \"table\", field: \"key\" }\n          },\n          {\n            name: \"radial\",\n            type: \"linear\",\n            range: { signal: \"[0, radius]\" },\n            zero: true,\n            nice: false,\n            domain: [0, 1],\n            domainMin: 0\n          },\n          {\n            name: \"color\",\n            type: \"ordinal\",\n            domain: { data: \"table\", field: \"category\" },\n            range: { scheme: \"threshold\" }\n          }\n        ],\n\n        encode: {\n          enter: {\n            x: { signal: \"radius\" },\n            y: { signal: \"radius\" }\n          }\n        },\n\n        marks: [\n          {\n            type: \"group\",\n            name: \"categories\",\n            zindex: 1,\n            from: {\n              facet: { data: \"table\", name: \"facet\", groupby: [\"category\"] }\n            },\n            marks: [\n              {\n                type: \"line\",\n                name: \"category-line\",\n                from: { data: \"facet\" },\n                encode: {\n                  enter: {\n                    interpolate: { value: \"linear-closed\" },\n                    x: {\n                      signal:\n                        \"scale('radial', datum.value) * cos(scale('angular', datum.key))\"\n                    },\n                    y: {\n                      signal:\n                        \"scale('radial', datum.value) * sin(scale('angular', datum.key))\"\n                    },\n                    stroke: { scale: \"color\", field: \"category\" },\n                    strokeWidth: { value: 1 },\n                    fill: { scale: \"color\", field: \"category\" },\n                    fillOpacity: { value: 0.1 }\n                  }\n                }\n              },\n              {\n                type: \"text\",\n                name: \"value-text\",\n                from: { data: \"category-line\" },\n                encode: {\n                  enter: {\n                    x: { signal: \"datum.x\" },\n                    y: { signal: \"datum.y\" },\n                    text: { signal: \"datum.datum.value\" },\n                    align: { value: \"center\" },\n                    baseline: { value: \"middle\" },\n                    fill: { value: \"#262626\" }\n                  }\n                }\n              }\n            ]\n          },\n          {\n            type: \"rule\",\n            name: \"radial-grid\",\n            from: { data: \"keys\" },\n            zindex: 0,\n            encode: {\n              enter: {\n                x: { value: 0 },\n                y: { value: 0 },\n                x2: { signal: \"radius * cos(scale('angular', datum.key))\" },\n                y2: { signal: \"radius * sin(scale('angular', datum.key))\" },\n                stroke: { value: \"lightgray\" },\n                strokeWidth: { value: 1 }\n              }\n            }\n          },\n          {\n            type: \"text\",\n            name: \"key-label\",\n            from: { data: \"keys\" },\n            zindex: 1,\n            encode: {\n              enter: {\n                x: {\n                  signal: \"(radius + 5) * cos(scale('angular', datum.key))\"\n                },\n                y: {\n                  signal: \"(radius + 5) * sin(scale('angular', datum.key))\"\n                },\n                text: { field: \"key\" },\n                align: [\n                  {\n                    test: \"abs(scale('angular', datum.key)) > PI / 2\",\n                    value: \"right\"\n                  },\n                  {\n                    value: \"left\"\n                  }\n                ],\n                baseline: [\n                  {\n                    test: \"scale('angular', datum.key) > 0\",\n                    value: \"top\"\n                  },\n                  {\n                    test: \"scale('angular', datum.key) == 0\",\n                    value: \"middle\"\n                  },\n                  {\n                    value: \"bottom\"\n                  }\n                ],\n                fill: { value: \"black\" },\n                fontWeight: { value: \"bold\" }\n              }\n            }\n          },\n          {\n            type: \"line\",\n            name: \"outer-line\",\n            from: { data: \"radial-grid\" },\n            encode: {\n              enter: {\n                interpolate: { value: \"linear-closed\" },\n                x: { field: \"x2\" },\n                y: { field: \"y2\" },\n                stroke: { value: \"lightgray\" },\n                strokeWidth: { value: 1 }\n              }\n            }\n          }\n        ]\n      } as any, {\n        actions: false\n      });\n    }\n  }, [viewData]);\n  return <div ref={container}></div>\n}\n\nexport default RadarChart;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { InsightSpace } from 'visual-insights/build/esm/insights/dev';\nimport { specification } from \"visual-insights\";\nimport { getInsightViewSpace } from '../../service';\nimport { PrimaryButton, SpinButton, Slider, ProgressIndicator } from \"office-ui-fabric-react\";\nimport PreferencePanel, {\n  PreferencePanelConfig\n} from \"../../components/preference\";\nimport BaseChart from \"../../visBuilder/vegaBase\";\nimport { Position } from \"office-ui-fabric-react/lib/utilities/positioning\";\n\nimport { useGlobalState } from \"../../state\";\nimport { useComposeState } from '../../utils';\nimport SimpleTick from '../../components/simpleTick';\nimport RadarChart from '../../components/radarChart';\n\nconst Tag = styled.div`\n  display: inline-block;\n  padding: 0.1em 0.3em;\n  margin: 0.2em;\n  border-radius: 3px;\n  color: #fff;\n  font-size: 12px;\n  background-color: ${props => props.color};\n`;\n\nconst DashBoard = styled.div`\n  display: flex;\n  div.left{\n    flex-basis: 300px;\n    flex-grow: 1;\n    border-right: 1px solid #f0f0f0;\n  }\n  div.right{\n    margin-left: 1em;\n    flex-grow: 8;\n  }\n  padding: 1em 0em;\n`\n\nconst ColorMap: {\n  [key in InsightSpace['type']]: string\n} = {\n  'outlier': '#cf1322',\n  'trend': '#7cb305',\n  'general': '#08979c',\n  'group': '#c41d7f'\n}\n\nfunction arrEqual (arr1: any[], arr2: any[]): boolean {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst DevPage: React.FC = props => {\n  const [insightViewSpace, setInsightViewSpace] = useState<InsightSpace[]>([]);\n  const [sigThreshold, setSigThreshold] = useState<number>(0.6);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [visualConfig, setVisualConfig] = useState<PreferencePanelConfig>({\n    aggregator: \"sum\",\n    defaultAggregated: true,\n    defaultStack: true\n  });\n  const [pageStatus, setPageStatus] = useComposeState<{ show: { configPanel: boolean }}>({\n    show: {\n      configPanel: false\n    }\n  });\n  const [state, , dispatch, getters] = useGlobalState();\n  const [chartIndex, setChartIndex] = useState(0);\n  const {\n    cookedDataSource,\n    cookedDimensions,\n    cookedMeasures\n  } = state;\n  const { dimScores } = getters;\n  const viewSpaceList = useMemo(() => {\n    return insightViewSpace.filter(s => s.significance >= sigThreshold);\n  }, [insightViewSpace, sigThreshold])\n\n  const dataView = useMemo(() => {\n    if (viewSpaceList.length === 0) return null;\n    const { dimensions, measures } = viewSpaceList[chartIndex];\n    const fieldScores = dimScores.filter(field => {\n      return dimensions.includes(field[0]) || measures.includes(field[0]);\n    });\n    let { schema } = specification(\n      fieldScores,\n      cookedDataSource,\n      dimensions,\n      measures\n    );\n    return {\n      schema,\n      fieldFeatures: fieldScores.map(f => f[3]),\n      dimensions,\n      measures\n    }\n  }, [viewSpaceList, chartIndex, cookedDataSource])\n  const relatedViews = useMemo<InsightSpace[]>(() => {\n    if (dataView !== null) {\n      const { dimensions, measures } = dataView;\n      return insightViewSpace.filter(f => {\n        if (arrEqual(dimensions, f.dimensions) && arrEqual(measures, f.measures)) {\n          return true\n        }\n        return false\n      })\n    }\n    return []\n  }, [insightViewSpace, dataView])\n\n  useEffect(() => {\n    if (dataView === null) return;\n    const { schema } = dataView;\n    if (\n      schema.geomType &&\n      (schema.geomType.includes(\"point\") ||\n        schema.geomType.includes(\"density\"))\n    ) {\n      setVisualConfig(config => {\n        return {\n          ...config,\n          defaultAggregated: false\n        };\n      });\n    } else {\n      setVisualConfig(config => {\n        return {\n          ...config,\n          defaultAggregated: true\n        };\n      });\n    }\n  }, [dataView])\n  return (\n    <div className=\"content-container\">\n      <PreferencePanel\n        show={pageStatus.show.configPanel}\n        config={visualConfig}\n        onUpdateConfig={config => {\n          setVisualConfig(config);\n          setPageStatus(draft => {\n            draft.show.configPanel = false;\n          });\n        }}\n        onClose={() => {\n          setPageStatus(draft => {\n            draft.show.configPanel = false;\n          });\n        }}\n      />\n      {\n        cookedDataSource.length > 0 && <div className=\"card\">\n          <PrimaryButton\n            text=\"Get Insights\"\n            onClick={() => {\n              setLoading(true);\n              getInsightViewSpace(\n                cookedDataSource,\n                cookedDimensions,\n                cookedMeasures\n              ).then(res => {\n                setInsightViewSpace(res);\n                setLoading(false);\n              });\n            }}\n          />\n          {loading && <ProgressIndicator description=\"generating dashboard\" />}\n\n          <DashBoard>\n            <div className=\"left\">\n              <SimpleTick\n                x=\"type\"\n                y=\"significance\"\n                dataSource={insightViewSpace}\n                threshold={sigThreshold}\n              />\n              <Slider\n                label=\"significance threshold\"\n                max={100}\n                value={sigThreshold * 100}\n                valueFormat={(value: number) => `${value}%`}\n                showValue={true}\n                onChange={(value: number) => {\n                  setSigThreshold(value / 100);\n                  setChartIndex(0);\n                }}\n              />\n              <p className=\"state-description\">\n                There are {viewSpaceList.length} of views of which insight\n                significance is no less than {(sigThreshold * 100).toFixed(2)} %\n              </p>\n            </div>\n            <div className=\"right\">\n              <div style={{ width: \"280px\" }}>\n                <SpinButton\n                  label={\"Current Index\"}\n                  value={(chartIndex + 1).toString()}\n                  min={0}\n                  max={viewSpaceList.length}\n                  step={1}\n                  iconProps={{ iconName: \"Search\" }}\n                  labelPosition={Position.start}\n                  // tslint:disable:jsx-no-lambda\n                  onValidate={(value: string) => {\n                    setChartIndex((Number(value) - 1) % viewSpaceList.length);\n                  }}\n                  onIncrement={() => {\n                    setChartIndex((chartIndex + 1) % viewSpaceList.length);\n                  }}\n                  onDecrement={() => {\n                    setChartIndex(\n                      (chartIndex - 1 + viewSpaceList.length) %\n                        viewSpaceList.length\n                    );\n                  }}\n                  incrementButtonAriaLabel={\"Increase value by 1\"}\n                  decrementButtonAriaLabel={\"Decrease value by 1\"}\n                />\n              </div>\n              <div style={{ display: \"flex\", padding: \"1em\" }}>\n                <RadarChart\n                  dataSource={relatedViews}\n                  threshold={sigThreshold}\n                  keyField=\"type\"\n                  valueField=\"significance\"\n                />\n                <div>\n                  {\n                    relatedViews.length > 0 && relatedViews.filter(view => view.significance >= sigThreshold).map(view => (\n                      <Tag color={ColorMap[view.type]}>\n                        {view.type}\n                      </Tag>\n                    ))\n                  }\n                  {\n                    viewSpaceList[chartIndex] && <p className=\"state-description\">\n                        Dimensions are {viewSpaceList[chartIndex].dimensions}, and\n                        measures are {viewSpaceList[chartIndex].measures}. <br />\n                        There is a significance of \n                        {(viewSpaceList[chartIndex].significance * 100).toFixed(2)}%\n                        that there exits a {viewSpaceList[chartIndex].type} in the\n                        graph. <br />\n                        {JSON.stringify(viewSpaceList[chartIndex].description)}\n                      </p>\n                  }\n                </div>\n              </div>\n\n              <div></div>\n            </div>\n          </DashBoard>\n          {viewSpaceList.length > 0 && dataView !== null && (\n            <div>\n              <BaseChart\n                aggregator={visualConfig.aggregator}\n                defaultAggregated={visualConfig.defaultAggregated}\n                defaultStack={visualConfig.defaultStack}\n                dimensions={dataView.dimensions}\n                measures={dataView.measures}\n                dataSource={cookedDataSource}\n                schema={dataView.schema}\n                fieldFeatures={dataView.fieldFeatures}\n              />\n            </div>\n          )}\n        </div>\n      }\n      {\n        cookedDataSource.length === 0 && <div className=\"card\">\n          <p>\n            Dev Page now is testing for different types of insight worker.\n            <br />\n            If you see this hint, it means you have not upload dataSource or not click the 'extract insights' button\n             in dataSource page which will produce a cooked dataSource for dev page.\n          </p>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default DevPage;\n","import React, { useRef, useState } from \"react\";\nimport { Callout, ActionButton, Toggle, DirectionalHint } from \"office-ui-fabric-react\";\nimport { useGlobalState } from \"../state\";\n\nconst UserSettings: React.FC = props => {\n  const target = useRef<HTMLDivElement>(null);\n  const [show, setShow] = useState<boolean>(false);\n  const [state, updateState] = useGlobalState();\n  return (\n    <div>\n      <div ref={target}>\n        <ActionButton text=\"Preference\" iconProps={{ iconName: 'PlayerSettings' }} onClick={() => {setShow(true)}}></ActionButton>\n      </div>\n\n      {show && (\n        <Callout\n          target={target.current}\n          directionalHint={DirectionalHint.bottomLeftEdge}\n          onDismiss={() => {\n            setShow(false);\n          }}\n        >\n          <div style={{ padding: '1rem' }}>\n            <Toggle\n              label=\"Be Cool\"\n              checked={state.beCool}\n              onText=\"On\"\n              offText=\"Off\"\n              onChange={(\n                ev: React.MouseEvent<HTMLElement>,\n                checked?: boolean\n              ) => {\n                updateState(draft => {\n                  draft.beCool = checked || false;\n                });\n              }}\n            />\n            <Toggle\n              label=\"Use Server\"\n              disabled={true}\n              checked={state.useServer}\n              onText=\"On\"\n              offText=\"Off\"\n              onChange={(\n                ev: React.MouseEvent<HTMLElement>,\n                checked?: boolean\n              ) => {\n                updateState(draft => {\n                  draft.useServer = checked || false;\n                });\n              }}\n            />\n          </div>\n        </Callout>\n      )}\n    </div>\n  );\n};\n\nexport default UserSettings;\n\n","import React from \"react\";\nimport { useGlobalState, GlobalStateProvider } from \"./state\";\nimport { Pivot, PivotItem } from \"office-ui-fabric-react\";\nimport { useComposeState } from \"./utils/index\";\nimport \"./App.css\";\nimport RathLogo from './assets/rath.png';\nimport RathCoolLogo from './assets/rath-glasses.png';\n\nimport Gallery from \"./pages/gallery/index\";\nimport NoteBook from \"./pages/notebook/index\";\nimport DataSourceBoard from \"./pages/dataSource/index\";\nimport DashBoardPage from './pages/dashBoard/index';\nimport DevPage from './pages/dev';\nimport UserSettings from './components/userSettings';\n\nconst pivotList = [\n  'DataSource',\n  'NoteBook',\n  'Explore',\n  'DashBoard',\n  'Dev'\n].map((page, index) => {\n  return { title: page, itemKey: 'pivot-' + (index + 1)}\n});\n\nconst getLogoSrc = (withGlasses: boolean) => {\n  return withGlasses\n    ? RathCoolLogo\n    : RathLogo;\n};\n\ninterface PageStatus {\n  show: {\n    insightBoard: boolean;\n    configPanel: boolean;\n    fieldConfig: boolean;\n    dataConfig: boolean;\n  };\n  current: {\n    pivotKey: string;\n  };\n}\n\nfunction App() {\n  const [state, ] = useGlobalState();\n  const [pageStatus, setPageStatus] = useComposeState<PageStatus>({\n    show: {\n      insightBoard: false,\n      fieldConfig: false,\n      configPanel: false,\n      dataConfig: false\n    },\n    current: {\n      pivotKey: pivotList[0].itemKey\n    }\n  });\n  return (\n    <div>\n      <div className=\"header-bar\">\n        <div className=\"ms-Grid-row\">\n          <div className=\"ms-Grid-col ms-sm6 ms-md4 ms-lg1\">\n            <a\n              // onClick={() => { window.location.reload(false); }}\n              href=\"https://github.com/ObservedObserver/visual-insights\"\n              className=\"logo\"\n            >\n              <img src={ getLogoSrc(state.beCool) } alt=\"rath\" />\n            </a>\n          </div>\n          <div className=\"ms-Grid-col ms-sm6 ms-md8 ms-lg8\">\n            <Pivot\n              selectedKey={pageStatus.current.pivotKey}\n              onLinkClick={item => {\n                item &&\n                  item.props.itemKey &&\n                  setPageStatus(draft => {\n                    draft.current.pivotKey = item.props.itemKey!;\n                  });\n              }}\n              headersOnly={true}\n            >\n              {pivotList.map(pivot => (\n                <PivotItem\n                  key={pivot.itemKey}\n                  headerText={pivot.title}\n                  itemKey={pivot.itemKey}\n                />\n              ))}\n            </Pivot>\n          </div>\n          <div className=\"ms-Grid-col ms-sm6 ms-md8 ms-lg3\">\n          <div className=\"header-toolbar\">\n              <UserSettings />\n            </div>\n          </div>\n        </div>\n      </div>\n      {pageStatus.current.pivotKey === \"pivot-3\" && (\n        <Gallery\n          subspaceList={state.subspaceList}\n          dataSource={state.cookedDataSource}\n          summary={state.summary}\n        />\n      )}\n      {pageStatus.current.pivotKey === \"pivot-1\" && <DataSourceBoard onExtractInsights={() => {\n        setPageStatus(draft => {\n          draft.current.pivotKey = \"pivot-2\";\n          draft.show.insightBoard = true;\n        });\n      }\n      } />}\n      {pageStatus.current.pivotKey === \"pivot-2\" && (\n        <div className=\"content-container\">\n          <div className=\"card\">\n            <NoteBook\n              summary={state.summary}\n              subspaceList={state.subspaceList}\n              dataSource={state.cookedDataSource}\n            />\n          </div>\n        </div>\n      )}\n      {\n        pageStatus.current.pivotKey === 'pivot-4' && <DashBoardPage />\n      }\n      {\n        pageStatus.current.pivotKey === 'pivot-5' && <DevPage />\n      }\n    </div>\n  );\n}\n\nexport default function() {\n  return (\n    <GlobalStateProvider>\n      <App />\n    </GlobalStateProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { initializeIcons } from '@uifabric/icons';\nimport * as serviceWorker from './serviceWorker';\ninitializeIcons();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}